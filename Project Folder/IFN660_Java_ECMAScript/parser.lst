
// ==========================================================================
<<<<<<< HEAD
//  GPPG error listing for yacc source file <parser.y - 3/16/2017 5:00:36 PM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  WING-PC
//  DateTime: 3/16/2017 5:01:29 PM
//  UserName: wInG
=======
//  GPPG error listing for yacc source file <parser.y - 18/03/2017 11:25:37 PM>
// ==========================================================================
//  Version:  1.5.2
//  Machine:  DESKTOP-1VMC0S8
//  DateTime: 18/03/2017 11:25:43 PM
//  UserName: hudso
>>>>>>> origin/parser
// ==========================================================================


%namespace IFN660_Java_ECMAScript
%union
{
    public int num;
    public string name;
}

%token <num> NUMBER
%token <name> IDENT
<<<<<<< HEAD
%token IF ELSE INT BOOL
%token ARGS
%token MAIN
=======
%token IF ELSE INT BOOL GE
%token Void Main
>>>>>>> origin/parser

%left '='
%nonassoc '<'
%left '+'

%%
<<<<<<< HEAD
// Warning: NonTerminal symbol "Identifier" is unreachable
// Warning: NonTerminal symbol "Dims" is unreachable
// Warning: NonTerminal symbol "String" is unreachable
// Warning: NonTerminal symbol "UnannType" is unreachable
// Warning: NonTerminal symbol "UnannReferenceType" is unreachable
// Warning: NonTerminal symbol "VariableDeclaratorId" is unreachable
// -----------------------------------------------------------------
=======
// Warning: NonTerminal symbol "Identifyer" is unreachable
// Warning: NonTerminal symbol "FormalParameterList_Opt" is unreachable
// Warning: NonTerminal symbol "Dims_Opt" is unreachable
// Warning: NonTerminal symbol "MethodDeclorator" is unreachable
// Warning: NonTerminal symbol "Empty" is unreachable
// Warning: NonTerminal symbol "Result" is unreachable
// Warning: NonTerminal symbol "Throws" is unreachable
// --------------------------------------------------------------------
>>>>>>> origin/parser

Program : Statement
        ;

Statement : IF '(' Expression ')' Statement ELSE Statement
          | '{' StatementList '}'
          | Expression ';'
          | Type IDENT ';'
          ;

Type : INT
     | BOOL
     ;

StatementList : StatementList Statement
              | /* empty */
              ;

Expression : NUMBER
           | IDENT
           | Expression '=' Expression
           | Expression '+' Expression
           | Expression '<' Expression
           ;

<<<<<<< HEAD
		  // Unanntype - Vivian
UnannType : UnannReferenceType
		  ;

UnannReferenceType : /* empty */
					;

		  // VariableDeclaratorId - Vivian
VariableDeclaratorId : Identifier
					 | Dims
					 ;

		  // Identifier - Vivian
Identifier : ARGS
		   | String
		   | MAIN
		   ;

String : /* empty*/
       ;

		  // Dims - Vivian
Dims :  /* empty */
     ;

	 
=======
Empty:
	 ;

//WORK BY JOSH HUDSON
Result : Void
	   ;

Throws: Empty
	  ;
	 
MethodDeclorator: Identifyer '(' FormalParameterList_Opt ')' Dims_Opt
				;

Identifyer: Main
		  ;

//PLACEHOLDER - Josh
FormalParameterList_Opt: Empty
					   ;

Dims_Opt : Empty
		 ;

// JOSHUA'S WORK END
>>>>>>> origin/parser

%%

public Parser(Scanner scanner) : base(scanner)
{
}
// ==========================================================================

