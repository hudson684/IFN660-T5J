// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
<<<<<<< HEAD
// Machine:  LAPTOP-24NGQU2J
// DateTime: 25-03-2017 03:03:27
// UserName: sneha
// Input file <parser.y - 25-03-2017 02:43:23>
=======
// Machine:  VDI-VL17-054
// DateTime: 4/04/2017 9:01:43 AM
// UserName: n9768653
// Input file <parser.y - 4/04/2017 9:01:39 AM>
>>>>>>> testParser

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace IFN660_Java_ECMAScript
{
<<<<<<< HEAD
public enum Tokens {error=128,EOF=129,IDENTIFIER=130,ABSTRACT=131,CONTINUE=132,
    FOR=133,NEW=134,SWITCH=135,ASSERT=136,DEFAULT=137,IF=138,
    PACKAGE=139,SYNCHRONIZED=140,BOOL=141,DO=142,GOTO=143,PRIVATE=144,
    THIS=145,BREAK=146,DOUBLE=147,IMPLEMENTS=148,PROTECTED=149,THROW=150,
    BYTE=151,ELSE=152,IMPORT=153,PUBLIC=154,THROWS=155,CASE=156,
    ENUM=157,INSTANCEOF=158,RETURN=159,TRANSIENT=160,CATCH=161,EXTENDS=162,
    INT=163,SHORT=164,TRY=165,CHAR=166,FINAL=167,INTERFACE=168,
    STATIC=169,VOID=170,CLASS=171,FINALLY=172,LONG=173,STRICTFP=174,
    VOLATILE=175,CONST=176,FLOAT=177,NATIVE=178,SUPER=179,WHILE=180,
    IntegerLiteral=181,FloatingPointLiteral=182,BooleanLiteral=183,CharacterLiteral=184,StringLiteral=185,NullLiteral=186,
    ELLIPSIS=187,DOUBLE_COLON=188,EQUAL=189,GREATER_OR_EQUAL=190,LESS_THAN_OR_EQUAL=191,NOT_EQUAL=192,
    ARROW=193,LOGICAL_AND=194,LOGICAL_OR=195,INCREMENT=196,DECREMENT=197,LEFT_SHIFT=198,
    SIGNED_RIGHT_SHIFT=199,UNSIGNED_RIGHT_SHIFT=200,ADDITION_ASSIGNMENT=201,SUBTRACTION_ASSIGNMENT=202,MULTIPLICATION_ASSIGNMENT=203,DIVISION_ASSIGNMENT=204,
    MODULUS_ASSIGNMENT=205,BITWISE_AND_ASSIGNMENT=206,BITWISE_OR_ASSIGNMENT=207,BITWISE_XOR_ASSIGNMENT=208,LEFT_SHIFT_ASSIGNMENT=209,UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=210,
    SIGNED_RIGHT_SHIFT_ASSIGNMENT=211};
=======
public enum Tokens {error=128,EOF=129,NUMBER=130,IDENTIFIER=131,ABSTRACT=132,
    CONTINUE=133,FOR=134,NEW=135,SWITCH=136,ASSERT=137,DEFAULT=138,
    IF=139,PACKAGE=140,SYNCHRONIZED=141,BOOL=142,DO=143,GOTO=144,
    PRIVATE=145,THIS=146,BREAK=147,DOUBLE=148,IMPLEMENTS=149,PROTECTED=150,
    THROW=151,BYTE=152,ELSE=153,IMPORT=154,PUBLIC=155,THROWS=156,
    CASE=157,ENUM=158,INSTANCEOF=159,RETURN=160,TRANSIENT=161,CATCH=162,
    EXTENDS=163,INT=164,SHORT=165,TRY=166,CHAR=167,FINAL=168,
    INTERFACE=169,STATIC=170,VOID=171,CLASS=172,FINALLY=173,LONG=174,
    STRICTFP=175,VOLATILE=176,CONST=177,FLOAT=178,NATIVE=179,SUPER=180,
    WHILE=181,IntegerLiteral=182,FloatingPointLiteral=183,BooleanLiteral=184,CharacterLiteral=185,StringLiteral=186,
    NullLiteral=187,ELLIPSIS=188,DOUBLE_COLON=189,EQUAL=190,GREATER_OR_EQUAL=191,LESS_THAN_OR_EQUAL=192,
    NOT_EQUAL=193,ARROW=194,LOGICAL_AND=195,LOGICAL_OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,SIGNED_RIGHT_SHIFT=200,UNSIGNED_RIGHT_SHIFT=201,ADDITION_ASSIGNMENT=202,SUBTRACTION_ASSIGNMENT=203,MULTIPLICATION_ASSIGNMENT=204,
    DIVISION_ASSIGNMENT=205,MODULUS_ASSIGNMENT=206,BITWISE_AND_ASSIGNMENT=207,BITWISE_OR_ASSIGNMENT=208,BITWISE_XOR_ASSIGNMENT=209,LEFT_SHIFT_ASSIGNMENT=210,
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=211,SIGNED_RIGHT_SHIFT_ASSIGNMENT=212};
>>>>>>> testParser

public struct ValueType
#line 3 "parser.y"
{
    public long num;
	public float floatnum;
	public bool boolval;
	public char charval;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
<<<<<<< HEAD
  private static Rule[] rules = new Rule[119];
  private static State[] states = new State[137];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "Statement", "CompilationUnit", "Expression", "StatementList", 
=======
  private static Rule[] rules = new Rule[126];
  private static State[] states = new State[147];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "CompilationUnit", "Statement", "Expression", "StatementList", 
>>>>>>> testParser
      "Type", "StatementWithoutTrailingSubstatement", "AssignmentExpression", 
      "Empty", "PackageDeclaration_opt", "ImportDeclarations", "TypeDeclarations", 
      "TypeDeclaration", "ClassDeclaration", "NormalClassDeclaration", "ClassModifiers", 
      "TypeParameters_opt", "SuperClass_opt", "Superinterfaces_opt", "ClassBody", 
      "ClassModifier", "Annotation", "ClassBodyDeclarations", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodModifiers", "MethodHeader", 
      "MethodBody", "MethodModifier", "Result", "MethodDeclarator", "Throws_opt", 
      "UnannType", "FormalParameterList_Opt", "Dims_Opt", "FormalParameterList", 
<<<<<<< HEAD
      "Dims", "FormalParameters", "FormalParameter", "FormalParameter_s", "VariableModifiers", 
      "VariableDeclaratorId", "VariableModifier", "Annotations", "UnannReferenceType", 
      "UnannPrimitiveType", "UnannArrayType", "UnannTypeVariable", "Block", "BlockStatements_Opt", 
=======
      "Dims", "FormalParameters", "FormalParameter", "FormalParameter_repeat", 
      "VariableModifiers", "VariableDeclaratorId", "VariableModifier", "Annotations", 
      "UnannReferenceType", "UnannPrimitiveType", "NumbericType", "IntegralType", 
      "FloatingPointType", "UnannArrayType", "UnannTypeVariable", "Block", "BlockStatements_Opt", 
>>>>>>> testParser
      "BlockStatements", "BlockStatement", "BlockStatement_s", "LocalVariableDeclarationsAndStatement", 
      "LocalVariableDeclaration", "VariableDeclaratorList", "VariableDeclarator", 
      "ExpressionStatement", "StatementExpression", "Assignment", "LeftHandSide", 
      "AssignmentOperator", "ExpressionName", "ArrayAccess", "PrimaryNoNewArray", 
      "Literal", };

  static Parser() {
<<<<<<< HEAD
    states[0] = new State(new int[]{138,4,123,11,181,29,130,30,183,34,129,-21,171,-21,154,-21,149,-21,144,-21,131,-21,169,-21,167,-21,174,-21},new int[]{-1,1,-3,3,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44,-4,45,-11,46});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{40,5});
    states[5] = new State(new int[]{181,23,130,24},new int[]{-5,6,-9,25,-66,26,-67,27,-68,28});
    states[6] = new State(new int[]{41,7,61,17,43,19,60,21});
    states[7] = new State(new int[]{138,4,123,11,181,29,130,30,183,34,152,-107},new int[]{-3,8,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44});
    states[8] = new State(new int[]{152,9});
    states[9] = new State(new int[]{138,4,123,11,181,29,130,30,183,34,129,-107,152,-107,125,-107,59,-107},new int[]{-3,10,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44});
    states[10] = new State(-4);
    states[11] = new State(-12,new int[]{-6,12});
    states[12] = new State(new int[]{125,13,138,4,123,11,181,29,130,30,183,34},new int[]{-3,14,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44});
    states[13] = new State(-5);
    states[14] = new State(-11);
    states[15] = new State(new int[]{59,16,61,17,43,19,60,21});
    states[16] = new State(-6);
    states[17] = new State(new int[]{181,23,130,24},new int[]{-5,18,-9,25,-66,26,-67,27,-68,28});
    states[18] = new State(new int[]{61,-15,43,19,60,21,59,-15,41,-15});
    states[19] = new State(new int[]{181,23,130,24},new int[]{-5,20,-9,25,-66,26,-67,27,-68,28});
    states[20] = new State(-16);
    states[21] = new State(new int[]{181,23,130,24},new int[]{-5,22,-9,25,-66,26,-67,27,-68,28});
    states[22] = new State(new int[]{61,-17,43,19,41,-17,59,-17});
    states[23] = new State(-13);
    states[24] = new State(-14);
    states[25] = new State(-18);
    states[26] = new State(-115);
    states[27] = new State(-116);
    states[28] = new State(-117);
    states[29] = new State(new int[]{59,-13,61,-13,43,-13,60,-13,130,-9});
    states[30] = new State(-14);
    states[31] = new State(new int[]{130,32});
    states[32] = new State(new int[]{59,33});
    states[33] = new State(-7);
    states[34] = new State(-10);
    states[35] = new State(-8);
    states[36] = new State(-106);
    states[37] = new State(new int[]{59,38});
    states[38] = new State(-108);
    states[39] = new State(-109);
    states[40] = new State(new int[]{61,43},new int[]{-64,41});
    states[41] = new State(new int[]{181,23,130,24},new int[]{-5,42,-9,25,-66,26,-67,27,-68,28});
    states[42] = new State(new int[]{61,17,43,19,60,21,59,-110});
    states[43] = new State(-113);
    states[44] = new State(-111);
    states[45] = new State(-3);
    states[46] = new State(-23,new int[]{-12,47});
    states[47] = new State(new int[]{171,-32,154,-32,149,-32,144,-32,131,-32,169,-32,167,-32,174,-32,129,-26},new int[]{-13,48,-14,49,-15,51,-16,52,-17,53});
    states[48] = new State(-20);
    states[49] = new State(new int[]{171,-32,154,-32,149,-32,144,-32,131,-32,169,-32,167,-32,174,-32,129,-26},new int[]{-13,50,-14,49,-15,51,-16,52,-17,53});
    states[50] = new State(-25);
    states[51] = new State(-28);
    states[52] = new State(-29);
    states[53] = new State(new int[]{171,54,154,130,149,131,144,132,131,133,169,134,167,135,174,136},new int[]{-22,128,-23,129});
    states[54] = new State(new int[]{130,55});
    states[55] = new State(-42,new int[]{-18,56});
    states[56] = new State(-43,new int[]{-19,57});
    states[57] = new State(-44,new int[]{-20,58});
    states[58] = new State(new int[]{123,60},new int[]{-21,59});
    states[59] = new State(-30);
    states[60] = new State(-47,new int[]{-24,61});
    states[61] = new State(new int[]{125,62,170,-19,130,-19,154,-19,169,-19},new int[]{-25,63,-26,64,-27,65,-28,66,-10,127});
    states[62] = new State(-45);
    states[63] = new State(-46);
    states[64] = new State(-48);
    states[65] = new State(-49);
    states[66] = new State(new int[]{170,122,130,119,154,125,169,126},new int[]{-29,67,-31,99,-32,100,-35,123,-47,91,-49,92,-50,93,-48,96,-23,124});
    states[67] = new State(new int[]{123,70,59,98},new int[]{-30,68,-51,69});
    states[68] = new State(-50);
    states[69] = new State(-86);
    states[70] = new State(new int[]{130,95,138,4,123,11,181,29,183,34,59,-81,125,-92},new int[]{-52,71,-53,73,-54,74,-56,77,-57,78,-35,80,-47,91,-49,92,-50,93,-48,96,-3,97,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44});
    states[71] = new State(new int[]{125,72});
    states[72] = new State(-90);
    states[73] = new State(-91);
    states[74] = new State(-95,new int[]{-55,75});
    states[75] = new State(new int[]{130,95,138,4,123,11,181,29,183,34,125,-93,59,-81},new int[]{-54,76,-56,77,-57,78,-35,80,-47,91,-49,92,-50,93,-48,96,-3,97,-5,15,-9,25,-66,26,-67,27,-68,28,-7,31,-8,35,-60,36,-61,37,-62,39,-63,40,-65,44});
    states[76] = new State(-94);
    states[77] = new State(-96);
    states[78] = new State(new int[]{59,79});
    states[79] = new State(-99);
    states[80] = new State(new int[]{130,84,59,-103},new int[]{-58,81,-59,82,-44,83});
    states[81] = new State(-100);
    states[82] = new State(-102);
    states[83] = new State(-104);
    states[84] = new State(new int[]{91,-41,59,-65,44,-65,41,-65},new int[]{-37,85,-39,86,-46,87,-23,90});
    states[85] = new State(-78);
    states[86] = new State(-64);
    states[87] = new State(new int[]{91,88});
    states[88] = new State(new int[]{93,89});
    states[89] = new State(-77);
    states[90] = new State(-88);
    states[91] = new State(-79);
    states[92] = new State(-82);
    states[93] = new State(-41,new int[]{-39,94,-46,87,-23,90});
    states[94] = new State(-84);
    states[95] = new State(new int[]{91,-85,59,-14,61,-14,43,-14,60,-14});
    states[96] = new State(-80);
    states[97] = new State(-97);
    states[98] = new State(-87);
    states[99] = new State(-51);
    states[100] = new State(new int[]{130,103},new int[]{-33,101});
    states[101] = new State(-60,new int[]{-34,102});
    states[102] = new State(-57);
    states[103] = new State(new int[]{40,104});
    states[104] = new State(new int[]{130,-74,167,-74,41,-63},new int[]{-36,105,-38,108,-40,109,-41,110,-43,115});
    states[105] = new State(new int[]{41,106});
    states[106] = new State(new int[]{91,-41,123,-65,59,-65},new int[]{-37,107,-39,86,-46,87,-23,90});
    states[107] = new State(-61);
    states[108] = new State(-62);
    states[109] = new State(-66);
    states[110] = new State(new int[]{44,112,41,-71},new int[]{-42,111});
    states[111] = new State(-68);
    states[112] = new State(-74,new int[]{-41,113,-43,115});
    states[113] = new State(new int[]{44,112,41,-71},new int[]{-42,114});
    states[114] = new State(-70);
    states[115] = new State(new int[]{130,119,167,121},new int[]{-35,116,-45,118,-47,91,-49,92,-50,93,-48,96,-23,120});
    states[116] = new State(new int[]{130,84},new int[]{-44,117});
    states[117] = new State(-72);
    states[118] = new State(-73);
    states[119] = new State(-85);
    states[120] = new State(-75);
    states[121] = new State(-76);
    states[122] = new State(-58);
    states[123] = new State(-59);
    states[124] = new State(-54);
    states[125] = new State(-55);
    states[126] = new State(-56);
    states[127] = new State(-52);
    states[128] = new State(-31);
    states[129] = new State(-33);
    states[130] = new State(-34);
    states[131] = new State(-35);
    states[132] = new State(-36);
    states[133] = new State(-37);
    states[134] = new State(-38);
    states[135] = new State(-39);
    states[136] = new State(-40);
=======
    states[0] = new State(-20,new int[]{-1,1,-3,3,-11,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-22,new int[]{-12,5});
    states[5] = new State(new int[]{172,-31,155,-31,150,-31,145,-31,132,-31,170,-31,168,-31,175,-31,129,-25},new int[]{-13,6,-14,7,-15,9,-16,10,-17,11});
    states[6] = new State(-19);
    states[7] = new State(new int[]{172,-31,155,-31,150,-31,145,-31,132,-31,170,-31,168,-31,175,-31,129,-25},new int[]{-13,8,-14,7,-15,9,-16,10,-17,11});
    states[8] = new State(-24);
    states[9] = new State(-27);
    states[10] = new State(-28);
    states[11] = new State(new int[]{172,12,155,140,150,141,145,142,132,143,170,144,168,145,175,146},new int[]{-22,138,-23,139});
    states[12] = new State(new int[]{131,13});
    states[13] = new State(-41,new int[]{-18,14});
    states[14] = new State(-42,new int[]{-19,15});
    states[15] = new State(-43,new int[]{-20,16});
    states[16] = new State(new int[]{123,18},new int[]{-21,17});
    states[17] = new State(-29);
    states[18] = new State(-46,new int[]{-24,19});
    states[19] = new State(new int[]{125,20,171,-51,131,-51,152,-51,165,-51,164,-51,174,-51,167,-51,178,-51,148,-51,142,-51,155,-51,170,-51},new int[]{-25,21,-26,22,-27,23,-28,24});
    states[20] = new State(-44);
    states[21] = new State(-45);
    states[22] = new State(-47);
    states[23] = new State(-48);
    states[24] = new State(new int[]{171,133,131,130,152,57,165,58,164,59,174,60,167,61,178,63,148,64,142,65,155,136,170,137},new int[]{-29,25,-31,109,-32,110,-35,134,-47,49,-52,50,-53,51,-48,54,-49,55,-50,56,-51,62,-23,135});
    states[25] = new State(new int[]{123,28,59,108},new int[]{-30,26,-54,27});
    states[26] = new State(-49);
    states[27] = new State(-94);
    states[28] = new State(new int[]{131,53,152,57,165,58,164,59,174,60,167,61,178,63,148,64,142,65,139,67,123,74,182,92,184,97,59,-91,125,-100},new int[]{-55,29,-56,31,-57,32,-59,35,-60,36,-35,38,-47,49,-52,50,-53,51,-48,54,-49,55,-50,56,-51,62,-4,66,-5,78,-9,88,-69,89,-70,90,-71,91,-7,94,-8,98,-63,99,-64,100,-65,102,-66,103,-68,107});
    states[29] = new State(new int[]{125,30});
    states[30] = new State(-98);
    states[31] = new State(-99);
    states[32] = new State(-103,new int[]{-58,33});
    states[33] = new State(new int[]{131,53,152,57,165,58,164,59,174,60,167,61,178,63,148,64,142,65,139,67,123,74,182,92,184,97,125,-101,59,-91},new int[]{-57,34,-59,35,-60,36,-35,38,-47,49,-52,50,-53,51,-48,54,-49,55,-50,56,-51,62,-4,66,-5,78,-9,88,-69,89,-70,90,-71,91,-7,94,-8,98,-63,99,-64,100,-65,102,-66,103,-68,107});
    states[34] = new State(-102);
    states[35] = new State(-104);
    states[36] = new State(new int[]{59,37});
    states[37] = new State(-107);
    states[38] = new State(new int[]{131,42,59,-111},new int[]{-61,39,-62,40,-44,41});
    states[39] = new State(-108);
    states[40] = new State(-110);
    states[41] = new State(-112);
    states[42] = new State(new int[]{91,-40,59,-63,44,-63,41,-63,131,-63,152,-63,165,-63,164,-63,174,-63,167,-63,178,-63,148,-63,142,-63,168,-63},new int[]{-37,43,-39,44,-46,45,-23,48});
    states[43] = new State(-76);
    states[44] = new State(-62);
    states[45] = new State(new int[]{91,46});
    states[46] = new State(new int[]{93,47});
    states[47] = new State(-75);
    states[48] = new State(-96);
    states[49] = new State(-77);
    states[50] = new State(-90);
    states[51] = new State(-40,new int[]{-39,52,-46,45,-23,48});
    states[52] = new State(-92);
    states[53] = new State(new int[]{91,-93,59,-13,61,-13,43,-13,60,-13});
    states[54] = new State(-78);
    states[55] = new State(-79);
    states[56] = new State(-81);
    states[57] = new State(-83);
    states[58] = new State(-84);
    states[59] = new State(-85);
    states[60] = new State(-86);
    states[61] = new State(-87);
    states[62] = new State(-82);
    states[63] = new State(-88);
    states[64] = new State(-89);
    states[65] = new State(-80);
    states[66] = new State(-105);
    states[67] = new State(new int[]{40,68});
    states[68] = new State(new int[]{182,86,131,87},new int[]{-5,69,-9,88,-69,89,-70,90,-71,91});
    states[69] = new State(new int[]{41,70,61,80,43,82,60,84});
    states[70] = new State(new int[]{139,67,123,74,182,92,131,93,184,97},new int[]{-4,71,-5,78,-9,88,-69,89,-70,90,-71,91,-7,94,-8,98,-63,99,-64,100,-65,102,-66,103,-68,107});
    states[71] = new State(new int[]{153,72});
    states[72] = new State(new int[]{139,67,123,74,182,92,131,93,184,97},new int[]{-4,73,-5,78,-9,88,-69,89,-70,90,-71,91,-7,94,-8,98,-63,99,-64,100,-65,102,-66,103,-68,107});
    states[73] = new State(-3);
    states[74] = new State(-11,new int[]{-6,75});
    states[75] = new State(new int[]{125,76,139,67,123,74,182,92,131,93,184,97},new int[]{-4,77,-5,78,-9,88,-69,89,-70,90,-71,91,-7,94,-8,98,-63,99,-64,100,-65,102,-66,103,-68,107});
    states[76] = new State(-4);
    states[77] = new State(-10);
    states[78] = new State(new int[]{59,79,61,80,43,82,60,84});
    states[79] = new State(-5);
    states[80] = new State(new int[]{182,86,131,87},new int[]{-5,81,-9,88,-69,89,-70,90,-71,91});
    states[81] = new State(new int[]{61,-14,43,82,60,84,59,-14,41,-14});
    states[82] = new State(new int[]{182,86,131,87},new int[]{-5,83,-9,88,-69,89,-70,90,-71,91});
    states[83] = new State(-15);
    states[84] = new State(new int[]{182,86,131,87},new int[]{-5,85,-9,88,-69,89,-70,90,-71,91});
    states[85] = new State(new int[]{61,-16,43,82,41,-16,59,-16});
    states[86] = new State(-12);
    states[87] = new State(-13);
    states[88] = new State(-17);
    states[89] = new State(-122);
    states[90] = new State(-123);
    states[91] = new State(-124);
    states[92] = new State(new int[]{59,-12,61,-12,43,-12,60,-12,131,-8});
    states[93] = new State(-13);
    states[94] = new State(new int[]{131,95});
    states[95] = new State(new int[]{59,96});
    states[96] = new State(-6);
    states[97] = new State(-9);
    states[98] = new State(-7);
    states[99] = new State(-115);
    states[100] = new State(new int[]{59,101});
    states[101] = new State(-116);
    states[102] = new State(-117);
    states[103] = new State(new int[]{61,106},new int[]{-67,104});
    states[104] = new State(new int[]{182,86,131,87},new int[]{-5,105,-9,88,-69,89,-70,90,-71,91});
    states[105] = new State(new int[]{61,80,43,82,60,84,59,-118});
    states[106] = new State(-121);
    states[107] = new State(-119);
    states[108] = new State(-95);
    states[109] = new State(-50);
    states[110] = new State(new int[]{131,114},new int[]{-33,111});
    states[111] = new State(-18,new int[]{-34,112,-10,113});
    states[112] = new State(-55);
    states[113] = new State(-58);
    states[114] = new State(new int[]{40,115});
    states[115] = new State(new int[]{131,-72,152,-72,165,-72,164,-72,174,-72,167,-72,178,-72,148,-72,142,-72,168,-72,41,-61},new int[]{-36,116,-38,119,-40,120,-41,121,-43,126});
    states[116] = new State(new int[]{41,117});
    states[117] = new State(new int[]{91,-40,123,-63,59,-63},new int[]{-37,118,-39,44,-46,45,-23,48});
    states[118] = new State(-59);
    states[119] = new State(-60);
    states[120] = new State(-64);
    states[121] = new State(new int[]{44,123,41,-69},new int[]{-42,122});
    states[122] = new State(-66);
    states[123] = new State(new int[]{44,123,131,-69,152,-69,165,-69,164,-69,174,-69,167,-69,178,-69,148,-69,142,-69,168,-69},new int[]{-42,124});
    states[124] = new State(-72,new int[]{-41,125,-43,126});
    states[125] = new State(-68);
    states[126] = new State(new int[]{131,130,152,57,165,58,164,59,174,60,167,61,178,63,148,64,142,65,168,132},new int[]{-35,127,-45,129,-47,49,-52,50,-53,51,-48,54,-49,55,-50,56,-51,62,-23,131});
    states[127] = new State(new int[]{131,42},new int[]{-44,128});
    states[128] = new State(-70);
    states[129] = new State(-71);
    states[130] = new State(-93);
    states[131] = new State(-73);
    states[132] = new State(-74);
    states[133] = new State(-56);
    states[134] = new State(-57);
    states[135] = new State(-52);
    states[136] = new State(-53);
    states[137] = new State(-54);
    states[138] = new State(-30);
    states[139] = new State(-32);
    states[140] = new State(-33);
    states[141] = new State(-34);
    states[142] = new State(-35);
    states[143] = new State(-36);
    states[144] = new State(-37);
    states[145] = new State(-38);
    states[146] = new State(-39);
>>>>>>> testParser

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{-3});
<<<<<<< HEAD
    rules[3] = new Rule(-1, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{138,40,-5,41,-3,152,-3});
    rules[5] = new Rule(-3, new int[]{123,-6,125});
    rules[6] = new Rule(-3, new int[]{-5,59});
    rules[7] = new Rule(-3, new int[]{-7,130,59});
    rules[8] = new Rule(-3, new int[]{-8});
    rules[9] = new Rule(-7, new int[]{181});
    rules[10] = new Rule(-7, new int[]{183});
    rules[11] = new Rule(-6, new int[]{-6,-3});
    rules[12] = new Rule(-6, new int[]{});
    rules[13] = new Rule(-5, new int[]{181});
    rules[14] = new Rule(-5, new int[]{130});
    rules[15] = new Rule(-5, new int[]{-5,61,-5});
    rules[16] = new Rule(-5, new int[]{-5,43,-5});
    rules[17] = new Rule(-5, new int[]{-5,60,-5});
    rules[18] = new Rule(-5, new int[]{-9});
    rules[19] = new Rule(-10, new int[]{});
    rules[20] = new Rule(-4, new int[]{-11,-12,-13});
    rules[21] = new Rule(-11, new int[]{});
    rules[22] = new Rule(-11, new int[]{});
    rules[23] = new Rule(-12, new int[]{});
    rules[24] = new Rule(-12, new int[]{});
    rules[25] = new Rule(-13, new int[]{-14,-13});
    rules[26] = new Rule(-13, new int[]{});
    rules[27] = new Rule(-13, new int[]{});
    rules[28] = new Rule(-14, new int[]{-15});
    rules[29] = new Rule(-15, new int[]{-16});
    rules[30] = new Rule(-16, new int[]{-17,171,130,-18,-19,-20,-21});
    rules[31] = new Rule(-17, new int[]{-17,-22});
    rules[32] = new Rule(-17, new int[]{});
    rules[33] = new Rule(-22, new int[]{-23});
    rules[34] = new Rule(-22, new int[]{154});
    rules[35] = new Rule(-22, new int[]{149});
    rules[36] = new Rule(-22, new int[]{144});
    rules[37] = new Rule(-22, new int[]{131});
    rules[38] = new Rule(-22, new int[]{169});
    rules[39] = new Rule(-22, new int[]{167});
    rules[40] = new Rule(-22, new int[]{174});
    rules[41] = new Rule(-23, new int[]{});
    rules[42] = new Rule(-18, new int[]{});
    rules[43] = new Rule(-19, new int[]{});
    rules[44] = new Rule(-20, new int[]{});
    rules[45] = new Rule(-21, new int[]{123,-24,125});
    rules[46] = new Rule(-24, new int[]{-24,-25});
    rules[47] = new Rule(-24, new int[]{});
    rules[48] = new Rule(-25, new int[]{-26});
    rules[49] = new Rule(-26, new int[]{-27});
    rules[50] = new Rule(-27, new int[]{-28,-29,-30});
    rules[51] = new Rule(-28, new int[]{-28,-31});
    rules[52] = new Rule(-28, new int[]{-10});
    rules[53] = new Rule(-28, new int[]{});
    rules[54] = new Rule(-31, new int[]{-23});
    rules[55] = new Rule(-31, new int[]{154});
    rules[56] = new Rule(-31, new int[]{169});
    rules[57] = new Rule(-29, new int[]{-32,-33,-34});
    rules[58] = new Rule(-32, new int[]{170});
    rules[59] = new Rule(-32, new int[]{-35});
    rules[60] = new Rule(-34, new int[]{});
    rules[61] = new Rule(-33, new int[]{130,40,-36,41,-37});
    rules[62] = new Rule(-36, new int[]{-38});
    rules[63] = new Rule(-36, new int[]{});
    rules[64] = new Rule(-37, new int[]{-39});
    rules[65] = new Rule(-37, new int[]{});
    rules[66] = new Rule(-38, new int[]{-40});
    rules[67] = new Rule(-38, new int[]{});
    rules[68] = new Rule(-40, new int[]{-41,-42});
    rules[69] = new Rule(-40, new int[]{});
    rules[70] = new Rule(-42, new int[]{44,-41,-42});
    rules[71] = new Rule(-42, new int[]{});
    rules[72] = new Rule(-41, new int[]{-43,-35,-44});
    rules[73] = new Rule(-43, new int[]{-43,-45});
    rules[74] = new Rule(-43, new int[]{});
    rules[75] = new Rule(-45, new int[]{-23});
    rules[76] = new Rule(-45, new int[]{167});
    rules[77] = new Rule(-39, new int[]{-46,91,93});
    rules[78] = new Rule(-44, new int[]{130,-37});
    rules[79] = new Rule(-35, new int[]{-47});
    rules[80] = new Rule(-35, new int[]{-48});
    rules[81] = new Rule(-48, new int[]{});
    rules[82] = new Rule(-47, new int[]{-49});
    rules[83] = new Rule(-47, new int[]{});
    rules[84] = new Rule(-49, new int[]{-50,-39});
    rules[85] = new Rule(-50, new int[]{130});
    rules[86] = new Rule(-30, new int[]{-51});
    rules[87] = new Rule(-30, new int[]{59});
    rules[88] = new Rule(-46, new int[]{-23});
    rules[89] = new Rule(-46, new int[]{});
    rules[90] = new Rule(-51, new int[]{123,-52,125});
    rules[91] = new Rule(-52, new int[]{-53});
    rules[92] = new Rule(-52, new int[]{});
    rules[93] = new Rule(-53, new int[]{-54,-55});
    rules[94] = new Rule(-55, new int[]{-55,-54});
    rules[95] = new Rule(-55, new int[]{});
    rules[96] = new Rule(-54, new int[]{-56});
    rules[97] = new Rule(-54, new int[]{-3});
    rules[98] = new Rule(-54, new int[]{});
    rules[99] = new Rule(-56, new int[]{-57,59});
    rules[100] = new Rule(-57, new int[]{-35,-58});
    rules[101] = new Rule(-57, new int[]{});
    rules[102] = new Rule(-58, new int[]{-59});
    rules[103] = new Rule(-58, new int[]{});
    rules[104] = new Rule(-59, new int[]{-44});
    rules[105] = new Rule(-59, new int[]{});
    rules[106] = new Rule(-8, new int[]{-60});
    rules[107] = new Rule(-8, new int[]{});
    rules[108] = new Rule(-60, new int[]{-61,59});
    rules[109] = new Rule(-61, new int[]{-62});
    rules[110] = new Rule(-62, new int[]{-63,-64,-5});
    rules[111] = new Rule(-63, new int[]{-65});
    rules[112] = new Rule(-65, new int[]{130});
    rules[113] = new Rule(-64, new int[]{61});
    rules[114] = new Rule(-5, new int[]{-9});
    rules[115] = new Rule(-9, new int[]{-66});
    rules[116] = new Rule(-66, new int[]{-67});
    rules[117] = new Rule(-67, new int[]{-68});
    rules[118] = new Rule(-68, new int[]{181});
=======
    rules[3] = new Rule(-4, new int[]{139,40,-5,41,-4,153,-4});
    rules[4] = new Rule(-4, new int[]{123,-6,125});
    rules[5] = new Rule(-4, new int[]{-5,59});
    rules[6] = new Rule(-4, new int[]{-7,131,59});
    rules[7] = new Rule(-4, new int[]{-8});
    rules[8] = new Rule(-7, new int[]{182});
    rules[9] = new Rule(-7, new int[]{184});
    rules[10] = new Rule(-6, new int[]{-6,-4});
    rules[11] = new Rule(-6, new int[]{});
    rules[12] = new Rule(-5, new int[]{182});
    rules[13] = new Rule(-5, new int[]{131});
    rules[14] = new Rule(-5, new int[]{-5,61,-5});
    rules[15] = new Rule(-5, new int[]{-5,43,-5});
    rules[16] = new Rule(-5, new int[]{-5,60,-5});
    rules[17] = new Rule(-5, new int[]{-9});
    rules[18] = new Rule(-10, new int[]{});
    rules[19] = new Rule(-3, new int[]{-11,-12,-13});
    rules[20] = new Rule(-11, new int[]{});
    rules[21] = new Rule(-11, new int[]{});
    rules[22] = new Rule(-12, new int[]{});
    rules[23] = new Rule(-12, new int[]{});
    rules[24] = new Rule(-13, new int[]{-14,-13});
    rules[25] = new Rule(-13, new int[]{});
    rules[26] = new Rule(-13, new int[]{});
    rules[27] = new Rule(-14, new int[]{-15});
    rules[28] = new Rule(-15, new int[]{-16});
    rules[29] = new Rule(-16, new int[]{-17,172,131,-18,-19,-20,-21});
    rules[30] = new Rule(-17, new int[]{-17,-22});
    rules[31] = new Rule(-17, new int[]{});
    rules[32] = new Rule(-22, new int[]{-23});
    rules[33] = new Rule(-22, new int[]{155});
    rules[34] = new Rule(-22, new int[]{150});
    rules[35] = new Rule(-22, new int[]{145});
    rules[36] = new Rule(-22, new int[]{132});
    rules[37] = new Rule(-22, new int[]{170});
    rules[38] = new Rule(-22, new int[]{168});
    rules[39] = new Rule(-22, new int[]{175});
    rules[40] = new Rule(-23, new int[]{});
    rules[41] = new Rule(-18, new int[]{});
    rules[42] = new Rule(-19, new int[]{});
    rules[43] = new Rule(-20, new int[]{});
    rules[44] = new Rule(-21, new int[]{123,-24,125});
    rules[45] = new Rule(-24, new int[]{-24,-25});
    rules[46] = new Rule(-24, new int[]{});
    rules[47] = new Rule(-25, new int[]{-26});
    rules[48] = new Rule(-26, new int[]{-27});
    rules[49] = new Rule(-27, new int[]{-28,-29,-30});
    rules[50] = new Rule(-28, new int[]{-28,-31});
    rules[51] = new Rule(-28, new int[]{});
    rules[52] = new Rule(-31, new int[]{-23});
    rules[53] = new Rule(-31, new int[]{155});
    rules[54] = new Rule(-31, new int[]{170});
    rules[55] = new Rule(-29, new int[]{-32,-33,-34});
    rules[56] = new Rule(-32, new int[]{171});
    rules[57] = new Rule(-32, new int[]{-35});
    rules[58] = new Rule(-34, new int[]{-10});
    rules[59] = new Rule(-33, new int[]{131,40,-36,41,-37});
    rules[60] = new Rule(-36, new int[]{-38});
    rules[61] = new Rule(-36, new int[]{});
    rules[62] = new Rule(-37, new int[]{-39});
    rules[63] = new Rule(-37, new int[]{});
    rules[64] = new Rule(-38, new int[]{-40});
    rules[65] = new Rule(-38, new int[]{});
    rules[66] = new Rule(-40, new int[]{-41,-42});
    rules[67] = new Rule(-40, new int[]{});
    rules[68] = new Rule(-42, new int[]{44,-42,-41});
    rules[69] = new Rule(-42, new int[]{});
    rules[70] = new Rule(-41, new int[]{-43,-35,-44});
    rules[71] = new Rule(-43, new int[]{-43,-45});
    rules[72] = new Rule(-43, new int[]{});
    rules[73] = new Rule(-45, new int[]{-23});
    rules[74] = new Rule(-45, new int[]{168});
    rules[75] = new Rule(-39, new int[]{-46,91,93});
    rules[76] = new Rule(-44, new int[]{131,-37});
    rules[77] = new Rule(-35, new int[]{-47});
    rules[78] = new Rule(-35, new int[]{-48});
    rules[79] = new Rule(-48, new int[]{-49});
    rules[80] = new Rule(-48, new int[]{142});
    rules[81] = new Rule(-49, new int[]{-50});
    rules[82] = new Rule(-49, new int[]{-51});
    rules[83] = new Rule(-50, new int[]{152});
    rules[84] = new Rule(-50, new int[]{165});
    rules[85] = new Rule(-50, new int[]{164});
    rules[86] = new Rule(-50, new int[]{174});
    rules[87] = new Rule(-50, new int[]{167});
    rules[88] = new Rule(-51, new int[]{178});
    rules[89] = new Rule(-51, new int[]{148});
    rules[90] = new Rule(-47, new int[]{-52});
    rules[91] = new Rule(-47, new int[]{});
    rules[92] = new Rule(-52, new int[]{-53,-39});
    rules[93] = new Rule(-53, new int[]{131});
    rules[94] = new Rule(-30, new int[]{-54});
    rules[95] = new Rule(-30, new int[]{59});
    rules[96] = new Rule(-46, new int[]{-23});
    rules[97] = new Rule(-46, new int[]{});
    rules[98] = new Rule(-54, new int[]{123,-55,125});
    rules[99] = new Rule(-55, new int[]{-56});
    rules[100] = new Rule(-55, new int[]{});
    rules[101] = new Rule(-56, new int[]{-57,-58});
    rules[102] = new Rule(-58, new int[]{-58,-57});
    rules[103] = new Rule(-58, new int[]{});
    rules[104] = new Rule(-57, new int[]{-59});
    rules[105] = new Rule(-57, new int[]{-4});
    rules[106] = new Rule(-57, new int[]{});
    rules[107] = new Rule(-59, new int[]{-60,59});
    rules[108] = new Rule(-60, new int[]{-35,-61});
    rules[109] = new Rule(-60, new int[]{});
    rules[110] = new Rule(-61, new int[]{-62});
    rules[111] = new Rule(-61, new int[]{});
    rules[112] = new Rule(-62, new int[]{-44});
    rules[113] = new Rule(-62, new int[]{});
    rules[114] = new Rule(-44, new int[]{131,-37});
    rules[115] = new Rule(-8, new int[]{-63});
    rules[116] = new Rule(-63, new int[]{-64,59});
    rules[117] = new Rule(-64, new int[]{-65});
    rules[118] = new Rule(-65, new int[]{-66,-67,-5});
    rules[119] = new Rule(-66, new int[]{-68});
    rules[120] = new Rule(-68, new int[]{131});
    rules[121] = new Rule(-67, new int[]{61});
    rules[122] = new Rule(-9, new int[]{-69});
    rules[123] = new Rule(-69, new int[]{-70});
    rules[124] = new Rule(-70, new int[]{-71});
    rules[125] = new Rule(-71, new int[]{182});
>>>>>>> testParser
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

<<<<<<< HEAD
#line 401 "parser.y"
=======
#line 415 "parser.y"
>>>>>>> testParser

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
