
// ==========================================================================
//  GPLEX error listing for lex source file <scanner.lex>
// ==========================================================================
//  Version:  1.2.2
<<<<<<< Updated upstream
//  Machine:  DESKTOP-1VMC0S8
//  DateTime: 12/03/2017 5:48:56 PM
//  UserName: hudso
=======
//  Machine:  VDI-VL17-119
//  DateTime: 12/03/2017 5:16:31 PM
//  UserName: n9004548
>>>>>>> Stashed changes
// ==========================================================================


%namespace IFN660_Java_ECMAScript
// Error: Too many errors
// Error: Too many errors, abandoning
// ----------------------------------

HexDigit									[0-9a-fA-F]
Digit 										[0-9_]
OctalDigit									[0-7]
TetraDigit									[0-3]
NonZeroDigit								[1-9]
BinaryDigit									[0-1]
Letter 										[$_a-zA-Z]

IntSuffix									[lL]
Digits										[0-9]+([0-9_]+)?[0-9]+
DecimalNumeral								0|{NonZeroDigit}+({Digits}?|[\_]+{Digits}+)
HexNumeral									0[xX]({HexDigit}+([{HexDigit}|_]+)?{HexDigit}+)
OctalDigits									{OctalDigit}+((({OctalDigit}|_)+)?){OctalDigit}*
OctalNumeral								0([\_]+({OctalDigits}+|{OctalDigits}))
BinaryNumeral								0[bB]([01]+|([01]+([01]|_)+)?[01]+)
IntergerLiteral								({DecimalNumeral}|{HexNumeral}|{OctalNumeral}|{BinaryNumeral}){IntSuffix}?

E											[eE][+-]?{Digit}+
//---------------^^
// Warning: No upper bound to range, "'+','-'" included as set class members
// -------------------------------------------------------------------------
FloatSuffix									[fFdD]
Float1										(({Digit}+.{Digit}*|.{Digit}+)({E})?){FloatSuffix}?
Float2										{Digit}+{E}{FloatSuffix}?
Float3										{Digit}+{E}?{FloatSuffix}					
DecimalFloatingPointLiteral					({Float1}|{Float2}|{Float3})
HexFloatingPointLiteral						({HexNumeral}[\.]?|[0][x]{HexDigit}?[\.]{HexDigit}+)[pP][+-]?{Digit}+{FloatSuffix}?
// Warning: No upper bound to range, "'+','-'" included as set class members
// -------------------------------------------------------------------------
FloatingPoint								({DecimalFloatingPointLiteral}|{HexFloatingPointLiteral})

BooleanLiteral								"true"|"false"	

OctalEscape									\\(?:[1-7][0-7]{0,2}|[0-7]{2,3})
EscapeSequence								[\\]([r]|[n]|[b]|[f]|[t]|[\\]|[\']|[\"]|{OctalEscape})
UnicodeEscape								(\u+{HexDigit}{HexDigit}{HexDigit}{HexDigit})
//-------------------^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: Illegal escape sequence <\u+{He> 
// ----------------------------------------

//Not Sure about this line - Josh
UnicodeEscape								([\\u+]{HexDigit}{HexDigit}{HexDigit}{HexDigit})

Numberic									({IntergerLiteral}|{FloatingPoint})
Character									\'(.|EscapeSequence|[^\\'])*\'
String										\"(.|EscapeSequence|[^\\"])*\"
Null										"null"

Literals										({Numberic}|{Character}|{String}|{BooleanLiteral}|{Null})

Separator									[\(\)\{\}\[\]\;\,\.\@]
Delimiter									[\=\>\<\!\~\?\:\+\-\*\/\&\|\^\%]

//Octaldigits									({OctalDigit}|{OctalDigit}[(OctalDigit|"_")+]{OctalDigit})
BinaryDigits									 {BinaryDigit}((({BinaryDigit}|_)+)?){BinaryDigit}	



%%

// 3.3 Unicode Escapes - Vivian Lee
<<<<<<< Updated upstream
\*u+{HexDigit}{HexDigit}{HexDigit}{HexDigit}		{return (int)Tokens.UNICODE_INPUT_CHAR;}
{UnicodeEscape}										{return (int)Tokens.UNICODE_ESCAPE;}
u+{HexDigit}{HexDigit}{HexDigit}{HexDigit}			{return (int)Tokens.UNICODE_RAW_INPUT;}
{HexDigit}											{return (int)Tokens.HEXDIGIT;}////
u+													{return (int)Tokens.UNICODE_MARKER;}
=======
\*u+{HexDigit}{HexDigit}{HexDigit}{HexDigit}		{return (int)Tokens.UNICODE_INPUT_CHAR}
{UnicodeEscape}										{return (int)Tokens.UNICODE_ESCAPE;}
u+{HexDigit}{HexDigit}{HexDigit}{HexDigit}			{return (int)Tokens.UNICODE_RAW_INPUT}
{HexDigit}											{return (int)Tokens.HEXDIGIT;}
u+													{return (int)Tokens.UNICODE_MARKER}
>>>>>>> Stashed changes


// 3.4  Line Terminators - Joshua Hudson
\LF  { yylval.name = yytext; return (int)Tokens.LINE_TERMINATOR; }
\CR  { yylval.name = yytext; return (int)Tokens.LINE_TERMINATOR; }
[\CR][\LF]  { yylval.name = yytext; return (int)Tokens.LINE_TERMINATOR; }

// 3.6 Whitespace
[ \r\n\t\f]                  /* skip whitespace */

// 3.7 Comments
\/\*([^*]|[\r\n]|(\*+([^*/]|[\r\n])))*\*+\/		/* skip multiline comments */

\/\/[^\n]*                /* skip the line comment  */

// 3.10.1 - Integer Literals
// Decimals
(({NonZeroDigit}({Digit}|"_")*{Digit}+)|{Digit})[lL]?  { yylval.name = yytext; return (int)Tokens.DecimalIntegerLiteral; }

// Hexadecimals
0[xX](({HexDigit}({HexDigit}|"_")*{HexDigit}+)|{HexDigit})[lL]?  { yylval.name = yytext; return (int)Tokens.HexIntegerLiteral; }


//OctalNumerals
0({OctalDigits}|[\_]+{OctalDigits})[lL]?  {yylval.name = yytext; return (int)Tokens.OCTAL; }

//Binary
//Binary numerals
0[bB]{BinaryDigits}[lL]? {yylval.name = yytext; return (int)Tokens.BINARY; }

										/* 3.9 KEYWORDS */
//--------^^^^^^^^^^^^^^^^^^
// Warning: Code between rules, ignored
// ------------------------------------
abstract									{return (int)Tokens.ABSTRACT;}
assert										{return (int)Tokens.ASSERT;}
boolean										{return (int)Tokens.BOOLEAN;}
break										{return (int)Tokens.BREAK;}
byte										{return (int)Tokens.BYTE;}
case										{return (int)Tokens.CASE;}
catch										{return (int)Tokens.CATCH;}
char										{return (int)Tokens.CHAR;}
class										{return (int)Tokens.CLASS;}
const										{return (int)Tokens.CONST;}
continue									{return (int)Tokens.CONTINUE;}
default										{return (int)Tokens.DEFAULT;}
do											{return (int)Tokens.DO;}
double										{return (int)Tokens.DOUBLE;}
else										{return (int)Tokens.ELSE;}
enum										{return (int)Tokens.ENUM;}
extends										{return (int)Tokens.EXTENDS;}
final										{return (int)Tokens.FINAL;}
finally										{return (int)Tokens.FINALLY;}
float										{return (int)Tokens.FLOAT;}
for											{return (int)Tokens.FOR;}
if											{return (int)Tokens.IF;}
goto										{return (int)Tokens.GOTO;}
implements									{return (int)Tokens.IMPLEMENTS;}
import										{return (int)Tokens.IMPORT;}
instanceof									{return (int)Tokens.INSTANCE_OF;}
int											{return (int)Tokens.INT;}
interface									{return (int)Tokens.INTERFACE;}
long										{return (int)Tokens.LONG;}
native										{return (int)Tokens.NATIVE;}
new											{return (int)Tokens.NEW;}
package										{return (int)Tokens.PACKAGE;}
private										{return (int)Tokens.PRIVATE;}
protected									{return (int)Tokens.PROTECTED;}
public										{return (int)Tokens.PUBLIC;}
return										{return (int)Tokens.RETURN;}
short										{return (int)Tokens.SHORT;}
static										{return (int)Tokens.STATIC;}
strictfp									{return (int)Tokens.STRICTFP;}
super										{return (int)Tokens.SUPER;}
switch										{return (int)Tokens.SWITCH;}
synchronized								{return (int)Tokens.SYNCHRONIZED;}
this										{return (int)Tokens.THIS;}
throw										{return (int)Tokens.THROW;}
throws										{return (int)Tokens.THROWS;}
transient									{return (int)Tokens.TRANSIENT;}
try											{return (int)Tokens.TRY;}
void										{return (int)Tokens.VOID;}
volatile									{return (int)Tokens.VOLATILE;}
while										{return (int)Tokens.WHILE;}

										/* 3.10 LITERALS */
//--------^^^^^^^^^^^^^^^^^^^
// Warning: Code between rules, ignored
// ------------------------------------
										
Literals									{return (int)Tokens.LITERALS;}


										/* 3.11 SEPARATORS */
//--------^^^^^^^^^^^^^^^^^^^^^
// Warning: Code between rules, ignored
// ------------------------------------
										
{Separator}									{return yytext[0];}
"..."										{return (int)Tokens.ELLIPSIS;}	
"::"										{return (int)Tokens.DOUBLE_COLON;}	
										

										/* 3.12 OPERATOR */
//--------^^^^^^^^^^^^^^^^^^^
// Warning: Code between rules, ignored
// ------------------------------------

{Delimiter}									{return yytext[0];}
"=="										{return (int)Tokens.EQUAL;}
">="										{return (int)Tokens.GREATER_OR_EQUAL;}
"<="										{return (int)Tokens.LESS_THAN_OR_EQUAL;}
"!="										{return (int)Tokens.NOT_EQUAL;}

"->"										{return (int)Tokens.ARROW;}
"&&"										{return (int)Tokens.LOGICAL_AND;}
"||"										{return (int)Tokens.LOGICAL_OR;}

"++"										{return (int)Tokens.INCREMENT;}
"--"										{return (int)Tokens.DECREMENT;}

"<<"										{return (int)Tokens.LEFT_SHIFT;}
">>"										{return (int)Tokens.SIGNED_RIGHT_SHIFT;}
">>>"										{return (int)Tokens.UNSIGNED_RIGHT_SHIFT;}

"+="										{return (int)Tokens.ADDITION_ASSIGNMENT;}
"-="										{return (int)Tokens.SUBTRACTION_ASSIGNMENT;}
"*="										{return (int)Tokens.MULTIPLICATION_ASSIGNMENT;}		
"/="										{return (int)Tokens.DIVISION_ASSIGNMENT;}
"%="										{return (int)Tokens.MODULUS_ASSIGNMENT;}
"&="										{return (int)Tokens.BITWISE_AND_ASSIGNMENT;}
"|="										{return (int)Tokens.BITWISE_OR_ASSIGNMENT;}
"^="										{return (int)Tokens.BITWISE_XOR_ASSIGNMENT;}
"<<="										{return (int)Tokens.LEFT_SHIFT_ASSIGNMENT;}
">>="										{return (int)Tokens.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT;}
">>>="										{return (int)Tokens.SIGNED_RIGHT_SHIFT_ASSIGNMENT;}

/* 3.8 IDENTIFIERS */
{Letter}({Letter}|{Digit})* 			{ yylval.name = yytext; return (int)Tokens.IDENT; }

{Digit}+	    						{ yylval.num = int.Parse(yytext); return (int)Tokens.NUMBER; }
			

.                            			{ 
											throw new Exception(
												String.Format(
													"unexpected character '{0}'", yytext)); 
										}
<<<<<<< Updated upstream
										
%%
// ==========================================================================
=======



%%                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ÿÿ
//^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
// Error: Expected end-of-line here
// --------------------------------
ÿÿÿ  ÿÿÿÿÿÿ  ÿÿÿÿÿ  ÿÿÿÿÿ  ÿÿÿÿÿ  ÿÿÿÿÿ  ÿÿ	ÿÿÿ  ÿ  0   b  I  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
Ê      Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
Ë  ,  Z  ¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Z  %Ð (ø  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
¢Ì   ~Ì  ~Ì  ¢~Ì  	~Ì  ¢~Ì  
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
~Ì  ¢ *   0 3      {É  þþ-
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
+~Ì  {Ç  ~Ë  {É  
//-^
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
+ *~~Ê  }È  (  
//--^
// Error: Illegal character in this context
// Error: Illegal character in this context
// Error: Illegal character in this context
// ----------------------------------------
  (8   *~ s }Ä  {Ä  o }É  * 0 ²  c   8£   {È  }Ç  +{Ä  o }É  (6 %
// Error: Illegal character in this context
// Error: Too many errors, abandoning
// ----------------------------------------
þ-à}Ç  {Ä  o }É  + }Ç  {Ä  o }É   (6 %
þ-×{Ç  
þ:   {Ç  	E      k   k   k   k   |         ¯   À   Ñ   8Ý   {È  	.+Q{Å  j3{Æ  jþþ+ -8´   {Æ  
jZ{Å  þþ-8    éý  8   8   %{Æ  jX}Æ  +h%{Æ  jX}Æ  +W%{Æ  jX}Æ  +F%{Å  jX}Å  +5%{Æ  jX}Æ  +$%{Å  jX}Å  +%{Å  jX}Å  ++   8Vþÿÿ*  0       {Í  
+ *& }Í  *  0       {Î  
+ *& }Î  *  0       {Ï  
+ *& }Ï  *  0       {Ñ  où  

+ *   0    d   {Ñ  oú  
oû  

+ *> {Ñ  oü  
 *  0    e   sý  

}  {Ñ  oü  
 *   0 ,   e   {  
{Ñ  oþ  
 %{Ï  Y}Ï  oB  *r(  
  }Í  sÿ  
}Ñ   *   0 J       s  
}Ó  s 
}Ö  s 
}×  (  
  }Ò  (G }Ô  (G }Õ   *  0 %   f   {Ò  oª  sE 
{×  o 
 + *   0 X  g   
{Ò  o  
}u  8    o  
{  þ-
(I 
+oß  þ-	{Õ  
+{Ô  
oC  }  +$ 	oØ  þ-
	oä    	X	{Ò  oª  þ-È Xo  
þ:]ÿÿÿ(G 
{Ö  o 
 o  
oC  o  
}  {Ó  {Õ  o 
 {Ó  {Ô  o 
  {Ö  o 
+( 
{Ó  o 
 ( 
-ÜÞþ1  o,  
 Ü *   (G    0   h    {Ö  o 
8Ç   ( 

 oA {  {4  {  {4  (¶  þ:   oÕ  -oÕ  + -Ý«    {  1{  {  þþ+ - }  }  Þs{  1{  {  þþ+ - }  }  Þ<  ( 
:)ÿÿÿÞþ1  o,  
 Ü (G {Ö  o 
 +  	*    Þí     0 ,   i   {  u-  
o@ þþ-+	oA + *0 ;  j   
8   {Ó  o 
o: Y	þþ- {Ó  o 
&8ä  X
s  
 {Ñ  o	 
8á   (
 
 oÝ  þ:Ã    	oÛ  ,o  
þþ+ :    o 
+n( 
{  þ-U {  u-  }  o< þ- o=  o?   o  
 %o> Xo?   ( 
-Þþ3  o,  
 Ü   ( 
:ÿÿÿÞþ2  o,  
 Ü %o: Yo;  o  
þ:¢   s 
 o 
8   ( 
	 
	{  u-  o> o@ þ-T {Ð  

þþ-& (G 

o 
 
}Ð  
}Ð   	
oD  	
}    ( 
:jÿÿÿÞþ3  o,  
 Ü  o 
8²   ( 

 
{Ð  o: þþ-' o@ 
o@ þþ-+
 +C 
o@ 
o@ þþ-$ 
o: o;  {Ò  oª  o;    {Ó  o 
 }Ð  
}Ð   ( 
:>ÿÿÿÞþ1  o,  
 Ü   {Ó  o 
þ:Îüÿÿ* 4   ¬ +     W øO     .     HÉ    rs 
}Ú  (  
  }Ø   *   0   k   
(w  
o  0  }Ù   {  o(  
8µ  ()  
 (*  
( 
	oC  :   	sP {Ù  %X
¢}Ü  8I   	{*  o2  
oQ  {6  þ- oU 			oY   8û    oV 
oV {N  	þþ-! oW 
ob  t  {S   +oU 
ob  {N  þþ-4 }8  {4  }Ý  
oY  oX   +\{N  
þþ-, t  {S  
oY  (N   + 
oY  oX     X	{*  o1  
þ:þÿÿ  (+  
:;þÿÿÞþ  o,  
 Ü {Ø  o þ-Y r¾K p( 
 {Ø  o$ -r p+r p ( 
 {Ø  o) -rÃ p+râK p ( 
 (:// ==========================================================================
>>>>>>> Stashed changes

