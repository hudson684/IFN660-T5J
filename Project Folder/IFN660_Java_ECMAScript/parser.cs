// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  VDI-VL17-070
// DateTime: 1/04/2017 12:18:29 PM
// UserName: n9768653
// Input file <parser.y - 1/04/2017 12:18:25 PM>

// options: lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace IFN660_Java_ECMAScript
{
public enum Tokens {error=128,EOF=129,NUMBER=130,IDENTIFIER=131,ABSTRACT=132,
    CONTINUE=133,FOR=134,NEW=135,SWITCH=136,ASSERT=137,DEFAULT=138,
    IF=139,PACKAGE=140,SYNCHRONIZED=141,BOOL=142,DO=143,GOTO=144,
    PRIVATE=145,THIS=146,BREAK=147,DOUBLE=148,IMPLEMENTS=149,PROTECTED=150,
    THROW=151,BYTE=152,ELSE=153,IMPORT=154,PUBLIC=155,THROWS=156,
    CASE=157,ENUM=158,INSTANCEOF=159,RETURN=160,TRANSIENT=161,CATCH=162,
    EXTENDS=163,INT=164,SHORT=165,TRY=166,CHAR=167,FINAL=168,
    INTERFACE=169,STATIC=170,VOID=171,CLASS=172,FINALLY=173,LONG=174,
    STRICTFP=175,VOLATILE=176,CONST=177,FLOAT=178,NATIVE=179,SUPER=180,
    WHILE=181,IntegerLiteral=182,FloatingPointLiteral=183,BooleanLiteral=184,CharacterLiteral=185,StringLiteral=186,
    NullLiteral=187,ELLIPSIS=188,DOUBLE_COLON=189,EQUAL=190,GREATER_OR_EQUAL=191,LESS_THAN_OR_EQUAL=192,
    NOT_EQUAL=193,ARROW=194,LOGICAL_AND=195,LOGICAL_OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,SIGNED_RIGHT_SHIFT=200,UNSIGNED_RIGHT_SHIFT=201,ADDITION_ASSIGNMENT=202,SUBTRACTION_ASSIGNMENT=203,MULTIPLICATION_ASSIGNMENT=204,
    DIVISION_ASSIGNMENT=205,MODULUS_ASSIGNMENT=206,BITWISE_AND_ASSIGNMENT=207,BITWISE_OR_ASSIGNMENT=208,BITWISE_XOR_ASSIGNMENT=209,LEFT_SHIFT_ASSIGNMENT=210,
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=211,SIGNED_RIGHT_SHIFT_ASSIGNMENT=212};

public struct ValueType
#line 3 "parser.y"
{
    public long num;
	public float floatnum;
	public bool boolval;
	public char charval;
    public string name;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[110];
  private static State[] states = new State[131];
  private static string[] nonTerms = new string[] {
      "Program", "$accept", "CompilationUnit", "Statement", "Expression", "StatementList", 
      "Type", "StatementWithoutTrailingSubstatement", "AssignmentExpression", 
      "Empty", "PackageDeclaration_opt", "ImportDeclarations", "TypeDeclarations", 
      "TypeDeclaration", "ClassDeclaration", "NormalClassDeclaration", "ClassModifiers", 
      "TypeParameters_opt", "SuperClass_opt", "Superinterfaces_opt", "ClassBody", 
      "ClassModifier", "Annotation", "ClassBodyDeclarations", "ClassBodyDeclaration", 
      "ClassMemberDeclaration", "MethodDeclaration", "MethodModifiers", "MethodHeader", 
      "MethodBody", "MethodModifier", "Result", "MethodDeclarator", "Throws_opt", 
      "UnannType", "FormalParameterList_Opt", "Dims_Opt", "FormalParameterList", 
      "Dims", "FormalParameters", "FormalParameter", "FormalParameter_repeat", 
      "VariableModifiers", "VariableDeclaratorId", "VariableModifier", "Annotations", 
      "UnannReferenceType", "UnannPrimitiveType", "UnannArrayType", "UnannTypeVariable", 
      "Block", "BlockStatements_Opt", "BlockStatements", "BlockStatement", "BlockStatement_s", 
      "LocalVariableDeclarationsAndStatement", "LocalVariableDeclaration", "VariableDeclaratorList", 
      "VariableDeclarator", "ExpressionStatement", "StatementExpression", "Assignment", 
      "LeftHandSide", "AssignmentOperator", "ExpressionName", "ArrayAccess", 
      "PrimaryNoNewArray", "Literal", };

  static Parser() {
    states[0] = new State(-20,new int[]{-1,1,-3,3,-11,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-22,new int[]{-12,5});
    states[5] = new State(new int[]{172,-31,155,-31,129,-25},new int[]{-13,6,-14,7,-15,9,-16,10,-17,11});
    states[6] = new State(-19);
    states[7] = new State(new int[]{172,-31,155,-31,129,-25},new int[]{-13,8,-14,7,-15,9,-16,10,-17,11});
    states[8] = new State(-24);
    states[9] = new State(-27);
    states[10] = new State(-28);
    states[11] = new State(new int[]{172,12,155,130},new int[]{-22,128,-23,129});
    states[12] = new State(new int[]{131,13});
    states[13] = new State(-35,new int[]{-18,14});
    states[14] = new State(-36,new int[]{-19,15});
    states[15] = new State(-37,new int[]{-20,16});
    states[16] = new State(new int[]{123,18},new int[]{-21,17});
    states[17] = new State(-29);
    states[18] = new State(-40,new int[]{-24,19});
    states[19] = new State(new int[]{125,20,171,-45,131,-45,155,-45,170,-45},new int[]{-25,21,-26,22,-27,23,-28,24});
    states[20] = new State(-38);
    states[21] = new State(-39);
    states[22] = new State(-41);
    states[23] = new State(-42);
    states[24] = new State(new int[]{171,123,131,120,155,126,170,127},new int[]{-29,25,-31,99,-32,100,-35,124,-47,49,-49,50,-50,51,-48,54,-23,125});
    states[25] = new State(new int[]{123,28,59,98},new int[]{-30,26,-51,27});
    states[26] = new State(-43);
    states[27] = new State(-78);
    states[28] = new State(new int[]{131,53,139,56,123,63,130,75,182,81,164,86,142,87,59,-73,125,-84},new int[]{-52,29,-53,31,-54,32,-56,35,-57,36,-35,38,-47,49,-49,50,-50,51,-48,54,-4,55,-5,67,-9,77,-66,78,-67,79,-68,80,-7,83,-8,88,-60,89,-61,90,-62,92,-63,93,-65,97});
    states[29] = new State(new int[]{125,30});
    states[30] = new State(-82);
    states[31] = new State(-83);
    states[32] = new State(-87,new int[]{-55,33});
    states[33] = new State(new int[]{131,53,139,56,123,63,130,75,182,81,164,86,142,87,125,-85,59,-73},new int[]{-54,34,-56,35,-57,36,-35,38,-47,49,-49,50,-50,51,-48,54,-4,55,-5,67,-9,77,-66,78,-67,79,-68,80,-7,83,-8,88,-60,89,-61,90,-62,92,-63,93,-65,97});
    states[34] = new State(-86);
    states[35] = new State(-88);
    states[36] = new State(new int[]{59,37});
    states[37] = new State(-91);
    states[38] = new State(new int[]{131,42,59,-95},new int[]{-58,39,-59,40,-44,41});
    states[39] = new State(-92);
    states[40] = new State(-94);
    states[41] = new State(-96);
    states[42] = new State(new int[]{91,-34,59,-57,44,-57,41,-57,131,-57,168,-57},new int[]{-37,43,-39,44,-46,45,-23,48});
    states[43] = new State(-70);
    states[44] = new State(-56);
    states[45] = new State(new int[]{91,46});
    states[46] = new State(new int[]{93,47});
    states[47] = new State(-69);
    states[48] = new State(-80);
    states[49] = new State(-71);
    states[50] = new State(-74);
    states[51] = new State(-34,new int[]{-39,52,-46,45,-23,48});
    states[52] = new State(-76);
    states[53] = new State(new int[]{91,-77,59,-13,61,-13,43,-13,60,-13});
    states[54] = new State(-72);
    states[55] = new State(-89);
    states[56] = new State(new int[]{40,57});
    states[57] = new State(new int[]{130,75,131,76,182,81},new int[]{-5,58,-9,77,-66,78,-67,79,-68,80});
    states[58] = new State(new int[]{41,59,61,69,43,71,60,73});
    states[59] = new State(new int[]{139,56,123,63,130,75,131,82,182,81,164,86,142,87},new int[]{-4,60,-5,67,-9,77,-66,78,-67,79,-68,80,-7,83,-8,88,-60,89,-61,90,-62,92,-63,93,-65,97});
    states[60] = new State(new int[]{153,61});
    states[61] = new State(new int[]{139,56,123,63,130,75,131,82,182,81,164,86,142,87},new int[]{-4,62,-5,67,-9,77,-66,78,-67,79,-68,80,-7,83,-8,88,-60,89,-61,90,-62,92,-63,93,-65,97});
    states[62] = new State(-3);
    states[63] = new State(-11,new int[]{-6,64});
    states[64] = new State(new int[]{125,65,139,56,123,63,130,75,131,82,182,81,164,86,142,87},new int[]{-4,66,-5,67,-9,77,-66,78,-67,79,-68,80,-7,83,-8,88,-60,89,-61,90,-62,92,-63,93,-65,97});
    states[65] = new State(-4);
    states[66] = new State(-10);
    states[67] = new State(new int[]{59,68,61,69,43,71,60,73});
    states[68] = new State(-5);
    states[69] = new State(new int[]{130,75,131,76,182,81},new int[]{-5,70,-9,77,-66,78,-67,79,-68,80});
    states[70] = new State(new int[]{61,-14,43,71,60,73,59,-14,41,-14});
    states[71] = new State(new int[]{130,75,131,76,182,81},new int[]{-5,72,-9,77,-66,78,-67,79,-68,80});
    states[72] = new State(-15);
    states[73] = new State(new int[]{130,75,131,76,182,81},new int[]{-5,74,-9,77,-66,78,-67,79,-68,80});
    states[74] = new State(new int[]{61,-16,43,71,41,-16,59,-16});
    states[75] = new State(-12);
    states[76] = new State(-13);
    states[77] = new State(-17);
    states[78] = new State(-106);
    states[79] = new State(-107);
    states[80] = new State(-108);
    states[81] = new State(-109);
    states[82] = new State(-13);
    states[83] = new State(new int[]{131,84});
    states[84] = new State(new int[]{59,85});
    states[85] = new State(-6);
    states[86] = new State(-8);
    states[87] = new State(-9);
    states[88] = new State(-7);
    states[89] = new State(-99);
    states[90] = new State(new int[]{59,91});
    states[91] = new State(-100);
    states[92] = new State(-101);
    states[93] = new State(new int[]{61,96},new int[]{-64,94});
    states[94] = new State(new int[]{130,75,131,76,182,81},new int[]{-5,95,-9,77,-66,78,-67,79,-68,80});
    states[95] = new State(new int[]{61,69,43,71,60,73,59,-102});
    states[96] = new State(-105);
    states[97] = new State(-103);
    states[98] = new State(-79);
    states[99] = new State(-44);
    states[100] = new State(new int[]{131,104},new int[]{-33,101});
    states[101] = new State(-18,new int[]{-34,102,-10,103});
    states[102] = new State(-49);
    states[103] = new State(-52);
    states[104] = new State(new int[]{40,105});
    states[105] = new State(new int[]{131,-66,168,-66,41,-55},new int[]{-36,106,-38,109,-40,110,-41,111,-43,116});
    states[106] = new State(new int[]{41,107});
    states[107] = new State(new int[]{91,-34,123,-57,59,-57},new int[]{-37,108,-39,44,-46,45,-23,48});
    states[108] = new State(-53);
    states[109] = new State(-54);
    states[110] = new State(-58);
    states[111] = new State(new int[]{44,113,41,-63},new int[]{-42,112});
    states[112] = new State(-60);
    states[113] = new State(new int[]{44,113,131,-63,168,-63},new int[]{-42,114});
    states[114] = new State(-66,new int[]{-41,115,-43,116});
    states[115] = new State(-62);
    states[116] = new State(new int[]{131,120,168,122},new int[]{-35,117,-45,119,-47,49,-49,50,-50,51,-48,54,-23,121});
    states[117] = new State(new int[]{131,42},new int[]{-44,118});
    states[118] = new State(-64);
    states[119] = new State(-65);
    states[120] = new State(-77);
    states[121] = new State(-67);
    states[122] = new State(-68);
    states[123] = new State(-50);
    states[124] = new State(-51);
    states[125] = new State(-46);
    states[126] = new State(-47);
    states[127] = new State(-48);
    states[128] = new State(-30);
    states[129] = new State(-32);
    states[130] = new State(-33);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,129});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-4, new int[]{139,40,-5,41,-4,153,-4});
    rules[4] = new Rule(-4, new int[]{123,-6,125});
    rules[5] = new Rule(-4, new int[]{-5,59});
    rules[6] = new Rule(-4, new int[]{-7,131,59});
    rules[7] = new Rule(-4, new int[]{-8});
    rules[8] = new Rule(-7, new int[]{164});
    rules[9] = new Rule(-7, new int[]{142});
    rules[10] = new Rule(-6, new int[]{-6,-4});
    rules[11] = new Rule(-6, new int[]{});
    rules[12] = new Rule(-5, new int[]{130});
    rules[13] = new Rule(-5, new int[]{131});
    rules[14] = new Rule(-5, new int[]{-5,61,-5});
    rules[15] = new Rule(-5, new int[]{-5,43,-5});
    rules[16] = new Rule(-5, new int[]{-5,60,-5});
    rules[17] = new Rule(-5, new int[]{-9});
    rules[18] = new Rule(-10, new int[]{});
    rules[19] = new Rule(-3, new int[]{-11,-12,-13});
    rules[20] = new Rule(-11, new int[]{});
    rules[21] = new Rule(-11, new int[]{});
    rules[22] = new Rule(-12, new int[]{});
    rules[23] = new Rule(-12, new int[]{});
    rules[24] = new Rule(-13, new int[]{-14,-13});
    rules[25] = new Rule(-13, new int[]{});
    rules[26] = new Rule(-13, new int[]{});
    rules[27] = new Rule(-14, new int[]{-15});
    rules[28] = new Rule(-15, new int[]{-16});
    rules[29] = new Rule(-16, new int[]{-17,172,131,-18,-19,-20,-21});
    rules[30] = new Rule(-17, new int[]{-17,-22});
    rules[31] = new Rule(-17, new int[]{});
    rules[32] = new Rule(-22, new int[]{-23});
    rules[33] = new Rule(-22, new int[]{155});
    rules[34] = new Rule(-23, new int[]{});
    rules[35] = new Rule(-18, new int[]{});
    rules[36] = new Rule(-19, new int[]{});
    rules[37] = new Rule(-20, new int[]{});
    rules[38] = new Rule(-21, new int[]{123,-24,125});
    rules[39] = new Rule(-24, new int[]{-24,-25});
    rules[40] = new Rule(-24, new int[]{});
    rules[41] = new Rule(-25, new int[]{-26});
    rules[42] = new Rule(-26, new int[]{-27});
    rules[43] = new Rule(-27, new int[]{-28,-29,-30});
    rules[44] = new Rule(-28, new int[]{-28,-31});
    rules[45] = new Rule(-28, new int[]{});
    rules[46] = new Rule(-31, new int[]{-23});
    rules[47] = new Rule(-31, new int[]{155});
    rules[48] = new Rule(-31, new int[]{170});
    rules[49] = new Rule(-29, new int[]{-32,-33,-34});
    rules[50] = new Rule(-32, new int[]{171});
    rules[51] = new Rule(-32, new int[]{-35});
    rules[52] = new Rule(-34, new int[]{-10});
    rules[53] = new Rule(-33, new int[]{131,40,-36,41,-37});
    rules[54] = new Rule(-36, new int[]{-38});
    rules[55] = new Rule(-36, new int[]{});
    rules[56] = new Rule(-37, new int[]{-39});
    rules[57] = new Rule(-37, new int[]{});
    rules[58] = new Rule(-38, new int[]{-40});
    rules[59] = new Rule(-38, new int[]{});
    rules[60] = new Rule(-40, new int[]{-41,-42});
    rules[61] = new Rule(-40, new int[]{});
    rules[62] = new Rule(-42, new int[]{44,-42,-41});
    rules[63] = new Rule(-42, new int[]{});
    rules[64] = new Rule(-41, new int[]{-43,-35,-44});
    rules[65] = new Rule(-43, new int[]{-43,-45});
    rules[66] = new Rule(-43, new int[]{});
    rules[67] = new Rule(-45, new int[]{-23});
    rules[68] = new Rule(-45, new int[]{168});
    rules[69] = new Rule(-39, new int[]{-46,91,93});
    rules[70] = new Rule(-44, new int[]{131,-37});
    rules[71] = new Rule(-35, new int[]{-47});
    rules[72] = new Rule(-35, new int[]{-48});
    rules[73] = new Rule(-48, new int[]{});
    rules[74] = new Rule(-47, new int[]{-49});
    rules[75] = new Rule(-47, new int[]{});
    rules[76] = new Rule(-49, new int[]{-50,-39});
    rules[77] = new Rule(-50, new int[]{131});
    rules[78] = new Rule(-30, new int[]{-51});
    rules[79] = new Rule(-30, new int[]{59});
    rules[80] = new Rule(-46, new int[]{-23});
    rules[81] = new Rule(-46, new int[]{});
    rules[82] = new Rule(-51, new int[]{123,-52,125});
    rules[83] = new Rule(-52, new int[]{-53});
    rules[84] = new Rule(-52, new int[]{});
    rules[85] = new Rule(-53, new int[]{-54,-55});
    rules[86] = new Rule(-55, new int[]{-55,-54});
    rules[87] = new Rule(-55, new int[]{});
    rules[88] = new Rule(-54, new int[]{-56});
    rules[89] = new Rule(-54, new int[]{-4});
    rules[90] = new Rule(-54, new int[]{});
    rules[91] = new Rule(-56, new int[]{-57,59});
    rules[92] = new Rule(-57, new int[]{-35,-58});
    rules[93] = new Rule(-57, new int[]{});
    rules[94] = new Rule(-58, new int[]{-59});
    rules[95] = new Rule(-58, new int[]{});
    rules[96] = new Rule(-59, new int[]{-44});
    rules[97] = new Rule(-59, new int[]{});
    rules[98] = new Rule(-44, new int[]{131,-37});
    rules[99] = new Rule(-8, new int[]{-60});
    rules[100] = new Rule(-60, new int[]{-61,59});
    rules[101] = new Rule(-61, new int[]{-62});
    rules[102] = new Rule(-62, new int[]{-63,-64,-5});
    rules[103] = new Rule(-63, new int[]{-65});
    rules[104] = new Rule(-65, new int[]{131});
    rules[105] = new Rule(-64, new int[]{61});
    rules[106] = new Rule(-9, new int[]{-66});
    rules[107] = new Rule(-66, new int[]{-67});
    rules[108] = new Rule(-67, new int[]{-68});
    rules[109] = new Rule(-68, new int[]{182});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 366 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
