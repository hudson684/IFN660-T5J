// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  VDI-VL17-002
// DateTime: 19/05/2017 4:25:45 PM
// UserName: n9648500
// Input file <parser.y - 19/05/2017 3:34:53 PM>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Collections;
using IFN660_Java_ECMAScript.AST;

namespace IFN660_Java_ECMAScript
{
public enum Tokens {error=128,EOF=129,NUMBER=130,IDENTIFIER=131,ABSTRACT=132,
    CONTINUE=133,FOR=134,NEW=135,SWITCH=136,ASSERT=137,DEFAULT=138,
    IF=139,PACKAGE=140,SYNCHRONIZED=141,BOOLEAN=142,DO=143,GOTO=144,
    PRIVATE=145,THIS=146,BREAK=147,DOUBLE=148,IMPLEMENTS=149,PROTECTED=150,
    THROW=151,BYTE=152,ELSE=153,IMPORT=154,PUBLIC=155,THROWS=156,
    CASE=157,ENUM=158,INSTANCEOF=159,RETURN=160,TRANSIENT=161,CATCH=162,
    EXTENDS=163,INT=164,SHORT=165,TRY=166,CHAR=167,FINAL=168,
    INTERFACE=169,STATIC=170,VOID=171,CLASS=172,FINALLY=173,LONG=174,
    STRICTFP=175,VOLATILE=176,CONST=177,FLOAT=178,NATIVE=179,SUPER=180,
    WHILE=181,IntegerLiteral=182,FloatingPointLiteral=183,BooleanLiteral=184,CharacterLiteral=185,StringLiteral=186,
    NullLiteral=187,ELLIPSIS=188,DOUBLE_COLON=189,EQUAL=190,GREATER_OR_EQUAL=191,LESS_THAN_OR_EQUAL=192,
    NOT_EQUAL=193,ARROW=194,LOGICAL_AND=195,LOGICAL_OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,SIGNED_RIGHT_SHIFT=200,UNSIGNED_RIGHT_SHIFT=201,ADDITION_ASSIGNMENT=202,SUBTRACTION_ASSIGNMENT=203,MULTIPLICATION_ASSIGNMENT=204,
    DIVISION_ASSIGNMENT=205,MODULUS_ASSIGNMENT=206,BITWISE_AND_ASSIGNMENT=207,BITWISE_OR_ASSIGNMENT=208,BITWISE_XOR_ASSIGNMENT=209,LEFT_SHIFT_ASSIGNMENT=210,
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=211,SIGNED_RIGHT_SHIFT_ASSIGNMENT=212};

public struct ValueType
#line 11 "parser.y"
{
    public long num;
	public double floatnum;
	public bool boolval;
	public char charval;
    public string name;
	public Statement stmt;
	public List<Statement> stmts;
	public Expression expr;
	public AST.Type type;
	public Modifier modf;
	public List<Modifier> modfs;
	public ArrayList arrlst;
	public List<string> strlst;
	public List<Expression> exprlst;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 19/05/2017 3:34:53 PM
#line 7 "parser.y"
public static Statement root;
#line default
  // End verbatim content from parser.y - 19/05/2017 3:34:53 PM

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[206];
  private static State[] states = new State[282];
  private static string[] nonTerms = new string[] {
      "Literal", "StatementExpression", "Assignment", "LeftHandSide", "ExpressionName", 
      "LocalVariableDeclaration", "TypeParameters_opt", "Superclass_opt", "Superinterfaces_opt", 
      "AssignmentExpression", "PrimaryNoNewArray", "Expression", "LambdaExpression", 
      "LambdaBody", "ConditionalExpression", "ConditionalOrExpression", "ConditionalAndExpression", 
      "InclusiveOrExpression", "ExclusiveOrExpression", "AndExpression", "EqualityExpression", 
      "RelationalExpression", "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", 
      "UnaryExpression", "PostfixExpression", "Primary", "PreIncrementExpression", 
      "PreDecrementExpression", "UnaryExpressionNotPlusMinus", "CastExpression", 
      "PostIncrementExpression", "PostDecrementExpression", "Statement", "CompilationUnit", 
      "TypeDeclaration", "ClassDeclaration", "NormalClassDeclaration", "ClassBodyDeclaration", 
      "ExpressionStatement", "StatementWithoutTrailingSubstatement", "LocalVariableDeclarationStatement", 
      "BlockStatement", "Throws_opt", "ClassMemberDeclaration", "MethodDeclaration", 
      "PackageDeclaration_opt", "Block", "MethodBody", "FormalParameter", "StatementNoShortIf", 
      "IfThenElseStatementNoShortIf", "IfThenStatement", "IfThenElseStatement", 
      "WhileStatement", "TryStatement", "Catches", "Catches_opt", "CatchClause", 
      "Finally", "DoStatement", "ThrowStatement", "SynchronizedStatement", "SwitchStatement", 
      "AssertStatement", "LabeledStatement", "BreakStatement", "ContinueStatement", 
      "ReturnStatement", "TypeDeclarations", "ClassBody", "ClassBodyDeclarations", 
      "BlockStatements", "BlockStatements_Opt", "ImportDeclarations", "FormalParameters", 
      "FormalParameterList", "FormalParameterList_Opt", "Result", "FloatingPointType", 
      "IntegralType", "NumericType", "UnannType", "UnannPrimitiveType", "UnannReferenceType", 
      "UnannArrayType", "UnannTypeVariable", "ReferenceType", "PrimitiveType", 
      "ClassModifier", "MethodModifier", "VariableModifier", "ClassModifiers", 
      "MethodModifiers", "VariableModifiers", "VariableDeclaratorId", "VariableDeclarator", 
      "MethodHeader", "MethodDeclarator", "VariableDeclaratorList", "Identifier_opt", 
      "Expression_opt", "Program", "$accept", "Empty", "Dims_Opt", "Dims", "TypeVariable", 
      "AssignmentOperator", "LambdaParameters", "AdditionalBounds", "AdditionalBound", 
      "ConstantExpression", };

  static Parser() {
    states[0] = new State(-5,new int[]{-104,1,-36,3,-48,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-6,new int[]{-76,5});
    states[5] = new State(-8,new int[]{-71,6});
    states[6] = new State(new int[]{129,-4,172,-13,155,-13,150,-13,145,-13,132,-13,170,-13,168,-13,175,-13},new int[]{-37,7,-38,8,-39,9,-94,10});
    states[7] = new State(-7);
    states[8] = new State(-9);
    states[9] = new State(-10);
    states[10] = new State(new int[]{172,11,155,275,150,276,145,277,132,278,170,279,168,280,175,281},new int[]{-91,274});
    states[11] = new State(new int[]{131,12});
    states[12] = new State(-21,new int[]{-7,13});
    states[13] = new State(-22,new int[]{-8,14});
    states[14] = new State(-23,new int[]{-9,15});
    states[15] = new State(new int[]{123,17},new int[]{-72,16});
    states[16] = new State(-11);
    states[17] = new State(-26,new int[]{-73,18});
    states[18] = new State(new int[]{125,19,171,-31,131,-31,152,-31,165,-31,164,-31,174,-31,167,-31,178,-31,148,-31,142,-31,155,-31,170,-31},new int[]{-40,20,-46,21,-47,22,-95,23});
    states[19] = new State(-24);
    states[20] = new State(-25);
    states[21] = new State(-27);
    states[22] = new State(-28);
    states[23] = new State(new int[]{171,270,131,267,152,128,165,129,164,130,174,131,167,132,178,134,148,135,142,245,155,272,170,273},new int[]{-99,24,-92,249,-80,250,-84,271,-86,46,-87,47,-88,48,-85,243,-83,244,-82,127,-81,133});
    states[24] = new State(new int[]{123,27,59,248},new int[]{-50,25,-49,26});
    states[25] = new State(-29);
    states[26] = new State(-71);
    states[27] = new State(new int[]{131,50,152,128,165,129,164,130,174,131,167,132,178,134,148,135,142,245,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228,125,-75},new int[]{-75,28,-74,30,-44,247,-43,32,-6,33,-84,35,-86,46,-87,47,-88,48,-85,243,-83,244,-82,127,-81,133,-35,246,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[28] = new State(new int[]{125,29});
    states[29] = new State(-73);
    states[30] = new State(new int[]{131,50,152,128,165,129,164,130,174,131,167,132,178,134,148,135,142,245,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228,125,-74},new int[]{-44,31,-43,32,-6,33,-84,35,-86,46,-87,47,-88,48,-85,243,-83,244,-82,127,-81,133,-35,246,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[31] = new State(-77);
    states[32] = new State(-78);
    states[33] = new State(new int[]{59,34});
    states[34] = new State(-80);
    states[35] = new State(new int[]{131,40},new int[]{-101,36,-98,45,-97,39});
    states[36] = new State(new int[]{44,37,59,-81});
    states[37] = new State(new int[]{131,40},new int[]{-98,38,-97,39});
    states[38] = new State(-83);
    states[39] = new State(-84);
    states[40] = new State(new int[]{91,43,44,-49,59,-49,41,-49},new int[]{-107,41,-108,42});
    states[41] = new State(-85);
    states[42] = new State(-48);
    states[43] = new State(new int[]{93,44});
    states[44] = new State(-50);
    states[45] = new State(-82);
    states[46] = new State(-51);
    states[47] = new State(-68);
    states[48] = new State(new int[]{91,43},new int[]{-108,49});
    states[49] = new State(-69);
    states[50] = new State(new int[]{58,51,91,-70,61,-136});
    states[51] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228},new int[]{-35,52,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[52] = new State(-126);
    states[53] = new State(-86);
    states[54] = new State(-93);
    states[55] = new State(new int[]{59,56});
    states[56] = new State(-109);
    states[57] = new State(-110);
    states[58] = new State(new int[]{61,169},new int[]{-110,59});
    states[59] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,60,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[60] = new State(-134);
    states[61] = new State(-148);
    states[62] = new State(new int[]{194,63});
    states[63] = new State(-152,new int[]{-14,64});
    states[64] = new State(-150);
    states[65] = new State(-149);
    states[66] = new State(-138);
    states[67] = new State(new int[]{61,-135,197,-196,198,-196,42,-196,47,-196,37,-196,43,-196,45,-196,199,-196,200,-196,201,-196,60,-196,62,-196,192,-196,191,-196,159,-196,190,-196,193,-196,38,-196,94,-196,124,-196,195,-196,196,-196,59,-196,41,-196,58,-196});
    states[68] = new State(-136);
    states[69] = new State(-139);
    states[70] = new State(new int[]{196,71,59,-153,41,-153,58,-153});
    states[71] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-17,72,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[72] = new State(new int[]{195,73,196,-155,59,-155,41,-155,58,-155});
    states[73] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-18,74,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[74] = new State(new int[]{124,75,195,-157,196,-157,59,-157,41,-157,58,-157});
    states[75] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-19,76,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[76] = new State(new int[]{94,77,124,-159,195,-159,196,-159,59,-159,41,-159,58,-159});
    states[77] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-20,78,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[78] = new State(new int[]{38,79,94,-161,124,-161,195,-161,196,-161,59,-161,41,-161,58,-161});
    states[79] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-21,80,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[80] = new State(new int[]{190,81,193,161,38,-163,94,-163,124,-163,195,-163,196,-163,59,-163,41,-163,58,-163});
    states[81] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-22,82,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[82] = new State(new int[]{60,83,62,150,192,152,191,154,159,156,190,-165,193,-165,38,-165,94,-165,124,-165,195,-165,196,-165,59,-165,41,-165,58,-165});
    states[83] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-23,84,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[84] = new State(new int[]{199,85,200,145,201,147,60,-168,62,-168,192,-168,191,-168,159,-168,190,-168,193,-168,38,-168,94,-168,124,-168,195,-168,196,-168,59,-168,41,-168,58,-168});
    states[85] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-24,86,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[86] = new State(new int[]{43,87,45,142,199,-174,200,-174,201,-174,60,-174,62,-174,192,-174,191,-174,159,-174,190,-174,193,-174,38,-174,94,-174,124,-174,195,-174,196,-174,59,-174,41,-174,58,-174});
    states[87] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-25,88,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[88] = new State(new int[]{42,89,47,137,37,139,43,-178,45,-178,199,-178,200,-178,201,-178,60,-178,62,-178,192,-178,191,-178,159,-178,190,-178,193,-178,38,-178,94,-178,124,-178,195,-178,196,-178,59,-178,41,-178,58,-178});
    states[89] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,90,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[90] = new State(-181);
    states[91] = new State(-184);
    states[92] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,93,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[93] = new State(-189);
    states[94] = new State(-185);
    states[95] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,96,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[96] = new State(-190);
    states[97] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,98,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[98] = new State(-186);
    states[99] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,100,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[100] = new State(-187);
    states[101] = new State(-188);
    states[102] = new State(new int[]{197,103,198,104,42,-191,47,-191,37,-191,43,-191,45,-191,199,-191,200,-191,201,-191,60,-191,62,-191,192,-191,191,-191,159,-191,190,-191,193,-191,38,-191,94,-191,124,-191,195,-191,196,-191,59,-191,41,-191,58,-191});
    states[103] = new State(-199);
    states[104] = new State(-200);
    states[105] = new State(-195);
    states[106] = new State(-140);
    states[107] = new State(-141);
    states[108] = new State(-142);
    states[109] = new State(-143);
    states[110] = new State(-144);
    states[111] = new State(-145);
    states[112] = new State(-146);
    states[113] = new State(-147);
    states[114] = new State(-196);
    states[115] = new State(-197);
    states[116] = new State(-198);
    states[117] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,118,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[118] = new State(-192);
    states[119] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,120,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[120] = new State(-193);
    states[121] = new State(-194);
    states[122] = new State(new int[]{152,128,165,129,164,130,174,131,167,132,178,134,148,135,142,136},new int[]{-90,123,-83,126,-82,127,-81,133});
    states[123] = new State(new int[]{41,124});
    states[124] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,125,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[125] = new State(-201);
    states[126] = new State(-55);
    states[127] = new State(-59);
    states[128] = new State(-61);
    states[129] = new State(-62);
    states[130] = new State(-63);
    states[131] = new State(-64);
    states[132] = new State(-65);
    states[133] = new State(-60);
    states[134] = new State(-66);
    states[135] = new State(-67);
    states[136] = new State(-56);
    states[137] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,138,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[138] = new State(-182);
    states[139] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-26,140,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[140] = new State(-183);
    states[141] = new State(-180);
    states[142] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-25,143,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[143] = new State(new int[]{42,89,47,137,37,139,43,-179,45,-179,199,-179,200,-179,201,-179,60,-179,62,-179,192,-179,191,-179,159,-179,190,-179,193,-179,38,-179,94,-179,124,-179,195,-179,196,-179,59,-179,41,-179,58,-179});
    states[144] = new State(new int[]{42,89,47,137,37,139,43,-177,45,-177,199,-177,200,-177,201,-177,60,-177,62,-177,192,-177,191,-177,159,-177,190,-177,193,-177,38,-177,94,-177,124,-177,195,-177,196,-177,59,-177,41,-177,58,-177});
    states[145] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-24,146,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[146] = new State(new int[]{43,87,45,142,199,-175,200,-175,201,-175,60,-175,62,-175,192,-175,191,-175,159,-175,190,-175,193,-175,38,-175,94,-175,124,-175,195,-175,196,-175,59,-175,41,-175,58,-175});
    states[147] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-24,148,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[148] = new State(new int[]{43,87,45,142,199,-176,200,-176,201,-176,60,-176,62,-176,192,-176,191,-176,159,-176,190,-176,193,-176,38,-176,94,-176,124,-176,195,-176,196,-176,59,-176,41,-176,58,-176});
    states[149] = new State(new int[]{43,87,45,142,199,-173,200,-173,201,-173,60,-173,62,-173,192,-173,191,-173,159,-173,190,-173,193,-173,38,-173,94,-173,124,-173,195,-173,196,-173,59,-173,41,-173,58,-173});
    states[150] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-23,151,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[151] = new State(new int[]{199,85,200,145,201,147,60,-169,62,-169,192,-169,191,-169,159,-169,190,-169,193,-169,38,-169,94,-169,124,-169,195,-169,196,-169,59,-169,41,-169,58,-169});
    states[152] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-23,153,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[153] = new State(new int[]{199,85,200,145,201,147,60,-170,62,-170,192,-170,191,-170,159,-170,190,-170,193,-170,38,-170,94,-170,124,-170,195,-170,196,-170,59,-170,41,-170,58,-170});
    states[154] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-23,155,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[155] = new State(new int[]{199,85,200,145,201,147,60,-171,62,-171,192,-171,191,-171,159,-171,190,-171,193,-171,38,-171,94,-171,124,-171,195,-171,196,-171,59,-171,41,-171,58,-171});
    states[156] = new State(new int[]{131,159},new int[]{-89,157,-109,158});
    states[157] = new State(-172);
    states[158] = new State(-57);
    states[159] = new State(-58);
    states[160] = new State(new int[]{199,85,200,145,201,147,60,-167,62,-167,192,-167,191,-167,159,-167,190,-167,193,-167,38,-167,94,-167,124,-167,195,-167,196,-167,59,-167,41,-167,58,-167});
    states[161] = new State(new int[]{197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,131,68,126,117,33,119,40,122},new int[]{-22,162,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-5,114,-33,115,-34,116,-32,121});
    states[162] = new State(new int[]{60,83,62,150,192,152,191,154,159,156,190,-166,193,-166,38,-166,94,-166,124,-166,195,-166,196,-166,59,-166,41,-166,58,-166});
    states[163] = new State(new int[]{60,83,62,150,192,152,191,154,159,156,190,-164,193,-164,38,-164,94,-164,124,-164,195,-164,196,-164,59,-164,41,-164,58,-164});
    states[164] = new State(new int[]{190,81,193,161,38,-162,94,-162,124,-162,195,-162,196,-162,59,-162,41,-162,58,-162});
    states[165] = new State(new int[]{38,79,94,-160,124,-160,195,-160,196,-160,59,-160,41,-160,58,-160});
    states[166] = new State(new int[]{94,77,124,-158,195,-158,196,-158,59,-158,41,-158,58,-158});
    states[167] = new State(new int[]{124,75,195,-156,196,-156,59,-156,41,-156,58,-156});
    states[168] = new State(new int[]{195,73,196,-154,59,-154,41,-154,58,-154});
    states[169] = new State(-137);
    states[170] = new State(-135);
    states[171] = new State(new int[]{58,51,61,-136});
    states[172] = new State(-94);
    states[173] = new State(-95);
    states[174] = new State(new int[]{131,177,59,-129},new int[]{-102,175});
    states[175] = new State(new int[]{59,176});
    states[176] = new State(-127);
    states[177] = new State(-128);
    states[178] = new State(-96);
    states[179] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228},new int[]{-35,180,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[180] = new State(new int[]{181,181});
    states[181] = new State(new int[]{40,182});
    states[182] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,183,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[183] = new State(new int[]{41,184});
    states[184] = new State(new int[]{59,185});
    states[185] = new State(-106);
    states[186] = new State(-97);
    states[187] = new State(new int[]{131,177,59,-129},new int[]{-102,188});
    states[188] = new State(new int[]{59,189});
    states[189] = new State(-130);
    states[190] = new State(-98);
    states[191] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151,59,-133},new int[]{-103,192,-12,194,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[192] = new State(new int[]{59,193});
    states[193] = new State(-131);
    states[194] = new State(-132);
    states[195] = new State(-99);
    states[196] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,197,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[197] = new State(new int[]{59,198});
    states[198] = new State(-107);
    states[199] = new State(-100);
    states[200] = new State(new int[]{40,201});
    states[201] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,202,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[202] = new State(new int[]{41,203});
    states[203] = new State(new int[]{123,27},new int[]{-49,204});
    states[204] = new State(-108);
    states[205] = new State(-101);
    states[206] = new State(new int[]{40,207});
    states[207] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,208,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[208] = new State(new int[]{41,209});
    states[209] = new State(-105);
    states[210] = new State(-102);
    states[211] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,212,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[212] = new State(new int[]{59,213,58,214});
    states[213] = new State(-103);
    states[214] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,215,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[215] = new State(new int[]{59,216});
    states[216] = new State(-104);
    states[217] = new State(-87);
    states[218] = new State(new int[]{40,219});
    states[219] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,220,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[220] = new State(new int[]{41,221});
    states[221] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,235,181,228},new int[]{-35,222,-52,223,-42,234,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233,-53,242});
    states[222] = new State(-111);
    states[223] = new State(new int[]{153,224});
    states[224] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228},new int[]{-35,225,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[225] = new State(-112);
    states[226] = new State(-88);
    states[227] = new State(-89);
    states[228] = new State(new int[]{40,229});
    states[229] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,230,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[230] = new State(new int[]{41,231});
    states[231] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,218,181,228},new int[]{-35,232,-42,53,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233});
    states[232] = new State(-114);
    states[233] = new State(-90);
    states[234] = new State(new int[]{131,-86,152,-86,165,-86,164,-86,174,-86,167,-86,178,-86,148,-86,142,-86,123,-86,147,-86,143,-86,133,-86,160,-86,151,-86,141,-86,136,-86,137,-86,139,-86,181,-86,125,-86,153,-91});
    states[235] = new State(new int[]{40,236});
    states[236] = new State(new int[]{131,68,197,92,198,95,43,97,45,99,182,108,183,109,184,110,185,111,186,112,187,113,126,117,33,119,40,122,194,-151},new int[]{-12,237,-13,61,-111,62,-10,65,-3,66,-4,58,-5,67,-15,69,-16,70,-17,168,-18,167,-19,166,-20,165,-21,164,-22,163,-23,160,-24,149,-25,144,-26,141,-29,91,-30,94,-31,101,-27,102,-28,105,-11,106,-1,107,-33,115,-34,116,-32,121});
    states[237] = new State(new int[]{41,238});
    states[238] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,235,181,228},new int[]{-35,222,-52,239,-42,234,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233,-53,242});
    states[239] = new State(new int[]{153,240});
    states[240] = new State(new int[]{131,171,123,27,147,174,143,179,133,187,160,191,151,196,141,200,136,206,137,211,139,235,181,228},new int[]{-35,225,-52,241,-42,234,-41,54,-2,55,-3,57,-4,58,-5,170,-49,172,-68,173,-62,178,-69,186,-70,190,-63,195,-64,199,-65,205,-66,210,-54,217,-55,226,-56,227,-67,233,-53,242});
    states[241] = new State(-113);
    states[242] = new State(-92);
    states[243] = new State(-52);
    states[244] = new State(-53);
    states[245] = new State(-54);
    states[246] = new State(-79);
    states[247] = new State(-76);
    states[248] = new State(-72);
    states[249] = new State(-30);
    states[250] = new State(new int[]{131,254},new int[]{-100,251});
    states[251] = new State(-3,new int[]{-45,252,-106,253});
    states[252] = new State(-34);
    states[253] = new State(-37);
    states[254] = new State(new int[]{40,255});
    states[255] = new State(new int[]{131,-46,152,-46,165,-46,164,-46,174,-46,167,-46,178,-46,148,-46,142,-46,168,-46,41,-40},new int[]{-79,256,-78,259,-77,260,-51,269,-96,263});
    states[256] = new State(new int[]{41,257});
    states[257] = new State(new int[]{91,43,123,-49,59,-49},new int[]{-107,258,-108,42});
    states[258] = new State(-38);
    states[259] = new State(-39);
    states[260] = new State(new int[]{44,261,41,-41});
    states[261] = new State(-46,new int[]{-51,262,-96,263});
    states[262] = new State(-43);
    states[263] = new State(new int[]{131,267,152,128,165,129,164,130,174,131,167,132,178,134,148,135,142,245,168,268},new int[]{-84,264,-93,266,-86,46,-87,47,-88,48,-85,243,-83,244,-82,127,-81,133});
    states[264] = new State(new int[]{131,40},new int[]{-97,265});
    states[265] = new State(-44);
    states[266] = new State(-45);
    states[267] = new State(-70);
    states[268] = new State(-47);
    states[269] = new State(-42);
    states[270] = new State(-35);
    states[271] = new State(-36);
    states[272] = new State(-32);
    states[273] = new State(-33);
    states[274] = new State(-12);
    states[275] = new State(-14);
    states[276] = new State(-15);
    states[277] = new State(-16);
    states[278] = new State(-17);
    states[279] = new State(-18);
    states[280] = new State(-19);
    states[281] = new State(-20);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-105, new int[]{-104,129});
    rules[2] = new Rule(-104, new int[]{-36});
    rules[3] = new Rule(-106, new int[]{});
    rules[4] = new Rule(-36, new int[]{-48,-76,-71});
    rules[5] = new Rule(-48, new int[]{});
    rules[6] = new Rule(-76, new int[]{});
    rules[7] = new Rule(-71, new int[]{-71,-37});
    rules[8] = new Rule(-71, new int[]{});
    rules[9] = new Rule(-37, new int[]{-38});
    rules[10] = new Rule(-38, new int[]{-39});
    rules[11] = new Rule(-39, new int[]{-94,172,131,-7,-8,-9,-72});
    rules[12] = new Rule(-94, new int[]{-94,-91});
    rules[13] = new Rule(-94, new int[]{});
    rules[14] = new Rule(-91, new int[]{155});
    rules[15] = new Rule(-91, new int[]{150});
    rules[16] = new Rule(-91, new int[]{145});
    rules[17] = new Rule(-91, new int[]{132});
    rules[18] = new Rule(-91, new int[]{170});
    rules[19] = new Rule(-91, new int[]{168});
    rules[20] = new Rule(-91, new int[]{175});
    rules[21] = new Rule(-7, new int[]{});
    rules[22] = new Rule(-8, new int[]{});
    rules[23] = new Rule(-9, new int[]{});
    rules[24] = new Rule(-72, new int[]{123,-73,125});
    rules[25] = new Rule(-73, new int[]{-73,-40});
    rules[26] = new Rule(-73, new int[]{});
    rules[27] = new Rule(-40, new int[]{-46});
    rules[28] = new Rule(-46, new int[]{-47});
    rules[29] = new Rule(-47, new int[]{-95,-99,-50});
    rules[30] = new Rule(-95, new int[]{-95,-92});
    rules[31] = new Rule(-95, new int[]{});
    rules[32] = new Rule(-92, new int[]{155});
    rules[33] = new Rule(-92, new int[]{170});
    rules[34] = new Rule(-99, new int[]{-80,-100,-45});
    rules[35] = new Rule(-80, new int[]{171});
    rules[36] = new Rule(-80, new int[]{-84});
    rules[37] = new Rule(-45, new int[]{-106});
    rules[38] = new Rule(-100, new int[]{131,40,-79,41,-107});
    rules[39] = new Rule(-79, new int[]{-78});
    rules[40] = new Rule(-79, new int[]{});
    rules[41] = new Rule(-78, new int[]{-77});
    rules[42] = new Rule(-77, new int[]{-51});
    rules[43] = new Rule(-77, new int[]{-77,44,-51});
    rules[44] = new Rule(-51, new int[]{-96,-84,-97});
    rules[45] = new Rule(-96, new int[]{-96,-93});
    rules[46] = new Rule(-96, new int[]{});
    rules[47] = new Rule(-93, new int[]{168});
    rules[48] = new Rule(-107, new int[]{-108});
    rules[49] = new Rule(-107, new int[]{});
    rules[50] = new Rule(-108, new int[]{91,93});
    rules[51] = new Rule(-84, new int[]{-86});
    rules[52] = new Rule(-84, new int[]{-85});
    rules[53] = new Rule(-85, new int[]{-83});
    rules[54] = new Rule(-85, new int[]{142});
    rules[55] = new Rule(-90, new int[]{-83});
    rules[56] = new Rule(-90, new int[]{142});
    rules[57] = new Rule(-89, new int[]{-109});
    rules[58] = new Rule(-109, new int[]{131});
    rules[59] = new Rule(-83, new int[]{-82});
    rules[60] = new Rule(-83, new int[]{-81});
    rules[61] = new Rule(-82, new int[]{152});
    rules[62] = new Rule(-82, new int[]{165});
    rules[63] = new Rule(-82, new int[]{164});
    rules[64] = new Rule(-82, new int[]{174});
    rules[65] = new Rule(-82, new int[]{167});
    rules[66] = new Rule(-81, new int[]{178});
    rules[67] = new Rule(-81, new int[]{148});
    rules[68] = new Rule(-86, new int[]{-87});
    rules[69] = new Rule(-87, new int[]{-88,-108});
    rules[70] = new Rule(-88, new int[]{131});
    rules[71] = new Rule(-50, new int[]{-49});
    rules[72] = new Rule(-50, new int[]{59});
    rules[73] = new Rule(-49, new int[]{123,-75,125});
    rules[74] = new Rule(-75, new int[]{-74});
    rules[75] = new Rule(-75, new int[]{});
    rules[76] = new Rule(-74, new int[]{-44});
    rules[77] = new Rule(-74, new int[]{-74,-44});
    rules[78] = new Rule(-44, new int[]{-43});
    rules[79] = new Rule(-44, new int[]{-35});
    rules[80] = new Rule(-43, new int[]{-6,59});
    rules[81] = new Rule(-6, new int[]{-84,-101});
    rules[82] = new Rule(-101, new int[]{-98});
    rules[83] = new Rule(-101, new int[]{-101,44,-98});
    rules[84] = new Rule(-98, new int[]{-97});
    rules[85] = new Rule(-97, new int[]{131,-107});
    rules[86] = new Rule(-35, new int[]{-42});
    rules[87] = new Rule(-35, new int[]{-54});
    rules[88] = new Rule(-35, new int[]{-55});
    rules[89] = new Rule(-35, new int[]{-56});
    rules[90] = new Rule(-35, new int[]{-67});
    rules[91] = new Rule(-52, new int[]{-42});
    rules[92] = new Rule(-52, new int[]{-53});
    rules[93] = new Rule(-42, new int[]{-41});
    rules[94] = new Rule(-42, new int[]{-49});
    rules[95] = new Rule(-42, new int[]{-68});
    rules[96] = new Rule(-42, new int[]{-62});
    rules[97] = new Rule(-42, new int[]{-69});
    rules[98] = new Rule(-42, new int[]{-70});
    rules[99] = new Rule(-42, new int[]{-63});
    rules[100] = new Rule(-42, new int[]{-64});
    rules[101] = new Rule(-42, new int[]{-65});
    rules[102] = new Rule(-42, new int[]{-66});
    rules[103] = new Rule(-66, new int[]{137,-12,59});
    rules[104] = new Rule(-66, new int[]{137,-12,58,-12,59});
    rules[105] = new Rule(-65, new int[]{136,40,-12,41});
    rules[106] = new Rule(-62, new int[]{143,-35,181,40,-12,41,59});
    rules[107] = new Rule(-63, new int[]{151,-12,59});
    rules[108] = new Rule(-64, new int[]{141,40,-12,41,-49});
    rules[109] = new Rule(-41, new int[]{-2,59});
    rules[110] = new Rule(-2, new int[]{-3});
    rules[111] = new Rule(-54, new int[]{139,40,-12,41,-35});
    rules[112] = new Rule(-55, new int[]{139,40,-12,41,-52,153,-35});
    rules[113] = new Rule(-53, new int[]{139,40,-12,41,-52,153,-52});
    rules[114] = new Rule(-56, new int[]{181,40,-12,41,-35});
    rules[115] = new Rule(-57, new int[]{166,-49,-58});
    rules[116] = new Rule(-57, new int[]{166,-49,-59,-61});
    rules[117] = new Rule(-59, new int[]{-58});
    rules[118] = new Rule(-59, new int[]{});
    rules[119] = new Rule(-58, new int[]{-60});
    rules[120] = new Rule(-60, new int[]{162,40,41,-49});
    rules[121] = new Rule(-61, new int[]{173,-49});
    rules[122] = new Rule(-54, new int[]{139,40,-12,41,-35});
    rules[123] = new Rule(-55, new int[]{139,40,-12,41,-52,153,-35});
    rules[124] = new Rule(-53, new int[]{139,40,-12,41,-52,153,-52});
    rules[125] = new Rule(-56, new int[]{181,40,-12,41,-35});
    rules[126] = new Rule(-67, new int[]{131,58,-35});
    rules[127] = new Rule(-68, new int[]{147,-102,59});
    rules[128] = new Rule(-102, new int[]{131});
    rules[129] = new Rule(-102, new int[]{});
    rules[130] = new Rule(-69, new int[]{133,-102,59});
    rules[131] = new Rule(-70, new int[]{160,-103,59});
    rules[132] = new Rule(-103, new int[]{-12});
    rules[133] = new Rule(-103, new int[]{});
    rules[134] = new Rule(-3, new int[]{-4,-110,-12});
    rules[135] = new Rule(-4, new int[]{-5});
    rules[136] = new Rule(-5, new int[]{131});
    rules[137] = new Rule(-110, new int[]{61});
    rules[138] = new Rule(-10, new int[]{-3});
    rules[139] = new Rule(-10, new int[]{-15});
    rules[140] = new Rule(-28, new int[]{-11});
    rules[141] = new Rule(-11, new int[]{-1});
    rules[142] = new Rule(-1, new int[]{182});
    rules[143] = new Rule(-1, new int[]{183});
    rules[144] = new Rule(-1, new int[]{184});
    rules[145] = new Rule(-1, new int[]{185});
    rules[146] = new Rule(-1, new int[]{186});
    rules[147] = new Rule(-1, new int[]{187});
    rules[148] = new Rule(-12, new int[]{-13});
    rules[149] = new Rule(-12, new int[]{-10});
    rules[150] = new Rule(-13, new int[]{-111,194,-14});
    rules[151] = new Rule(-111, new int[]{});
    rules[152] = new Rule(-14, new int[]{});
    rules[153] = new Rule(-15, new int[]{-16});
    rules[154] = new Rule(-16, new int[]{-17});
    rules[155] = new Rule(-16, new int[]{-16,196,-17});
    rules[156] = new Rule(-17, new int[]{-18});
    rules[157] = new Rule(-17, new int[]{-17,195,-18});
    rules[158] = new Rule(-18, new int[]{-19});
    rules[159] = new Rule(-18, new int[]{-18,124,-19});
    rules[160] = new Rule(-19, new int[]{-20});
    rules[161] = new Rule(-19, new int[]{-19,94,-20});
    rules[162] = new Rule(-20, new int[]{-21});
    rules[163] = new Rule(-20, new int[]{-20,38,-21});
    rules[164] = new Rule(-21, new int[]{-22});
    rules[165] = new Rule(-21, new int[]{-21,190,-22});
    rules[166] = new Rule(-21, new int[]{-21,193,-22});
    rules[167] = new Rule(-22, new int[]{-23});
    rules[168] = new Rule(-22, new int[]{-22,60,-23});
    rules[169] = new Rule(-22, new int[]{-22,62,-23});
    rules[170] = new Rule(-22, new int[]{-22,192,-23});
    rules[171] = new Rule(-22, new int[]{-22,191,-23});
    rules[172] = new Rule(-22, new int[]{-22,159,-89});
    rules[173] = new Rule(-23, new int[]{-24});
    rules[174] = new Rule(-23, new int[]{-23,199,-24});
    rules[175] = new Rule(-23, new int[]{-23,200,-24});
    rules[176] = new Rule(-23, new int[]{-23,201,-24});
    rules[177] = new Rule(-24, new int[]{-25});
    rules[178] = new Rule(-24, new int[]{-24,43,-25});
    rules[179] = new Rule(-24, new int[]{-24,45,-25});
    rules[180] = new Rule(-25, new int[]{-26});
    rules[181] = new Rule(-25, new int[]{-25,42,-26});
    rules[182] = new Rule(-25, new int[]{-25,47,-26});
    rules[183] = new Rule(-25, new int[]{-25,37,-26});
    rules[184] = new Rule(-26, new int[]{-29});
    rules[185] = new Rule(-26, new int[]{-30});
    rules[186] = new Rule(-26, new int[]{43,-26});
    rules[187] = new Rule(-26, new int[]{45,-26});
    rules[188] = new Rule(-26, new int[]{-31});
    rules[189] = new Rule(-29, new int[]{197,-26});
    rules[190] = new Rule(-30, new int[]{198,-26});
    rules[191] = new Rule(-31, new int[]{-27});
    rules[192] = new Rule(-31, new int[]{126,-26});
    rules[193] = new Rule(-31, new int[]{33,-26});
    rules[194] = new Rule(-31, new int[]{-32});
    rules[195] = new Rule(-27, new int[]{-28});
    rules[196] = new Rule(-27, new int[]{-5});
    rules[197] = new Rule(-27, new int[]{-33});
    rules[198] = new Rule(-27, new int[]{-34});
    rules[199] = new Rule(-33, new int[]{-27,197});
    rules[200] = new Rule(-34, new int[]{-27,198});
    rules[201] = new Rule(-32, new int[]{40,-90,41,-26});
    rules[202] = new Rule(-112, new int[]{-112,-113});
    rules[203] = new Rule(-112, new int[]{});
    rules[204] = new Rule(-113, new int[]{38});
    rules[205] = new Rule(-114, new int[]{-12});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> CompilationUnit
#line 121 "parser.y"
                                   {root = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 4: // CompilationUnit -> PackageDeclaration_opt, ImportDeclarations, TypeDeclarations
#line 129 "parser.y"
                                                               { CurrentSemanticValue.stmt = new CompilationUnitDeclaration(ValueStack[ValueStack.Depth-3].stmt,ValueStack[ValueStack.Depth-2].stmts,ValueStack[ValueStack.Depth-1].stmts);  }
#line default
        break;
      case 7: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
#line 141 "parser.y"
                                          { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 8: // TypeDeclarations -> /* empty */
#line 142 "parser.y"
                          { CurrentSemanticValue.stmts = new List<Statement>();}
#line default
        break;
      case 9: // TypeDeclaration -> ClassDeclaration
#line 146 "parser.y"
                                                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 10: // ClassDeclaration -> NormalClassDeclaration
#line 150 "parser.y"
                                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 11: // NormalClassDeclaration -> ClassModifiers, CLASS, IDENTIFIER, TypeParameters_opt, 
               //                           Superclass_opt, Superinterfaces_opt, ClassBody
#line 154 "parser.y"
                                                                                                    {  CurrentSemanticValue.stmt = new ClassDeclaration(ValueStack[ValueStack.Depth-5].name,ValueStack[ValueStack.Depth-7].modfs,ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 12: // ClassModifiers -> ClassModifiers, ClassModifier
#line 158 "parser.y"
                                       { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 13: // ClassModifiers -> /* empty */
#line 159 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 14: // ClassModifier -> PUBLIC
#line 163 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 15: // ClassModifier -> PROTECTED
#line 164 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.PROTECTED; }
#line default
        break;
      case 16: // ClassModifier -> PRIVATE
#line 165 "parser.y"
                        { CurrentSemanticValue.modf = Modifier.PRIVATE; }
#line default
        break;
      case 17: // ClassModifier -> ABSTRACT
#line 166 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.ABSTRACT; }
#line default
        break;
      case 18: // ClassModifier -> STATIC
#line 167 "parser.y"
                       { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 19: // ClassModifier -> FINAL
#line 168 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 20: // ClassModifier -> STRICTFP
#line 169 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.STRICTFP; }
#line default
        break;
      case 21: // TypeParameters_opt -> /* empty */
#line 174 "parser.y"
                                        { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 22: // Superclass_opt -> /* empty */
#line 177 "parser.y"
                                     { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 23: // Superinterfaces_opt -> /* empty */
#line 180 "parser.y"
                                         { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 24: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 184 "parser.y"
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
#line default
        break;
      case 25: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 191 "parser.y"
                                                 { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 26: // ClassBodyDeclarations -> /* empty */
#line 192 "parser.y"
                          { CurrentSemanticValue.stmts = new List<Statement>(); }
#line default
        break;
      case 27: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 196 "parser.y"
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 28: // ClassMemberDeclaration -> MethodDeclaration
#line 201 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 29: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 206 "parser.y"
                                               { CurrentSemanticValue.stmt = new MethodDeclaration( (string)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[0], ValueStack[ValueStack.Depth-3].modfs, ValueStack[ValueStack.Depth-1].stmt, (AST.Type)ValueStack[ValueStack.Depth-2].arrlst[0], (List<Statement>)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[1]); }
#line default
        break;
      case 30: // MethodModifiers -> MethodModifiers, MethodModifier
#line 210 "parser.y"
                                              { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 31: // MethodModifiers -> /* empty */
#line 211 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 32: // MethodModifier -> PUBLIC
#line 215 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 33: // MethodModifier -> STATIC
#line 216 "parser.y"
                            { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 34: // MethodHeader -> Result, MethodDeclarator, Throws_opt
#line 220 "parser.y"
                                           {CurrentSemanticValue.arrlst = new ArrayList() { ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].arrlst, ValueStack[ValueStack.Depth-1].stmt } ; }
#line default
        break;
      case 35: // Result -> VOID
#line 228 "parser.y"
                     {CurrentSemanticValue.type = new NamedType("VOID"); }
#line default
        break;
      case 36: // Result -> UnannType
#line 229 "parser.y"
                         {CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 37: // Throws_opt -> Empty
#line 233 "parser.y"
                      {CurrentSemanticValue.stmt = null; }
#line default
        break;
      case 38: // MethodDeclarator -> IDENTIFIER, '(', FormalParameterList_Opt, ')', Dims_Opt
#line 238 "parser.y"
                                                        {CurrentSemanticValue.arrlst =  new ArrayList() { ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].stmts, ValueStack[ValueStack.Depth-1] };}
#line default
        break;
      case 39: // FormalParameterList_Opt -> FormalParameterList
#line 243 "parser.y"
                                { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 40: // FormalParameterList_Opt -> /* empty */
#line 244 "parser.y"
                          { CurrentSemanticValue.stmts = null; }
#line default
        break;
      case 41: // FormalParameterList -> FormalParameters
#line 251 "parser.y"
                               { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 42: // FormalParameters -> FormalParameter
#line 255 "parser.y"
                              { CurrentSemanticValue.stmts = new List<Statement> { ValueStack[ValueStack.Depth-1].stmt }; }
#line default
        break;
      case 43: // FormalParameters -> FormalParameters, ',', FormalParameter
#line 256 "parser.y"
                                             { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-3].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 44: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
#line 260 "parser.y"
                                                       { CurrentSemanticValue.stmt = new FormalParam(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 45: // VariableModifiers -> VariableModifiers, VariableModifier
#line 263 "parser.y"
                                           { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 46: // VariableModifiers -> /* empty */
#line 264 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 47: // VariableModifier -> FINAL
#line 268 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 48: // Dims_Opt -> Dims
#line 274 "parser.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 49: // Dims_Opt -> /* empty */
#line 275 "parser.y"
                          { }
#line default
        break;
      case 51: // UnannType -> UnannReferenceType
#line 284 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 52: // UnannType -> UnannPrimitiveType
#line 285 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 53: // UnannPrimitiveType -> NumericType
#line 289 "parser.y"
                          { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 54: // UnannPrimitiveType -> BOOLEAN
#line 290 "parser.y"
                       { CurrentSemanticValue.type = new NamedType("BOOLEAN"); }
#line default
        break;
      case 59: // NumericType -> IntegralType
#line 310 "parser.y"
                           { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 60: // NumericType -> FloatingPointType
#line 311 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 61: // IntegralType -> BYTE
#line 315 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("BYTE");  }
#line default
        break;
      case 62: // IntegralType -> SHORT
#line 316 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("SHORT");  }
#line default
        break;
      case 63: // IntegralType -> INT
#line 317 "parser.y"
                    { CurrentSemanticValue.type = new NamedType("INT");}
#line default
        break;
      case 64: // IntegralType -> LONG
#line 318 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("LONG"); }
#line default
        break;
      case 65: // IntegralType -> CHAR
#line 319 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("CHAR"); }
#line default
        break;
      case 66: // FloatingPointType -> FLOAT
#line 323 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("FLOAT"); }
#line default
        break;
      case 67: // FloatingPointType -> DOUBLE
#line 324 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("DOUBLE"); }
#line default
        break;
      case 68: // UnannReferenceType -> UnannArrayType
#line 328 "parser.y"
                            { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 69: // UnannArrayType -> UnannTypeVariable, Dims
#line 334 "parser.y"
                                  { CurrentSemanticValue.type = new ArrayType(ValueStack[ValueStack.Depth-2].type); }
#line default
        break;
      case 70: // UnannTypeVariable -> IDENTIFIER
#line 338 "parser.y"
                         { CurrentSemanticValue.type = new NamedType(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 71: // MethodBody -> Block
#line 343 "parser.y"
                       { CurrentSemanticValue.stmt= ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 72: // MethodBody -> ';'
#line 344 "parser.y"
                    { CurrentSemanticValue.stmt= null;}
#line default
        break;
      case 73: // Block -> '{', BlockStatements_Opt, '}'
#line 354 "parser.y"
                                      { CurrentSemanticValue.stmt = new BlockStatement(ValueStack[ValueStack.Depth-2].stmts); }
#line default
        break;
      case 74: // BlockStatements_Opt -> BlockStatements
#line 358 "parser.y"
                             { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 75: // BlockStatements_Opt -> /* empty */
#line 359 "parser.y"
                          { CurrentSemanticValue.stmts = null; }
#line default
        break;
      case 76: // BlockStatements -> BlockStatement
#line 363 "parser.y"
                            { CurrentSemanticValue.stmts = new List<Statement> { ValueStack[ValueStack.Depth-1].stmt }; }
#line default
        break;
      case 77: // BlockStatements -> BlockStatements, BlockStatement
#line 364 "parser.y"
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 78: // BlockStatement -> LocalVariableDeclarationStatement
#line 368 "parser.y"
                                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 79: // BlockStatement -> Statement
#line 369 "parser.y"
                         { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 80: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 373 "parser.y"
                                       { CurrentSemanticValue.stmt = new VariableDeclarationStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 81: // LocalVariableDeclaration -> UnannType, VariableDeclaratorList
#line 377 "parser.y"
                                          { CurrentSemanticValue.expr = new VariableDeclarationList(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].strlst); }
#line default
        break;
      case 82: // VariableDeclaratorList -> VariableDeclarator
#line 383 "parser.y"
                               { CurrentSemanticValue.strlst = new List<string> { ValueStack[ValueStack.Depth-1].name }; }
#line default
        break;
      case 83: // VariableDeclaratorList -> VariableDeclaratorList, ',', VariableDeclarator
#line 384 "parser.y"
                                                    { CurrentSemanticValue.strlst = ValueStack[ValueStack.Depth-3].strlst; CurrentSemanticValue.strlst.Add(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 84: // VariableDeclarator -> VariableDeclaratorId
#line 388 "parser.y"
                                 { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 85: // VariableDeclaratorId -> IDENTIFIER, Dims_Opt
#line 392 "parser.y"
                                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 86: // Statement -> StatementWithoutTrailingSubstatement
#line 396 "parser.y"
                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 87: // Statement -> IfThenStatement
#line 397 "parser.y"
                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 88: // Statement -> IfThenElseStatement
#line 398 "parser.y"
                                {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 89: // Statement -> WhileStatement
#line 399 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 90: // Statement -> LabeledStatement
#line 400 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 91: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 404 "parser.y"
                                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 92: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 405 "parser.y"
                                       {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 93: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 410 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 94: // StatementWithoutTrailingSubstatement -> Block
#line 411 "parser.y"
                      { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 95: // StatementWithoutTrailingSubstatement -> BreakStatement
#line 412 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 96: // StatementWithoutTrailingSubstatement -> DoStatement
#line 413 "parser.y"
                          { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 97: // StatementWithoutTrailingSubstatement -> ContinueStatement
#line 414 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 98: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 415 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 99: // StatementWithoutTrailingSubstatement -> ThrowStatement
#line 416 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 100: // StatementWithoutTrailingSubstatement -> SynchronizedStatement
#line 417 "parser.y"
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 101: // StatementWithoutTrailingSubstatement -> SwitchStatement
#line 418 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 102: // StatementWithoutTrailingSubstatement -> AssertStatement
#line 419 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 103: // AssertStatement -> ASSERT, Expression, ';'
#line 423 "parser.y"
                                  { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 104: // AssertStatement -> ASSERT, Expression, ':', Expression, ';'
#line 424 "parser.y"
                                             { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 105: // SwitchStatement -> SWITCH, '(', Expression, ')'
#line 428 "parser.y"
                                     { CurrentSemanticValue.stmt = new SwitchStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 106: // DoStatement -> DO, Statement, WHILE, '(', Expression, ')', ';'
#line 432 "parser.y"
                                                 { CurrentSemanticValue.stmt = new DoStatement(ValueStack[ValueStack.Depth-6].stmt, ValueStack[ValueStack.Depth-3].expr); }
#line default
        break;
      case 107: // ThrowStatement -> THROW, Expression, ';'
#line 436 "parser.y"
                                 { CurrentSemanticValue.stmt = new ThrowStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 108: // SynchronizedStatement -> SYNCHRONIZED, '(', Expression, ')', Block
#line 440 "parser.y"
                                              { CurrentSemanticValue.stmt = new SynchronizedStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 109: // ExpressionStatement -> StatementExpression, ';'
#line 444 "parser.y"
                                   { CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 110: // StatementExpression -> Assignment
#line 448 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 111: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 452 "parser.y"
                                         { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt,null); }
#line default
        break;
      case 112: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
                //                        Statement
#line 457 "parser.y"
                                                               { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 113: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
                //                                 ELSE, StatementNoShortIf
#line 461 "parser.y"
                                                                      { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 114: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 465 "parser.y"
                                           { CurrentSemanticValue.stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 115: // TryStatement -> TRY, Block, Catches
#line 469 "parser.y"
                               { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt, null); }
#line default
        break;
      case 116: // TryStatement -> TRY, Block, Catches_opt, Finally
#line 470 "parser.y"
                                        { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 117: // Catches_opt -> Catches
#line 475 "parser.y"
                       { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 118: // Catches_opt -> /* empty */
#line 476 "parser.y"
                          { }
#line default
        break;
      case 119: // Catches -> CatchClause
#line 480 "parser.y"
                          { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 120: // CatchClause -> CATCH, '(', ')', Block
#line 487 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 121: // Finally -> FINALLY, Block
#line 505 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 122: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 513 "parser.y"
                                         { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt,null); }
#line default
        break;
      case 123: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
                //                        Statement
#line 518 "parser.y"
                                                               { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 124: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
                //                                 ELSE, StatementNoShortIf
#line 522 "parser.y"
                                                                      { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 125: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 526 "parser.y"
                                           { CurrentSemanticValue.stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 126: // LabeledStatement -> IDENTIFIER, ':', Statement
#line 531 "parser.y"
                                    { CurrentSemanticValue.stmt = new LabeledStatement(ValueStack[ValueStack.Depth-3].name,ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 127: // BreakStatement -> BREAK, Identifier_opt, ';'
#line 536 "parser.y"
                                     { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new BreakStatement();} else {CurrentSemanticValue.stmt = new BreakStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 130: // ContinueStatement -> CONTINUE, Identifier_opt, ';'
#line 547 "parser.y"
                                        { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new ContinueStatement();} else {CurrentSemanticValue.stmt = new ContinueStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 131: // ReturnStatement -> RETURN, Expression_opt, ';'
#line 552 "parser.y"
                                      { if(ValueStack[ValueStack.Depth-2].expr == null){CurrentSemanticValue.stmt = new ReturnStatement();} else {CurrentSemanticValue.stmt = new ReturnStatement(ValueStack[ValueStack.Depth-2].expr);} }
#line default
        break;
      case 132: // Expression_opt -> Expression
#line 557 "parser.y"
                          { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 134: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 565 "parser.y"
                                                 { CurrentSemanticValue.expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 135: // LeftHandSide -> ExpressionName
#line 569 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 136: // ExpressionName -> IDENTIFIER
#line 573 "parser.y"
                         { CurrentSemanticValue.expr = new VariableExpression(ValueStack[ValueStack.Depth-1].name);  }
#line default
        break;
      case 138: // AssignmentExpression -> Assignment
#line 581 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 139: // AssignmentExpression -> ConditionalExpression
#line 582 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 140: // Primary -> PrimaryNoNewArray
#line 586 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 141: // PrimaryNoNewArray -> Literal
#line 590 "parser.y"
                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 142: // Literal -> IntegerLiteral
#line 594 "parser.y"
                            { CurrentSemanticValue.expr = new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
      case 143: // Literal -> FloatingPointLiteral
#line 595 "parser.y"
                                 { CurrentSemanticValue.expr = new FloatingPointLiteralExpression(ValueStack[ValueStack.Depth-1].floatnum); }
#line default
        break;
      case 144: // Literal -> BooleanLiteral
#line 596 "parser.y"
                            { CurrentSemanticValue.expr = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].boolval); }
#line default
        break;
      case 145: // Literal -> CharacterLiteral
#line 597 "parser.y"
                              { CurrentSemanticValue.expr = new CharacterLiteralExpression(ValueStack[ValueStack.Depth-1].charval); }
#line default
        break;
      case 146: // Literal -> StringLiteral
#line 598 "parser.y"
                            { CurrentSemanticValue.expr = new StringLiteralExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 147: // Literal -> NullLiteral
#line 599 "parser.y"
                          { CurrentSemanticValue.expr = new NullLiteralExpression(); }
#line default
        break;
      case 148: // Expression -> LambdaExpression
#line 605 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 149: // Expression -> AssignmentExpression
#line 606 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 150: // LambdaExpression -> LambdaParameters, ARROW, LambdaBody
#line 610 "parser.y"
                                           { }
#line default
        break;
      case 151: // LambdaParameters -> /* empty */
#line 614 "parser.y"
                          { }
#line default
        break;
      case 152: // LambdaBody -> /* empty */
#line 618 "parser.y"
                          { }
#line default
        break;
      case 153: // ConditionalExpression -> ConditionalOrExpression
#line 622 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 154: // ConditionalOrExpression -> ConditionalAndExpression
#line 628 "parser.y"
                                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 155: // ConditionalOrExpression -> ConditionalOrExpression, LOGICAL_OR, 
                //                            ConditionalAndExpression
#line 629 "parser.y"
                                                                { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "||", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 156: // ConditionalAndExpression -> InclusiveOrExpression
#line 633 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 157: // ConditionalAndExpression -> ConditionalAndExpression, LOGICAL_AND, 
                //                             InclusiveOrExpression
#line 634 "parser.y"
                                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 158: // InclusiveOrExpression -> ExclusiveOrExpression
#line 638 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 159: // InclusiveOrExpression -> InclusiveOrExpression, '|', ExclusiveOrExpression
#line 639 "parser.y"
                                                       { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "|", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 160: // ExclusiveOrExpression -> AndExpression
#line 643 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 161: // ExclusiveOrExpression -> ExclusiveOrExpression, '^', AndExpression
#line 644 "parser.y"
                                                 { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "^", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 162: // AndExpression -> EqualityExpression
#line 648 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 163: // AndExpression -> AndExpression, '&', EqualityExpression
#line 649 "parser.y"
                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 164: // EqualityExpression -> RelationalExpression
#line 653 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 165: // EqualityExpression -> EqualityExpression, EQUAL, RelationalExpression
#line 654 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "==", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 166: // EqualityExpression -> EqualityExpression, NOT_EQUAL, RelationalExpression
#line 655 "parser.y"
                                                         { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "!=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 167: // RelationalExpression -> ShiftExpression
#line 659 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 168: // RelationalExpression -> RelationalExpression, '<', ShiftExpression
#line 660 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 169: // RelationalExpression -> RelationalExpression, '>', ShiftExpression
#line 661 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 170: // RelationalExpression -> RelationalExpression, LESS_THAN_OR_EQUAL, 
                //                         ShiftExpression
#line 662 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 171: // RelationalExpression -> RelationalExpression, GREATER_OR_EQUAL, ShiftExpression
#line 663 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 172: // RelationalExpression -> RelationalExpression, INSTANCEOF, ReferenceType
#line 664 "parser.y"
                                                      { CurrentSemanticValue.expr = new InstanceOfExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 173: // ShiftExpression -> AdditiveExpression
#line 668 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 174: // ShiftExpression -> ShiftExpression, LEFT_SHIFT, AdditiveExpression
#line 669 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 175: // ShiftExpression -> ShiftExpression, SIGNED_RIGHT_SHIFT, AdditiveExpression
#line 670 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 176: // ShiftExpression -> ShiftExpression, UNSIGNED_RIGHT_SHIFT, AdditiveExpression
#line 671 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 177: // AdditiveExpression -> MultiplicativeExpression
#line 675 "parser.y"
                                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 178: // AdditiveExpression -> AdditiveExpression, '+', MultiplicativeExpression
#line 676 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 179: // AdditiveExpression -> AdditiveExpression, '-', MultiplicativeExpression
#line 677 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 180: // MultiplicativeExpression -> UnaryExpression
#line 681 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 181: // MultiplicativeExpression -> MultiplicativeExpression, '*', UnaryExpression
#line 682 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "*", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 182: // MultiplicativeExpression -> MultiplicativeExpression, '/', UnaryExpression
#line 683 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "/", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 183: // MultiplicativeExpression -> MultiplicativeExpression, '%', UnaryExpression
#line 684 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "%", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 184: // UnaryExpression -> PreIncrementExpression
#line 688 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 185: // UnaryExpression -> PreDecrementExpression
#line 689 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 186: // UnaryExpression -> '+', UnaryExpression
#line 690 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 187: // UnaryExpression -> '-', UnaryExpression
#line 691 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 188: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 692 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 189: // PreIncrementExpression -> INCREMENT, UnaryExpression
#line 700 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("++", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 190: // PreDecrementExpression -> DECREMENT, UnaryExpression
#line 704 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("--", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 191: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 708 "parser.y"
                                { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 192: // UnaryExpressionNotPlusMinus -> '~', UnaryExpression
#line 709 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("~", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 193: // UnaryExpressionNotPlusMinus -> '!', UnaryExpression
#line 710 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("!", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 194: // UnaryExpressionNotPlusMinus -> CastExpression
#line 711 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 195: // PostfixExpression -> Primary
#line 715 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 196: // PostfixExpression -> ExpressionName
#line 716 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 197: // PostfixExpression -> PostIncrementExpression
#line 717 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 198: // PostfixExpression -> PostDecrementExpression
#line 718 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 199: // PostIncrementExpression -> PostfixExpression, INCREMENT
#line 722 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "++"); }
#line default
        break;
      case 200: // PostDecrementExpression -> PostfixExpression, DECREMENT
#line 726 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "--"); }
#line default
        break;
      case 201: // CastExpression -> '(', PrimitiveType, ')', UnaryExpression
#line 730 "parser.y"
                                                   { CurrentSemanticValue.expr = new CastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 750 "parser.y"
public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
