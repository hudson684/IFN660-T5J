// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// Machine:  AIR
// DateTime: 5/13/2017 20:01:45
// UserName: Air
// Input file <parser.y - 5/13/2017 19:47:54>

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Collections;
using IFN660_Java_ECMAScript.AST;

namespace IFN660_Java_ECMAScript
{
public enum Tokens {error=128,EOF=129,NUMBER=130,IDENTIFIER=131,ABSTRACT=132,
    CONTINUE=133,FOR=134,NEW=135,SWITCH=136,ASSERT=137,DEFAULT=138,
    IF=139,PACKAGE=140,SYNCHRONIZED=141,BOOLEAN=142,DO=143,GOTO=144,
    PRIVATE=145,THIS=146,BREAK=147,DOUBLE=148,IMPLEMENTS=149,PROTECTED=150,
    THROW=151,BYTE=152,ELSE=153,IMPORT=154,PUBLIC=155,THROWS=156,
    CASE=157,ENUM=158,INSTANCEOF=159,RETURN=160,TRANSIENT=161,CATCH=162,
    EXTENDS=163,INT=164,SHORT=165,TRY=166,CHAR=167,FINAL=168,
    INTERFACE=169,STATIC=170,VOID=171,CLASS=172,FINALLY=173,LONG=174,
    STRICTFP=175,VOLATILE=176,CONST=177,FLOAT=178,NATIVE=179,SUPER=180,
    WHILE=181,IntegerLiteral=182,FloatingPointLiteral=183,BooleanLiteral=184,CharacterLiteral=185,StringLiteral=186,
    NullLiteral=187,ELLIPSIS=188,DOUBLE_COLON=189,EQUAL=190,GREATER_OR_EQUAL=191,LESS_THAN_OR_EQUAL=192,
    NOT_EQUAL=193,ARROW=194,LOGICAL_AND=195,LOGICAL_OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,SIGNED_RIGHT_SHIFT=200,UNSIGNED_RIGHT_SHIFT=201,ADDITION_ASSIGNMENT=202,SUBTRACTION_ASSIGNMENT=203,MULTIPLICATION_ASSIGNMENT=204,
    DIVISION_ASSIGNMENT=205,MODULUS_ASSIGNMENT=206,BITWISE_AND_ASSIGNMENT=207,BITWISE_OR_ASSIGNMENT=208,BITWISE_XOR_ASSIGNMENT=209,LEFT_SHIFT_ASSIGNMENT=210,
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=211,SIGNED_RIGHT_SHIFT_ASSIGNMENT=212};

public struct ValueType
#line 11 "parser.y"
{
    public long num;
	public double floatnum;
	public bool boolval;
	public char charval;
    public string name;
	public Statement stmt;
	public List<Statement> stmts;
	public Expression expr;
	public AST.Type type;
	public Modifier modf;
	public List<Modifier> modfs;
	public ArrayList arrlst;
	public List<string> strlst;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
  // Verbatim content from parser.y - 5/13/2017 19:47:54
#line 7 "parser.y"
public static Statement root;
#line default
  // End verbatim content from parser.y - 5/13/2017 19:47:54

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[180];
  private static State[] states = new State[252];
  private static string[] nonTerms = new string[] {
      "Literal", "StatementExpression", "Assignment", "LeftHandSide", "ExpressionName", 
      "TypeParameters_opt", "Superclass_opt", "Superinterfaces_opt", "AssignmentExpression", 
      "PrimaryNoNewArray", "Expression", "LambdaExpression", "LambdaBody", "ConditionalExpression", 
      "ConditionalOrExpression", "ConditionalAndExpression", "InclusiveOrExpression", 
      "ExclusiveOrExpression", "AndExpression", "EqualityExpression", "RelationalExpression", 
      "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", "UnaryExpression", 
      "PostfixExpression", "Primary", "PreIncrementExpression", "PreDecrementExpression", 
      "UnaryExpressionNotPlusMinus", "CastExpression", "PostIncrementExpression", 
      "PostDecrementExpression", "Statement", "CompilationUnit", "TypeDeclaration", 
      "ClassDeclaration", "NormalClassDeclaration", "ClassBodyDeclaration", "ExpressionStatement", 
      "StatementWithoutTrailingSubstatement", "LocalVariableDeclaration", "LocalVariableDeclarationStatement", 
      "BlockStatement", "Throws_opt", "ClassMemberDeclaration", "MethodDeclaration", 
      "FormalParameter", "PackageDeclaration_opt", "Block", "MethodBody", "StatementNoShortIf", 
      "IfThenElseStatementNoShortIf", "IfThenStatement", "IfThenElseStatement", 
      "WhileStatement", "TryStatement", "Catches", "Catches_opt", "CatchClause", 
      "Finally", "TypeDeclarations", "ClassBody", "ClassBodyDeclarations", "BlockStatements", 
      "BlockStatements_Opt", "FormalParameters", "FormalParameterList", "FormalParameterList_Opt", 
      "ImportDeclarations", "Result", "FloatingPointType", "IntegralType", "NumericType", 
      "UnannType", "UnannPrimitiveType", "UnannReferenceType", "UnannArrayType", 
      "UnannTypeVariable", "ReferenceType", "ClassModifier", "MethodModifier", 
      "VariableModifier", "ClassModifiers", "MethodModifiers", "VariableModifiers", 
      "VariableDeclaratorId", "VariableDeclarator", "MethodHeader", "MethodDeclarator", 
      "VariableDeclaratorList", "Program", "$accept", "Empty", "Dims_Opt", "Dims", 
      "PrimitiveType", "TypeVariable", "AssignmentOperator", "LambdaParameters", 
      "AdditionalBounds", "AdditionalBound", "ConstantExpression", };

  static Parser() {
    states[0] = new State(-5,new int[]{-92,1,-35,3,-49,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-6,new int[]{-70,5});
    states[5] = new State(-8,new int[]{-62,6});
    states[6] = new State(new int[]{129,-4,172,-13,155,-13,150,-13,145,-13,132,-13,170,-13,168,-13,175,-13},new int[]{-36,7,-37,8,-38,9,-84,10});
    states[7] = new State(-7);
    states[8] = new State(-9);
    states[9] = new State(-10);
    states[10] = new State(new int[]{172,11,155,245,150,246,145,247,132,248,170,249,168,250,175,251},new int[]{-81,244});
    states[11] = new State(new int[]{131,12});
    states[12] = new State(-21,new int[]{-6,13});
    states[13] = new State(-22,new int[]{-7,14});
    states[14] = new State(-23,new int[]{-8,15});
    states[15] = new State(new int[]{123,17},new int[]{-63,16});
    states[16] = new State(-11);
    states[17] = new State(-26,new int[]{-64,18});
    states[18] = new State(new int[]{125,19,171,-31,131,-31,152,-31,165,-31,164,-31,174,-31,167,-31,178,-31,148,-31,142,-31,155,-31,170,-31},new int[]{-39,20,-46,21,-47,22,-85,23});
    states[19] = new State(-24);
    states[20] = new State(-25);
    states[21] = new State(-27);
    states[22] = new State(-28);
    states[23] = new State(new int[]{171,240,131,237,152,54,165,55,164,56,174,57,167,58,178,60,148,61,142,62,155,242,170,243},new int[]{-89,24,-82,219,-71,220,-75,241,-77,46,-78,47,-79,48,-76,51,-74,52,-73,53,-72,59});
    states[24] = new State(new int[]{123,27,59,218},new int[]{-51,25,-50,26});
    states[25] = new State(-29);
    states[26] = new State(-71);
    states[27] = new State(new int[]{131,50,152,54,165,55,164,56,174,57,167,58,178,60,148,61,142,62,123,27,139,180,181,190,166,196,125,-75},new int[]{-66,28,-65,30,-44,217,-43,32,-42,33,-75,35,-77,46,-78,47,-79,48,-76,51,-74,52,-73,53,-72,59,-34,63,-41,64,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195});
    states[28] = new State(new int[]{125,29});
    states[29] = new State(-73);
    states[30] = new State(new int[]{131,50,152,54,165,55,164,56,174,57,167,58,178,60,148,61,142,62,123,27,139,180,181,190,166,196,125,-74},new int[]{-44,31,-43,32,-42,33,-75,35,-77,46,-78,47,-79,48,-76,51,-74,52,-73,53,-72,59,-34,63,-41,64,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195});
    states[31] = new State(-77);
    states[32] = new State(-78);
    states[33] = new State(new int[]{59,34});
    states[34] = new State(-80);
    states[35] = new State(new int[]{131,40},new int[]{-91,36,-88,45,-87,39});
    states[36] = new State(new int[]{44,37,59,-81});
    states[37] = new State(new int[]{131,40},new int[]{-88,38,-87,39});
    states[38] = new State(-83);
    states[39] = new State(-84);
    states[40] = new State(new int[]{91,43,44,-49,59,-49,41,-49},new int[]{-95,41,-96,42});
    states[41] = new State(-85);
    states[42] = new State(-48);
    states[43] = new State(new int[]{93,44});
    states[44] = new State(-50);
    states[45] = new State(-82);
    states[46] = new State(-51);
    states[47] = new State(-68);
    states[48] = new State(new int[]{91,43},new int[]{-96,49});
    states[49] = new State(-69);
    states[50] = new State(new int[]{91,-70,61,-110});
    states[51] = new State(-52);
    states[52] = new State(-53);
    states[53] = new State(-59);
    states[54] = new State(-61);
    states[55] = new State(-62);
    states[56] = new State(-63);
    states[57] = new State(-64);
    states[58] = new State(-65);
    states[59] = new State(-60);
    states[60] = new State(-66);
    states[61] = new State(-67);
    states[62] = new State(-54);
    states[63] = new State(-79);
    states[64] = new State(-86);
    states[65] = new State(-93);
    states[66] = new State(new int[]{59,67});
    states[67] = new State(-95);
    states[68] = new State(-96);
    states[69] = new State(new int[]{61,176},new int[]{-99,70});
    states[70] = new State(new int[]{131,79,197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,126,126,33,128,40,131,194,-123},new int[]{-11,71,-12,72,-100,73,-9,76,-3,77,-4,69,-5,78,-14,80,-15,81,-16,175,-17,174,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-32,124,-33,125,-31,130});
    states[71] = new State(-108);
    states[72] = new State(-120);
    states[73] = new State(new int[]{194,74});
    states[74] = new State(-124,new int[]{-13,75});
    states[75] = new State(-122);
    states[76] = new State(-121);
    states[77] = new State(-112);
    states[78] = new State(new int[]{61,-109,197,-168,198,-168,42,-168,47,-168,37,-168,43,-168,45,-168,199,-168,200,-168,201,-168,60,-168,62,-168,192,-168,191,-168,159,-168,190,-168,193,-168,38,-168,94,-168,124,-168,195,-168,196,-168,59,-168,41,-168});
    states[79] = new State(-110);
    states[80] = new State(-113);
    states[81] = new State(new int[]{196,82,59,-125,41,-125});
    states[82] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-16,83,-17,174,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[83] = new State(new int[]{195,84,196,-127,59,-127,41,-127});
    states[84] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-17,85,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[85] = new State(new int[]{124,86,195,-129,196,-129,59,-129,41,-129});
    states[86] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-18,87,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[87] = new State(new int[]{94,88,124,-131,195,-131,196,-131,59,-131,41,-131});
    states[88] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-19,89,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[89] = new State(new int[]{38,90,94,-133,124,-133,195,-133,196,-133,59,-133,41,-133});
    states[90] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-20,91,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[91] = new State(new int[]{190,92,193,168,38,-135,94,-135,124,-135,195,-135,196,-135,59,-135,41,-135});
    states[92] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-21,93,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[93] = new State(new int[]{60,94,62,159,192,161,191,163,159,165,190,-137,193,-137,38,-137,94,-137,124,-137,195,-137,196,-137,59,-137,41,-137});
    states[94] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-22,95,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[95] = new State(new int[]{199,96,200,154,201,156,60,-140,62,-140,192,-140,191,-140,159,-140,190,-140,193,-140,38,-140,94,-140,124,-140,195,-140,196,-140,59,-140,41,-140});
    states[96] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-23,97,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[97] = new State(new int[]{43,98,45,151,199,-146,200,-146,201,-146,60,-146,62,-146,192,-146,191,-146,159,-146,190,-146,193,-146,38,-146,94,-146,124,-146,195,-146,196,-146,59,-146,41,-146});
    states[98] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-24,99,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[99] = new State(new int[]{42,100,47,146,37,148,43,-150,45,-150,199,-150,200,-150,201,-150,60,-150,62,-150,192,-150,191,-150,159,-150,190,-150,193,-150,38,-150,94,-150,124,-150,195,-150,196,-150,59,-150,41,-150});
    states[100] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,101,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[101] = new State(-153);
    states[102] = new State(-156);
    states[103] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,104,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[104] = new State(-161);
    states[105] = new State(-157);
    states[106] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,107,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[107] = new State(-162);
    states[108] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,109,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[109] = new State(-158);
    states[110] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,111,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[111] = new State(-159);
    states[112] = new State(-160);
    states[113] = new State(new int[]{197,114,198,115,42,-163,47,-163,37,-163,43,-163,45,-163,199,-163,200,-163,201,-163,60,-163,62,-163,192,-163,191,-163,159,-163,190,-163,193,-163,38,-163,94,-163,124,-163,195,-163,196,-163,59,-163,41,-163});
    states[114] = new State(-171);
    states[115] = new State(-172);
    states[116] = new State(-167);
    states[117] = new State(-114);
    states[118] = new State(-115);
    states[119] = new State(-116);
    states[120] = new State(-117);
    states[121] = new State(-118);
    states[122] = new State(-119);
    states[123] = new State(-168);
    states[124] = new State(-169);
    states[125] = new State(-170);
    states[126] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,127,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[127] = new State(-164);
    states[128] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,129,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[129] = new State(-165);
    states[130] = new State(-166);
    states[131] = new State(new int[]{152,54,165,55,164,56,174,57,167,58,178,60,148,61,142,143,131,145},new int[]{-97,132,-80,135,-74,142,-73,53,-72,59,-98,144});
    states[132] = new State(new int[]{41,133});
    states[133] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,134,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[134] = new State(-173);
    states[135] = new State(-177,new int[]{-101,136});
    states[136] = new State(new int[]{41,137,38,141},new int[]{-102,140});
    states[137] = new State(new int[]{182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131,194,-123},new int[]{-30,138,-12,139,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130,-100,73});
    states[138] = new State(-174);
    states[139] = new State(-175);
    states[140] = new State(-176);
    states[141] = new State(-178);
    states[142] = new State(-55);
    states[143] = new State(-56);
    states[144] = new State(-57);
    states[145] = new State(-58);
    states[146] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,147,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[147] = new State(-154);
    states[148] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-25,149,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[149] = new State(-155);
    states[150] = new State(-152);
    states[151] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-24,152,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[152] = new State(new int[]{42,100,47,146,37,148,43,-151,45,-151,199,-151,200,-151,201,-151,60,-151,62,-151,192,-151,191,-151,159,-151,190,-151,193,-151,38,-151,94,-151,124,-151,195,-151,196,-151,59,-151,41,-151});
    states[153] = new State(new int[]{42,100,47,146,37,148,43,-149,45,-149,199,-149,200,-149,201,-149,60,-149,62,-149,192,-149,191,-149,159,-149,190,-149,193,-149,38,-149,94,-149,124,-149,195,-149,196,-149,59,-149,41,-149});
    states[154] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-23,155,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[155] = new State(new int[]{43,98,45,151,199,-147,200,-147,201,-147,60,-147,62,-147,192,-147,191,-147,159,-147,190,-147,193,-147,38,-147,94,-147,124,-147,195,-147,196,-147,59,-147,41,-147});
    states[156] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-23,157,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[157] = new State(new int[]{43,98,45,151,199,-148,200,-148,201,-148,60,-148,62,-148,192,-148,191,-148,159,-148,190,-148,193,-148,38,-148,94,-148,124,-148,195,-148,196,-148,59,-148,41,-148});
    states[158] = new State(new int[]{43,98,45,151,199,-145,200,-145,201,-145,60,-145,62,-145,192,-145,191,-145,159,-145,190,-145,193,-145,38,-145,94,-145,124,-145,195,-145,196,-145,59,-145,41,-145});
    states[159] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-22,160,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[160] = new State(new int[]{199,96,200,154,201,156,60,-141,62,-141,192,-141,191,-141,159,-141,190,-141,193,-141,38,-141,94,-141,124,-141,195,-141,196,-141,59,-141,41,-141});
    states[161] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-22,162,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[162] = new State(new int[]{199,96,200,154,201,156,60,-142,62,-142,192,-142,191,-142,159,-142,190,-142,193,-142,38,-142,94,-142,124,-142,195,-142,196,-142,59,-142,41,-142});
    states[163] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-22,164,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[164] = new State(new int[]{199,96,200,154,201,156,60,-143,62,-143,192,-143,191,-143,159,-143,190,-143,193,-143,38,-143,94,-143,124,-143,195,-143,196,-143,59,-143,41,-143});
    states[165] = new State(new int[]{131,145},new int[]{-80,166,-98,144});
    states[166] = new State(-144);
    states[167] = new State(new int[]{199,96,200,154,201,156,60,-139,62,-139,192,-139,191,-139,159,-139,190,-139,193,-139,38,-139,94,-139,124,-139,195,-139,196,-139,59,-139,41,-139});
    states[168] = new State(new int[]{197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,131,79,126,126,33,128,40,131},new int[]{-21,169,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-5,123,-32,124,-33,125,-31,130});
    states[169] = new State(new int[]{60,94,62,159,192,161,191,163,159,165,190,-138,193,-138,38,-138,94,-138,124,-138,195,-138,196,-138,59,-138,41,-138});
    states[170] = new State(new int[]{60,94,62,159,192,161,191,163,159,165,190,-136,193,-136,38,-136,94,-136,124,-136,195,-136,196,-136,59,-136,41,-136});
    states[171] = new State(new int[]{190,92,193,168,38,-134,94,-134,124,-134,195,-134,196,-134,59,-134,41,-134});
    states[172] = new State(new int[]{38,90,94,-132,124,-132,195,-132,196,-132,59,-132,41,-132});
    states[173] = new State(new int[]{94,88,124,-130,195,-130,196,-130,59,-130,41,-130});
    states[174] = new State(new int[]{124,86,195,-128,196,-128,59,-128,41,-128});
    states[175] = new State(new int[]{195,84,196,-126,59,-126,41,-126});
    states[176] = new State(-111);
    states[177] = new State(-109);
    states[178] = new State(-94);
    states[179] = new State(-87);
    states[180] = new State(new int[]{40,181});
    states[181] = new State(new int[]{131,79,197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,126,126,33,128,40,131,194,-123},new int[]{-11,182,-12,72,-100,73,-9,76,-3,77,-4,69,-5,78,-14,80,-15,81,-16,175,-17,174,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-32,124,-33,125,-31,130});
    states[182] = new State(new int[]{41,183});
    states[183] = new State(new int[]{131,79,123,27,139,209,181,190,166,196},new int[]{-34,184,-52,185,-41,208,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195,-53,216});
    states[184] = new State(-97);
    states[185] = new State(new int[]{153,186});
    states[186] = new State(new int[]{131,79,123,27,139,180,181,190,166,196},new int[]{-34,187,-41,64,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195});
    states[187] = new State(-98);
    states[188] = new State(-88);
    states[189] = new State(-89);
    states[190] = new State(new int[]{40,191});
    states[191] = new State(new int[]{131,79,197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,126,126,33,128,40,131,194,-123},new int[]{-11,192,-12,72,-100,73,-9,76,-3,77,-4,69,-5,78,-14,80,-15,81,-16,175,-17,174,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-32,124,-33,125,-31,130});
    states[192] = new State(new int[]{41,193});
    states[193] = new State(new int[]{131,79,123,27,139,180,181,190,166,196},new int[]{-34,194,-41,64,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195});
    states[194] = new State(-100);
    states[195] = new State(-90);
    states[196] = new State(new int[]{123,27},new int[]{-50,197});
    states[197] = new State(new int[]{162,204,173,-104},new int[]{-58,198,-59,199,-60,203});
    states[198] = new State(new int[]{131,-101,152,-101,165,-101,164,-101,174,-101,167,-101,178,-101,148,-101,142,-101,123,-101,139,-101,181,-101,166,-101,125,-101,173,-103});
    states[199] = new State(new int[]{173,201},new int[]{-61,200});
    states[200] = new State(-102);
    states[201] = new State(new int[]{123,27},new int[]{-50,202});
    states[202] = new State(-107);
    states[203] = new State(-105);
    states[204] = new State(new int[]{40,205});
    states[205] = new State(new int[]{41,206});
    states[206] = new State(new int[]{123,27},new int[]{-50,207});
    states[207] = new State(-106);
    states[208] = new State(new int[]{131,-86,152,-86,165,-86,164,-86,174,-86,167,-86,178,-86,148,-86,142,-86,123,-86,139,-86,181,-86,166,-86,125,-86,153,-91});
    states[209] = new State(new int[]{40,210});
    states[210] = new State(new int[]{131,79,197,103,198,106,43,108,45,110,182,119,183,120,184,121,185,122,126,126,33,128,40,131,194,-123},new int[]{-11,211,-12,72,-100,73,-9,76,-3,77,-4,69,-5,78,-14,80,-15,81,-16,175,-17,174,-18,173,-19,172,-20,171,-21,170,-22,167,-23,158,-24,153,-25,150,-28,102,-29,105,-30,112,-26,113,-27,116,-10,117,-1,118,-32,124,-33,125,-31,130});
    states[211] = new State(new int[]{41,212});
    states[212] = new State(new int[]{131,79,123,27,139,209,181,190,166,196},new int[]{-34,184,-52,213,-41,208,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195,-53,216});
    states[213] = new State(new int[]{153,214});
    states[214] = new State(new int[]{131,79,123,27,139,209,181,190,166,196},new int[]{-34,187,-52,215,-41,208,-40,65,-2,66,-3,68,-4,69,-5,177,-50,178,-54,179,-55,188,-56,189,-57,195,-53,216});
    states[215] = new State(-99);
    states[216] = new State(-92);
    states[217] = new State(-76);
    states[218] = new State(-72);
    states[219] = new State(-30);
    states[220] = new State(new int[]{131,224},new int[]{-90,221});
    states[221] = new State(-3,new int[]{-45,222,-94,223});
    states[222] = new State(-34);
    states[223] = new State(-37);
    states[224] = new State(new int[]{40,225});
    states[225] = new State(new int[]{131,-46,152,-46,165,-46,164,-46,174,-46,167,-46,178,-46,148,-46,142,-46,168,-46,41,-40},new int[]{-69,226,-68,229,-67,230,-48,239,-86,233});
    states[226] = new State(new int[]{41,227});
    states[227] = new State(new int[]{91,43,123,-49,59,-49},new int[]{-95,228,-96,42});
    states[228] = new State(-38);
    states[229] = new State(-39);
    states[230] = new State(new int[]{44,231,41,-41});
    states[231] = new State(-46,new int[]{-48,232,-86,233});
    states[232] = new State(-43);
    states[233] = new State(new int[]{131,237,152,54,165,55,164,56,174,57,167,58,178,60,148,61,142,62,168,238},new int[]{-75,234,-83,236,-77,46,-78,47,-79,48,-76,51,-74,52,-73,53,-72,59});
    states[234] = new State(new int[]{131,40},new int[]{-87,235});
    states[235] = new State(-44);
    states[236] = new State(-45);
    states[237] = new State(-70);
    states[238] = new State(-47);
    states[239] = new State(-42);
    states[240] = new State(-35);
    states[241] = new State(-36);
    states[242] = new State(-32);
    states[243] = new State(-33);
    states[244] = new State(-12);
    states[245] = new State(-14);
    states[246] = new State(-15);
    states[247] = new State(-16);
    states[248] = new State(-17);
    states[249] = new State(-18);
    states[250] = new State(-19);
    states[251] = new State(-20);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-93, new int[]{-92,129});
    rules[2] = new Rule(-92, new int[]{-35});
    rules[3] = new Rule(-94, new int[]{});
    rules[4] = new Rule(-35, new int[]{-49,-70,-62});
    rules[5] = new Rule(-49, new int[]{});
    rules[6] = new Rule(-70, new int[]{});
    rules[7] = new Rule(-62, new int[]{-62,-36});
    rules[8] = new Rule(-62, new int[]{});
    rules[9] = new Rule(-36, new int[]{-37});
    rules[10] = new Rule(-37, new int[]{-38});
    rules[11] = new Rule(-38, new int[]{-84,172,131,-6,-7,-8,-63});
    rules[12] = new Rule(-84, new int[]{-84,-81});
    rules[13] = new Rule(-84, new int[]{});
    rules[14] = new Rule(-81, new int[]{155});
    rules[15] = new Rule(-81, new int[]{150});
    rules[16] = new Rule(-81, new int[]{145});
    rules[17] = new Rule(-81, new int[]{132});
    rules[18] = new Rule(-81, new int[]{170});
    rules[19] = new Rule(-81, new int[]{168});
    rules[20] = new Rule(-81, new int[]{175});
    rules[21] = new Rule(-6, new int[]{});
    rules[22] = new Rule(-7, new int[]{});
    rules[23] = new Rule(-8, new int[]{});
    rules[24] = new Rule(-63, new int[]{123,-64,125});
    rules[25] = new Rule(-64, new int[]{-64,-39});
    rules[26] = new Rule(-64, new int[]{});
    rules[27] = new Rule(-39, new int[]{-46});
    rules[28] = new Rule(-46, new int[]{-47});
    rules[29] = new Rule(-47, new int[]{-85,-89,-51});
    rules[30] = new Rule(-85, new int[]{-85,-82});
    rules[31] = new Rule(-85, new int[]{});
    rules[32] = new Rule(-82, new int[]{155});
    rules[33] = new Rule(-82, new int[]{170});
    rules[34] = new Rule(-89, new int[]{-71,-90,-45});
    rules[35] = new Rule(-71, new int[]{171});
    rules[36] = new Rule(-71, new int[]{-75});
    rules[37] = new Rule(-45, new int[]{-94});
    rules[38] = new Rule(-90, new int[]{131,40,-69,41,-95});
    rules[39] = new Rule(-69, new int[]{-68});
    rules[40] = new Rule(-69, new int[]{});
    rules[41] = new Rule(-68, new int[]{-67});
    rules[42] = new Rule(-67, new int[]{-48});
    rules[43] = new Rule(-67, new int[]{-67,44,-48});
    rules[44] = new Rule(-48, new int[]{-86,-75,-87});
    rules[45] = new Rule(-86, new int[]{-86,-83});
    rules[46] = new Rule(-86, new int[]{});
    rules[47] = new Rule(-83, new int[]{168});
    rules[48] = new Rule(-95, new int[]{-96});
    rules[49] = new Rule(-95, new int[]{});
    rules[50] = new Rule(-96, new int[]{91,93});
    rules[51] = new Rule(-75, new int[]{-77});
    rules[52] = new Rule(-75, new int[]{-76});
    rules[53] = new Rule(-76, new int[]{-74});
    rules[54] = new Rule(-76, new int[]{142});
    rules[55] = new Rule(-97, new int[]{-74});
    rules[56] = new Rule(-97, new int[]{142});
    rules[57] = new Rule(-80, new int[]{-98});
    rules[58] = new Rule(-98, new int[]{131});
    rules[59] = new Rule(-74, new int[]{-73});
    rules[60] = new Rule(-74, new int[]{-72});
    rules[61] = new Rule(-73, new int[]{152});
    rules[62] = new Rule(-73, new int[]{165});
    rules[63] = new Rule(-73, new int[]{164});
    rules[64] = new Rule(-73, new int[]{174});
    rules[65] = new Rule(-73, new int[]{167});
    rules[66] = new Rule(-72, new int[]{178});
    rules[67] = new Rule(-72, new int[]{148});
    rules[68] = new Rule(-77, new int[]{-78});
    rules[69] = new Rule(-78, new int[]{-79,-96});
    rules[70] = new Rule(-79, new int[]{131});
    rules[71] = new Rule(-51, new int[]{-50});
    rules[72] = new Rule(-51, new int[]{59});
    rules[73] = new Rule(-50, new int[]{123,-66,125});
    rules[74] = new Rule(-66, new int[]{-65});
    rules[75] = new Rule(-66, new int[]{});
    rules[76] = new Rule(-65, new int[]{-44});
    rules[77] = new Rule(-65, new int[]{-65,-44});
    rules[78] = new Rule(-44, new int[]{-43});
    rules[79] = new Rule(-44, new int[]{-34});
    rules[80] = new Rule(-43, new int[]{-42,59});
    rules[81] = new Rule(-42, new int[]{-75,-91});
    rules[82] = new Rule(-91, new int[]{-88});
    rules[83] = new Rule(-91, new int[]{-91,44,-88});
    rules[84] = new Rule(-88, new int[]{-87});
    rules[85] = new Rule(-87, new int[]{131,-95});
    rules[86] = new Rule(-34, new int[]{-41});
    rules[87] = new Rule(-34, new int[]{-54});
    rules[88] = new Rule(-34, new int[]{-55});
    rules[89] = new Rule(-34, new int[]{-56});
    rules[90] = new Rule(-34, new int[]{-57});
    rules[91] = new Rule(-52, new int[]{-41});
    rules[92] = new Rule(-52, new int[]{-53});
    rules[93] = new Rule(-41, new int[]{-40});
    rules[94] = new Rule(-41, new int[]{-50});
    rules[95] = new Rule(-40, new int[]{-2,59});
    rules[96] = new Rule(-2, new int[]{-3});
    rules[97] = new Rule(-54, new int[]{139,40,-11,41,-34});
    rules[98] = new Rule(-55, new int[]{139,40,-11,41,-52,153,-34});
    rules[99] = new Rule(-53, new int[]{139,40,-11,41,-52,153,-52});
    rules[100] = new Rule(-56, new int[]{181,40,-11,41,-34});
    rules[101] = new Rule(-57, new int[]{166,-50,-58});
    rules[102] = new Rule(-57, new int[]{166,-50,-59,-61});
    rules[103] = new Rule(-59, new int[]{-58});
    rules[104] = new Rule(-59, new int[]{});
    rules[105] = new Rule(-58, new int[]{-60});
    rules[106] = new Rule(-60, new int[]{162,40,41,-50});
    rules[107] = new Rule(-61, new int[]{173,-50});
    rules[108] = new Rule(-3, new int[]{-4,-99,-11});
    rules[109] = new Rule(-4, new int[]{-5});
    rules[110] = new Rule(-5, new int[]{131});
    rules[111] = new Rule(-99, new int[]{61});
    rules[112] = new Rule(-9, new int[]{-3});
    rules[113] = new Rule(-9, new int[]{-14});
    rules[114] = new Rule(-27, new int[]{-10});
    rules[115] = new Rule(-10, new int[]{-1});
    rules[116] = new Rule(-1, new int[]{182});
    rules[117] = new Rule(-1, new int[]{183});
    rules[118] = new Rule(-1, new int[]{184});
    rules[119] = new Rule(-1, new int[]{185});
    rules[120] = new Rule(-11, new int[]{-12});
    rules[121] = new Rule(-11, new int[]{-9});
    rules[122] = new Rule(-12, new int[]{-100,194,-13});
    rules[123] = new Rule(-100, new int[]{});
    rules[124] = new Rule(-13, new int[]{});
    rules[125] = new Rule(-14, new int[]{-15});
    rules[126] = new Rule(-15, new int[]{-16});
    rules[127] = new Rule(-15, new int[]{-15,196,-16});
    rules[128] = new Rule(-16, new int[]{-17});
    rules[129] = new Rule(-16, new int[]{-16,195,-17});
    rules[130] = new Rule(-17, new int[]{-18});
    rules[131] = new Rule(-17, new int[]{-17,124,-18});
    rules[132] = new Rule(-18, new int[]{-19});
    rules[133] = new Rule(-18, new int[]{-18,94,-19});
    rules[134] = new Rule(-19, new int[]{-20});
    rules[135] = new Rule(-19, new int[]{-19,38,-20});
    rules[136] = new Rule(-20, new int[]{-21});
    rules[137] = new Rule(-20, new int[]{-20,190,-21});
    rules[138] = new Rule(-20, new int[]{-20,193,-21});
    rules[139] = new Rule(-21, new int[]{-22});
    rules[140] = new Rule(-21, new int[]{-21,60,-22});
    rules[141] = new Rule(-21, new int[]{-21,62,-22});
    rules[142] = new Rule(-21, new int[]{-21,192,-22});
    rules[143] = new Rule(-21, new int[]{-21,191,-22});
    rules[144] = new Rule(-21, new int[]{-21,159,-80});
    rules[145] = new Rule(-22, new int[]{-23});
    rules[146] = new Rule(-22, new int[]{-22,199,-23});
    rules[147] = new Rule(-22, new int[]{-22,200,-23});
    rules[148] = new Rule(-22, new int[]{-22,201,-23});
    rules[149] = new Rule(-23, new int[]{-24});
    rules[150] = new Rule(-23, new int[]{-23,43,-24});
    rules[151] = new Rule(-23, new int[]{-23,45,-24});
    rules[152] = new Rule(-24, new int[]{-25});
    rules[153] = new Rule(-24, new int[]{-24,42,-25});
    rules[154] = new Rule(-24, new int[]{-24,47,-25});
    rules[155] = new Rule(-24, new int[]{-24,37,-25});
    rules[156] = new Rule(-25, new int[]{-28});
    rules[157] = new Rule(-25, new int[]{-29});
    rules[158] = new Rule(-25, new int[]{43,-25});
    rules[159] = new Rule(-25, new int[]{45,-25});
    rules[160] = new Rule(-25, new int[]{-30});
    rules[161] = new Rule(-28, new int[]{197,-25});
    rules[162] = new Rule(-29, new int[]{198,-25});
    rules[163] = new Rule(-30, new int[]{-26});
    rules[164] = new Rule(-30, new int[]{126,-25});
    rules[165] = new Rule(-30, new int[]{33,-25});
    rules[166] = new Rule(-30, new int[]{-31});
    rules[167] = new Rule(-26, new int[]{-27});
    rules[168] = new Rule(-26, new int[]{-5});
    rules[169] = new Rule(-26, new int[]{-32});
    rules[170] = new Rule(-26, new int[]{-33});
    rules[171] = new Rule(-32, new int[]{-26,197});
    rules[172] = new Rule(-33, new int[]{-26,198});
    rules[173] = new Rule(-31, new int[]{40,-97,41,-25});
    rules[174] = new Rule(-31, new int[]{40,-80,-101,41,-30});
    rules[175] = new Rule(-31, new int[]{40,-80,-101,41,-12});
    rules[176] = new Rule(-101, new int[]{-101,-102});
    rules[177] = new Rule(-101, new int[]{});
    rules[178] = new Rule(-102, new int[]{38});
    rules[179] = new Rule(-103, new int[]{-11});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> CompilationUnit
#line 110 "parser.y"
                                   {root = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 4: // CompilationUnit -> PackageDeclaration_opt, ImportDeclarations, TypeDeclarations
#line 118 "parser.y"
                                                               { CurrentSemanticValue.stmt = new CompilationUnitDeclaration(ValueStack[ValueStack.Depth-3].stmt,ValueStack[ValueStack.Depth-2].stmts,ValueStack[ValueStack.Depth-1].stmts);  }
#line default
        break;
      case 7: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
#line 130 "parser.y"
                                          { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 8: // TypeDeclarations -> /* empty */
#line 131 "parser.y"
                          { CurrentSemanticValue.stmts = new List<Statement>();}
#line default
        break;
      case 9: // TypeDeclaration -> ClassDeclaration
#line 135 "parser.y"
                                                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 10: // ClassDeclaration -> NormalClassDeclaration
#line 139 "parser.y"
                                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 11: // NormalClassDeclaration -> ClassModifiers, CLASS, IDENTIFIER, TypeParameters_opt, 
               //                           Superclass_opt, Superinterfaces_opt, ClassBody
#line 143 "parser.y"
                                                                                                    {  CurrentSemanticValue.stmt = new ClassDeclaration(ValueStack[ValueStack.Depth-5].name,ValueStack[ValueStack.Depth-7].modfs,ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 12: // ClassModifiers -> ClassModifiers, ClassModifier
#line 147 "parser.y"
                                       { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 13: // ClassModifiers -> /* empty */
#line 148 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 14: // ClassModifier -> PUBLIC
#line 152 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 15: // ClassModifier -> PROTECTED
#line 153 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.PROTECTED; }
#line default
        break;
      case 16: // ClassModifier -> PRIVATE
#line 154 "parser.y"
                        { CurrentSemanticValue.modf = Modifier.PRIVATE; }
#line default
        break;
      case 17: // ClassModifier -> ABSTRACT
#line 155 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.ABSTRACT; }
#line default
        break;
      case 18: // ClassModifier -> STATIC
#line 156 "parser.y"
                       { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 19: // ClassModifier -> FINAL
#line 157 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 20: // ClassModifier -> STRICTFP
#line 158 "parser.y"
                         { CurrentSemanticValue.modf = Modifier.STRICTFP; }
#line default
        break;
      case 21: // TypeParameters_opt -> /* empty */
#line 163 "parser.y"
                                        { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 22: // Superclass_opt -> /* empty */
#line 166 "parser.y"
                                     { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 23: // Superinterfaces_opt -> /* empty */
#line 169 "parser.y"
                                         { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 24: // ClassBody -> '{', ClassBodyDeclarations, '}'
#line 173 "parser.y"
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
#line default
        break;
      case 25: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
#line 180 "parser.y"
                                                 { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 26: // ClassBodyDeclarations -> /* empty */
#line 181 "parser.y"
                          { CurrentSemanticValue.stmts = new List<Statement>(); }
#line default
        break;
      case 27: // ClassBodyDeclaration -> ClassMemberDeclaration
#line 185 "parser.y"
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 28: // ClassMemberDeclaration -> MethodDeclaration
#line 190 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 29: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
#line 195 "parser.y"
                                               { CurrentSemanticValue.stmt = new MethodDeclaration( (string)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[0], ValueStack[ValueStack.Depth-3].modfs, ValueStack[ValueStack.Depth-1].stmt, (AST.Type)ValueStack[ValueStack.Depth-2].arrlst[0], (List<Statement>)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[1]); }
#line default
        break;
      case 30: // MethodModifiers -> MethodModifiers, MethodModifier
#line 199 "parser.y"
                                              { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 31: // MethodModifiers -> /* empty */
#line 200 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 32: // MethodModifier -> PUBLIC
#line 204 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 33: // MethodModifier -> STATIC
#line 205 "parser.y"
                            { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 34: // MethodHeader -> Result, MethodDeclarator, Throws_opt
#line 209 "parser.y"
                                           {CurrentSemanticValue.arrlst = new ArrayList() { ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].arrlst, ValueStack[ValueStack.Depth-1].stmt } ; }
#line default
        break;
      case 35: // Result -> VOID
#line 217 "parser.y"
                     {CurrentSemanticValue.type = new NamedType("VOID"); }
#line default
        break;
      case 36: // Result -> UnannType
#line 218 "parser.y"
                         {CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 37: // Throws_opt -> Empty
#line 222 "parser.y"
                      {CurrentSemanticValue.stmt = null; }
#line default
        break;
      case 38: // MethodDeclarator -> IDENTIFIER, '(', FormalParameterList_Opt, ')', Dims_Opt
#line 227 "parser.y"
                                                        {CurrentSemanticValue.arrlst =  new ArrayList() { ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].stmts, ValueStack[ValueStack.Depth-1] };}
#line default
        break;
      case 39: // FormalParameterList_Opt -> FormalParameterList
#line 232 "parser.y"
                                { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 40: // FormalParameterList_Opt -> /* empty */
#line 233 "parser.y"
                          { CurrentSemanticValue.stmts = null; }
#line default
        break;
      case 41: // FormalParameterList -> FormalParameters
#line 240 "parser.y"
                               { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 42: // FormalParameters -> FormalParameter
#line 244 "parser.y"
                              { CurrentSemanticValue.stmts = new List<Statement> { ValueStack[ValueStack.Depth-1].stmt }; }
#line default
        break;
      case 43: // FormalParameters -> FormalParameters, ',', FormalParameter
#line 245 "parser.y"
                                             { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-3].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 44: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
#line 249 "parser.y"
                                                       { CurrentSemanticValue.stmt = new VariableDeclaration(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 45: // VariableModifiers -> VariableModifiers, VariableModifier
#line 252 "parser.y"
                                           { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 46: // VariableModifiers -> /* empty */
#line 253 "parser.y"
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 47: // VariableModifier -> FINAL
#line 257 "parser.y"
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 48: // Dims_Opt -> Dims
#line 263 "parser.y"
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 49: // Dims_Opt -> /* empty */
#line 264 "parser.y"
                          { }
#line default
        break;
      case 51: // UnannType -> UnannReferenceType
#line 273 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 52: // UnannType -> UnannPrimitiveType
#line 274 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 53: // UnannPrimitiveType -> NumericType
#line 278 "parser.y"
                          { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 54: // UnannPrimitiveType -> BOOLEAN
#line 279 "parser.y"
                       { CurrentSemanticValue.type = new NamedType("BOOLEAN"); }
#line default
        break;
      case 59: // NumericType -> IntegralType
#line 299 "parser.y"
                           { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 60: // NumericType -> FloatingPointType
#line 300 "parser.y"
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 61: // IntegralType -> BYTE
#line 304 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("BYTE");  }
#line default
        break;
      case 62: // IntegralType -> SHORT
#line 305 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("SHORT");  }
#line default
        break;
      case 63: // IntegralType -> INT
#line 306 "parser.y"
                    { CurrentSemanticValue.type = new NamedType("INT");}
#line default
        break;
      case 64: // IntegralType -> LONG
#line 307 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("LONG"); }
#line default
        break;
      case 65: // IntegralType -> CHAR
#line 308 "parser.y"
                     { CurrentSemanticValue.type = new NamedType("CHAR"); }
#line default
        break;
      case 66: // FloatingPointType -> FLOAT
#line 312 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("FLOAT"); }
#line default
        break;
      case 67: // FloatingPointType -> DOUBLE
#line 313 "parser.y"
                      { CurrentSemanticValue.type = new NamedType("DOUBLE"); }
#line default
        break;
      case 68: // UnannReferenceType -> UnannArrayType
#line 317 "parser.y"
                            { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 69: // UnannArrayType -> UnannTypeVariable, Dims
#line 323 "parser.y"
                                  { CurrentSemanticValue.type = new ArrayType(ValueStack[ValueStack.Depth-2].type); }
#line default
        break;
      case 70: // UnannTypeVariable -> IDENTIFIER
#line 327 "parser.y"
                         { CurrentSemanticValue.type = new NamedType(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 71: // MethodBody -> Block
#line 332 "parser.y"
                       { CurrentSemanticValue.stmt= ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 72: // MethodBody -> ';'
#line 333 "parser.y"
                    { CurrentSemanticValue.stmt= null;}
#line default
        break;
      case 73: // Block -> '{', BlockStatements_Opt, '}'
#line 343 "parser.y"
                                      { CurrentSemanticValue.stmt = new BlockStatement(ValueStack[ValueStack.Depth-2].stmts); }
#line default
        break;
      case 74: // BlockStatements_Opt -> BlockStatements
#line 347 "parser.y"
                             { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 75: // BlockStatements_Opt -> /* empty */
#line 348 "parser.y"
                          { CurrentSemanticValue.stmts = null; }
#line default
        break;
      case 76: // BlockStatements -> BlockStatement
#line 352 "parser.y"
                            { CurrentSemanticValue.stmts = new List<Statement> { ValueStack[ValueStack.Depth-1].stmt }; }
#line default
        break;
      case 77: // BlockStatements -> BlockStatements, BlockStatement
#line 353 "parser.y"
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 78: // BlockStatement -> LocalVariableDeclarationStatement
#line 357 "parser.y"
                                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 79: // BlockStatement -> Statement
#line 358 "parser.y"
                         { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 80: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
#line 362 "parser.y"
                                       { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-2].stmt; }
#line default
        break;
      case 81: // LocalVariableDeclaration -> UnannType, VariableDeclaratorList
#line 366 "parser.y"
                                          { CurrentSemanticValue.stmt = new VariableDeclarationList(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].strlst); }
#line default
        break;
      case 82: // VariableDeclaratorList -> VariableDeclarator
#line 372 "parser.y"
                               { CurrentSemanticValue.strlst = new List<string> { ValueStack[ValueStack.Depth-1].name }; }
#line default
        break;
      case 83: // VariableDeclaratorList -> VariableDeclaratorList, ',', VariableDeclarator
#line 373 "parser.y"
                                                    { CurrentSemanticValue.strlst = ValueStack[ValueStack.Depth-3].strlst; CurrentSemanticValue.strlst.Add(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 84: // VariableDeclarator -> VariableDeclaratorId
#line 377 "parser.y"
                                 { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 85: // VariableDeclaratorId -> IDENTIFIER, Dims_Opt
#line 381 "parser.y"
                                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 86: // Statement -> StatementWithoutTrailingSubstatement
#line 385 "parser.y"
                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 87: // Statement -> IfThenStatement
#line 386 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 88: // Statement -> IfThenElseStatement
#line 387 "parser.y"
                                { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 89: // Statement -> WhileStatement
#line 388 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 90: // Statement -> TryStatement
#line 389 "parser.y"
                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 91: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 393 "parser.y"
                                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 92: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 394 "parser.y"
                                       {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 93: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 399 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 94: // StatementWithoutTrailingSubstatement -> Block
#line 400 "parser.y"
                      { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 95: // ExpressionStatement -> StatementExpression, ';'
#line 404 "parser.y"
                                   { CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 96: // StatementExpression -> Assignment
#line 408 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 97: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 412 "parser.y"
                                         { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt,null); }
#line default
        break;
      case 98: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
               //                        Statement
#line 417 "parser.y"
                                                               { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 99: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
               //                                 ELSE, StatementNoShortIf
#line 421 "parser.y"
                                                                      { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 100: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 425 "parser.y"
                                           { CurrentSemanticValue.stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 101: // TryStatement -> TRY, Block, Catches
#line 429 "parser.y"
                               { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt, null); }
#line default
        break;
      case 102: // TryStatement -> TRY, Block, Catches_opt, Finally
#line 430 "parser.y"
                                        { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 103: // Catches_opt -> Catches
#line 435 "parser.y"
                       { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 104: // Catches_opt -> /* empty */
#line 436 "parser.y"
                          { }
#line default
        break;
      case 105: // Catches -> CatchClause
#line 440 "parser.y"
                          { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 106: // CatchClause -> CATCH, '(', ')', Block
#line 447 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 107: // Finally -> FINALLY, Block
#line 465 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 108: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 476 "parser.y"
                                                 { CurrentSemanticValue.expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 109: // LeftHandSide -> ExpressionName
#line 480 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 110: // ExpressionName -> IDENTIFIER
#line 484 "parser.y"
                         { CurrentSemanticValue.expr = new VariableExpression(ValueStack[ValueStack.Depth-1].name);  }
#line default
        break;
      case 112: // AssignmentExpression -> Assignment
#line 492 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 113: // AssignmentExpression -> ConditionalExpression
#line 493 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 114: // Primary -> PrimaryNoNewArray
#line 497 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 115: // PrimaryNoNewArray -> Literal
#line 501 "parser.y"
                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 116: // Literal -> IntegerLiteral
#line 505 "parser.y"
                            { CurrentSemanticValue.expr = new IntegerLiteralExpression(ValueStack[ValueStack.Depth-1].num); }
#line default
        break;
      case 117: // Literal -> FloatingPointLiteral
#line 506 "parser.y"
                                 { CurrentSemanticValue.expr = new FloatingPointLiteralExpression(ValueStack[ValueStack.Depth-1].floatnum); }
#line default
        break;
      case 118: // Literal -> BooleanLiteral
#line 507 "parser.y"
                            { CurrentSemanticValue.expr = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].boolval); }
#line default
        break;
      case 119: // Literal -> CharacterLiteral
#line 508 "parser.y"
                              { CurrentSemanticValue.expr = new CharacterLiteralExpression(ValueStack[ValueStack.Depth-1].charval); }
#line default
        break;
      case 120: // Expression -> LambdaExpression
#line 514 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 121: // Expression -> AssignmentExpression
#line 515 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 122: // LambdaExpression -> LambdaParameters, ARROW, LambdaBody
#line 519 "parser.y"
                                           { }
#line default
        break;
      case 123: // LambdaParameters -> /* empty */
#line 523 "parser.y"
                          { }
#line default
        break;
      case 124: // LambdaBody -> /* empty */
#line 527 "parser.y"
                          { }
#line default
        break;
      case 125: // ConditionalExpression -> ConditionalOrExpression
#line 531 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 126: // ConditionalOrExpression -> ConditionalAndExpression
#line 537 "parser.y"
                                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 127: // ConditionalOrExpression -> ConditionalOrExpression, LOGICAL_OR, 
                //                            ConditionalAndExpression
#line 538 "parser.y"
                                                                { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "||", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 128: // ConditionalAndExpression -> InclusiveOrExpression
#line 542 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 129: // ConditionalAndExpression -> ConditionalAndExpression, LOGICAL_AND, 
                //                             InclusiveOrExpression
#line 543 "parser.y"
                                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 130: // InclusiveOrExpression -> ExclusiveOrExpression
#line 547 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 131: // InclusiveOrExpression -> InclusiveOrExpression, '|', ExclusiveOrExpression
#line 548 "parser.y"
                                                       { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "|", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 132: // ExclusiveOrExpression -> AndExpression
#line 552 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 133: // ExclusiveOrExpression -> ExclusiveOrExpression, '^', AndExpression
#line 553 "parser.y"
                                                 { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "^", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 134: // AndExpression -> EqualityExpression
#line 557 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 135: // AndExpression -> AndExpression, '&', EqualityExpression
#line 558 "parser.y"
                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 136: // EqualityExpression -> RelationalExpression
#line 562 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 137: // EqualityExpression -> EqualityExpression, EQUAL, RelationalExpression
#line 563 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "==", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 138: // EqualityExpression -> EqualityExpression, NOT_EQUAL, RelationalExpression
#line 564 "parser.y"
                                                         { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "!=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 139: // RelationalExpression -> ShiftExpression
#line 568 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 140: // RelationalExpression -> RelationalExpression, '<', ShiftExpression
#line 569 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 141: // RelationalExpression -> RelationalExpression, '>', ShiftExpression
#line 570 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 142: // RelationalExpression -> RelationalExpression, LESS_THAN_OR_EQUAL, 
                //                         ShiftExpression
#line 571 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 143: // RelationalExpression -> RelationalExpression, GREATER_OR_EQUAL, ShiftExpression
#line 572 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 144: // RelationalExpression -> RelationalExpression, INSTANCEOF, ReferenceType
#line 573 "parser.y"
                                                      { CurrentSemanticValue.expr = new InstanceOfExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 145: // ShiftExpression -> AdditiveExpression
#line 577 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 146: // ShiftExpression -> ShiftExpression, LEFT_SHIFT, AdditiveExpression
#line 578 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 147: // ShiftExpression -> ShiftExpression, SIGNED_RIGHT_SHIFT, AdditiveExpression
#line 579 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 148: // ShiftExpression -> ShiftExpression, UNSIGNED_RIGHT_SHIFT, AdditiveExpression
#line 580 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 149: // AdditiveExpression -> MultiplicativeExpression
#line 584 "parser.y"
                                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 150: // AdditiveExpression -> AdditiveExpression, '+', MultiplicativeExpression
#line 585 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 151: // AdditiveExpression -> AdditiveExpression, '-', MultiplicativeExpression
#line 586 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 153: // MultiplicativeExpression -> MultiplicativeExpression, '*', UnaryExpression
#line 591 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "*", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 154: // MultiplicativeExpression -> MultiplicativeExpression, '/', UnaryExpression
#line 592 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "/", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 155: // MultiplicativeExpression -> MultiplicativeExpression, '%', UnaryExpression
#line 593 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "%", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 156: // UnaryExpression -> PreIncrementExpression
#line 597 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 157: // UnaryExpression -> PreDecrementExpression
#line 598 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 158: // UnaryExpression -> '+', UnaryExpression
#line 599 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 159: // UnaryExpression -> '-', UnaryExpression
#line 600 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 160: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 601 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 161: // PreIncrementExpression -> INCREMENT, UnaryExpression
#line 609 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("++", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 162: // PreDecrementExpression -> DECREMENT, UnaryExpression
#line 613 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("--", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 163: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 617 "parser.y"
                                { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 164: // UnaryExpressionNotPlusMinus -> '~', UnaryExpression
#line 618 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("~", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 165: // UnaryExpressionNotPlusMinus -> '!', UnaryExpression
#line 619 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("!", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 166: // UnaryExpressionNotPlusMinus -> CastExpression
#line 620 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 167: // PostfixExpression -> Primary
#line 624 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 168: // PostfixExpression -> ExpressionName
#line 625 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 169: // PostfixExpression -> PostIncrementExpression
#line 626 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 170: // PostfixExpression -> PostDecrementExpression
#line 627 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 171: // PostIncrementExpression -> PostfixExpression, INCREMENT
#line 631 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "++"); }
#line default
        break;
      case 172: // PostDecrementExpression -> PostfixExpression, DECREMENT
#line 635 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "--"); }
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

#line 658 "parser.y"

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
