// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
<<<<<<< HEAD
// Machine:  VDI-VL17-006
// DateTime: 27/05/2017 4:40:08 AM
// UserName: n9768653
// Input file <parser.y - 27/05/2017 4:40:07 AM>
=======
// Machine:  VDI-VL17-035
// DateTime: 30/05/2017 1:25:44 AM
// UserName: n9540377
// Input file <parser.y - 30/05/2017 1:23:08 AM>
>>>>>>> master

// options: conflicts lines gplex conflicts

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.Collections;
using IFN660_Java_ECMAScript.AST;

namespace IFN660_Java_ECMAScript
{
public enum Tokens {error=128,EOF=129,NUMBER=130,IDENTIFIER=131,ABSTRACT=132,
    CONTINUE=133,FOR=134,NEW=135,SWITCH=136,ASSERT=137,DEFAULT=138,
    IF=139,PACKAGE=140,SYNCHRONIZED=141,BOOLEAN=142,DO=143,GOTO=144,
    PRIVATE=145,THIS=146,BREAK=147,DOUBLE=148,IMPLEMENTS=149,PROTECTED=150,
    THROW=151,BYTE=152,ELSE=153,IMPORT=154,PUBLIC=155,THROWS=156,
    CASE=157,ENUM=158,INSTANCEOF=159,RETURN=160,TRANSIENT=161,CATCH=162,
    EXTENDS=163,INT=164,SHORT=165,TRY=166,CHAR=167,FINAL=168,
    INTERFACE=169,STATIC=170,VOID=171,CLASS=172,FINALLY=173,LONG=174,
    STRICTFP=175,VOLATILE=176,CONST=177,FLOAT=178,NATIVE=179,SUPER=180,
    WHILE=181,IntegerLiteral=182,FloatingPointLiteral=183,BooleanLiteral=184,CharacterLiteral=185,StringLiteral=186,
    NullLiteral=187,ELLIPSIS=188,DOUBLE_COLON=189,EQUAL=190,GREATER_OR_EQUAL=191,LESS_THAN_OR_EQUAL=192,
    NOT_EQUAL=193,ARROW=194,LOGICAL_AND=195,LOGICAL_OR=196,INCREMENT=197,DECREMENT=198,
    LEFT_SHIFT=199,SIGNED_RIGHT_SHIFT=200,UNSIGNED_RIGHT_SHIFT=201,ADDITION_ASSIGNMENT=202,SUBTRACTION_ASSIGNMENT=203,MULTIPLICATION_ASSIGNMENT=204,
    DIVISION_ASSIGNMENT=205,MODULUS_ASSIGNMENT=206,BITWISE_AND_ASSIGNMENT=207,BITWISE_OR_ASSIGNMENT=208,BITWISE_XOR_ASSIGNMENT=209,LEFT_SHIFT_ASSIGNMENT=210,
    UNSIGNED_RIGHT_SHIFT_ASSIGNMENT=211,SIGNED_RIGHT_SHIFT_ASSIGNMENT=212};

public struct ValueType
#line 11 "parser.y"
{
    public ILiteral num;
	public ILiteral floatnum;
	public bool boolval;
	public char charval;
    public string name;
	public Statement stmt;
	public List<Statement> stmts;
	public Expression expr;
	public AST.Type type;
	public Modifier modf;
	public List<Modifier> modfs;
	public ArrayList arrlst;
	public List<string> strlst;
	public List<Expression> exprlst;
	public VariableDeclarator vardec;
	public List<VariableDeclarator> vardeclst;
}
#line default
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
public class Parser: ShiftReduceParser<ValueType, LexLocation>
{
<<<<<<< HEAD
  // Verbatim content from parser.y - 27/05/2017 4:40:07 AM
#line 7 "parser.y"
public static Statement root;
#line default
  // End verbatim content from parser.y - 27/05/2017 4:40:07 AM
=======
  // Verbatim content from parser.y - 30/05/2017 1:23:08 AM
#line 7 "parser.y"
public static Statement root;
#line default
  // End verbatim content from parser.y - 30/05/2017 1:23:08 AM
>>>>>>> master

#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
<<<<<<< HEAD
  private static Rule[] rules = new Rule[252];
  private static State[] states = new State[393];
=======
  private static Rule[] rules = new Rule[237];
  private static State[] states = new State[351];
>>>>>>> master
  private static string[] nonTerms = new string[] {
      "Literal", "StatementExpression", "Assignment", "LeftHandSide", "ExpressionName", 
      "LocalVariableDeclaration", "TypeParameters_opt", "Superclass_opt", "Superinterfaces_opt", 
      "AssignmentExpression", "PrimaryNoNewArray", "Expression", "LambdaExpression", 
      "LambdaBody", "ConditionalExpression", "ConditionalOrExpression", "ConditionalAndExpression", 
      "InclusiveOrExpression", "ExclusiveOrExpression", "AndExpression", "EqualityExpression", 
      "RelationalExpression", "ShiftExpression", "AdditiveExpression", "MultiplicativeExpression", 
      "UnaryExpression", "PostfixExpression", "Primary", "PreIncrementExpression", 
      "PreDecrementExpression", "UnaryExpressionNotPlusMinus", "ConstantExpression", 
      "CastExpression", "PostIncrementExpression", "PostDecrementExpression", 
      "MethodInvocation", "FormalParameter", "VariableInitialiser", "ArgumentList", 
      "ArgumentList_opt", "FormalParameters", "FormalParameterList", "FormalParameterList_Opt", 
      "Statement", "CompilationUnit", "TypeDeclaration", "ClassDeclaration", 
      "NormalClassDeclaration", "ClassBodyDeclaration", "ExpressionStatement", 
      "StatementWithoutTrailingSubstatement", "LocalVariableDeclarationStatement", 
      "BlockStatement", "Throws_opt", "ClassMemberDeclaration", "MethodDeclaration", 
      "PackageDeclaration_opt", "Block", "MethodBody", "StatementNoShortIf", 
      "IfThenElseStatementNoShortIf", "IfThenStatement", "IfThenElseStatement", 
      "WhileStatement", "TryStatement", "Catches", "Catches_opt", "CatchClause", 
      "Finally", "DoStatement", "ThrowStatement", "SynchronizedStatement", "SwitchStatement", 
      "SwitchBlockStatementGroup", "SwitchLabel", "AssertStatement", "LabeledStatement", 
      "BreakStatement", "ContinueStatement", "ReturnStatement", "ImportDeclaration", 
<<<<<<< HEAD
      "ForUpdate", "BasicForStatement", "BasicForStatementNoShortIf", "ForStatement", 
      "ForStatementNoShortIf", "EnhancedForStatementNoShortIf", "EnhancedForStatement", 
      "ForInit", "TypeDeclarations", "ClassBody", "ClassBodyDeclarations", "BlockStatements", 
=======
      "TypeDeclarations", "ClassBody", "ClassBodyDeclarations", "BlockStatements", 
>>>>>>> master
      "BlockStatements_Opt", "ImportDeclarations", "SwitchLabels", "SwitchBlockStatementGroups", 
      "SwitchBlock", "Result", "FloatingPointType", "IntegralType", "NumericType", 
      "UnannType", "UnannPrimitiveType", "UnannReferenceType", "UnannArrayType", 
      "UnannTypeVariable", "ReferenceType", "PrimitiveType", "ClassModifier", 
      "MethodModifier", "VariableModifier", "ClassModifiers", "MethodModifiers", 
      "VariableModifiers", "VariableDeclaratorId", "PackageOrTypeName", "MethodName", 
      "MethodHeader", "MethodDeclarator", "VariableDeclarator", "VariableDeclaratorList", 
      "Identifier_opt", "Expression_opt", "TypeName", "Program", "$accept", "Empty", 
<<<<<<< HEAD
      "Dims_Opt", "Dims", "TypeVariable", "StatementExpressionList", "AssignmentOperator", 
      "LambdaParameters", "AdditionalBounds", "AdditionalBound", };

  static Parser() {
    states[0] = new State(-5,new int[]{-126,1,-45,3,-57,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{154,377,172,-8,155,-8,150,-8,145,-8,132,-8,170,-8,168,-8,175,-8,129,-8},new int[]{-95,5,-81,392});
    states[5] = new State(new int[]{154,377,172,-16,155,-16,150,-16,145,-16,132,-16,170,-16,168,-16,175,-16,129,-16},new int[]{-90,6,-81,376});
    states[6] = new State(new int[]{129,-4,172,-21,155,-21,150,-21,145,-21,132,-21,170,-21,168,-21,175,-21},new int[]{-46,7,-47,8,-48,9,-113,10});
    states[7] = new State(-15);
    states[8] = new State(-17);
    states[9] = new State(-18);
    states[10] = new State(new int[]{172,11,155,369,150,370,145,371,132,372,170,373,168,374,175,375},new int[]{-110,368});
=======
      "Dims_Opt", "Dims", "TypeVariable", "AssignmentOperator", "LambdaParameters", 
      "AdditionalBounds", "AdditionalBound", };

  static Parser() {
    states[0] = new State(-5,new int[]{-118,1,-45,3,-57,4});
    states[1] = new State(new int[]{129,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(new int[]{154,335,172,-8,155,-8,150,-8,145,-8,132,-8,170,-8,168,-8,175,-8,129,-8},new int[]{-87,5,-81,350});
    states[5] = new State(new int[]{154,335,172,-16,155,-16,150,-16,145,-16,132,-16,170,-16,168,-16,175,-16,129,-16},new int[]{-82,6,-81,334});
    states[6] = new State(new int[]{129,-4,172,-21,155,-21,150,-21,145,-21,132,-21,170,-21,168,-21,175,-21},new int[]{-46,7,-47,8,-48,9,-105,10});
    states[7] = new State(-15);
    states[8] = new State(-17);
    states[9] = new State(-18);
    states[10] = new State(new int[]{172,11,155,327,150,328,145,329,132,330,170,331,168,332,175,333},new int[]{-102,326});
>>>>>>> master
    states[11] = new State(new int[]{131,12});
    states[12] = new State(-29,new int[]{-7,13});
    states[13] = new State(-30,new int[]{-8,14});
    states[14] = new State(-31,new int[]{-9,15});
<<<<<<< HEAD
    states[15] = new State(new int[]{123,17},new int[]{-91,16});
    states[16] = new State(-19);
    states[17] = new State(-34,new int[]{-92,18});
    states[18] = new State(new int[]{125,19,171,-39,131,-39,152,-39,165,-39,164,-39,174,-39,167,-39,178,-39,148,-39,142,-39,155,-39,170,-39},new int[]{-49,20,-55,21,-56,22,-114,23});
=======
    states[15] = new State(new int[]{123,17},new int[]{-83,16});
    states[16] = new State(-19);
    states[17] = new State(-34,new int[]{-84,18});
    states[18] = new State(new int[]{125,19,171,-39,131,-39,152,-39,165,-39,164,-39,174,-39,167,-39,178,-39,148,-39,142,-39,155,-39,170,-39},new int[]{-49,20,-55,21,-56,22,-106,23});
>>>>>>> master
    states[19] = new State(-32);
    states[20] = new State(-33);
    states[21] = new State(-35);
    states[22] = new State(-36);
<<<<<<< HEAD
    states[23] = new State(new int[]{171,364,131,305,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,155,366,170,367},new int[]{-119,24,-111,346,-99,347,-103,365,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156});
    states[24] = new State(new int[]{123,27,59,345},new int[]{-59,25,-58,26});
    states[25] = new State(-37);
    states[26] = new State(-80);
    states[27] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283,125,-84},new int[]{-94,28,-93,30,-53,336,-52,32,-6,33,-103,35,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[28] = new State(new int[]{125,29});
    states[29] = new State(-82);
    states[30] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283,125,-83},new int[]{-53,31,-52,32,-6,33,-103,35,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
=======
    states[23] = new State(new int[]{171,322,131,319,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,155,324,170,325},new int[]{-111,24,-103,301,-91,302,-95,323,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156});
    states[24] = new State(new int[]{123,27,59,300},new int[]{-59,25,-58,26});
    states[25] = new State(-37);
    states[26] = new State(-80);
    states[27] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,125,-84},new int[]{-86,28,-85,30,-53,291,-52,32,-6,33,-95,35,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[28] = new State(new int[]{125,29});
    states[29] = new State(-82);
    states[30] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,125,-83},new int[]{-53,31,-52,32,-6,33,-95,35,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
>>>>>>> master
    states[31] = new State(-86);
    states[32] = new State(-87);
    states[33] = new State(new int[]{59,34});
    states[34] = new State(-89);
<<<<<<< HEAD
    states[35] = new State(new int[]{131,170},new int[]{-122,36,-121,175,-116,39});
    states[36] = new State(new int[]{44,37,59,-90});
    states[37] = new State(new int[]{131,170},new int[]{-121,38,-116,39});
    states[38] = new State(-92);
    states[39] = new State(new int[]{61,40,44,-93,59,-93});
    states[40] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-38,41,-12,42,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[41] = new State(-94);
    states[42] = new State(-95);
    states[43] = new State(-194);
    states[44] = new State(new int[]{194,45});
    states[45] = new State(-198,new int[]{-14,46});
    states[46] = new State(-196);
    states[47] = new State(-195);
    states[48] = new State(-183);
    states[49] = new State(new int[]{61,169},new int[]{-133,50});
    states[50] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,51,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[51] = new State(-179);
    states[52] = new State(new int[]{61,-180,197,-242,198,-242,42,-242,47,-242,37,-242,43,-242,45,-242,199,-242,200,-242,201,-242,60,-242,62,-242,192,-242,191,-242,159,-242,190,-242,193,-242,38,-242,94,-242,124,-242,195,-242,196,-242,44,-242,59,-242,41,-242,58,-242});
    states[53] = new State(new int[]{61,-181,197,-181,198,-181,42,-181,47,-181,37,-181,43,-181,45,-181,199,-181,200,-181,201,-181,60,-181,62,-181,192,-181,191,-181,159,-181,190,-181,193,-181,38,-181,94,-181,124,-181,195,-181,196,-181,44,-181,59,-181,41,-181,58,-181,40,-155,46,-153});
    states[54] = new State(-184);
    states[55] = new State(new int[]{196,56,44,-199,59,-199,41,-199,58,-199});
    states[56] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-17,57,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[57] = new State(new int[]{195,58,196,-201,44,-201,59,-201,41,-201,58,-201});
    states[58] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-18,59,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[59] = new State(new int[]{124,60,195,-203,196,-203,44,-203,59,-203,41,-203,58,-203});
    states[60] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-19,61,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[61] = new State(new int[]{94,62,124,-205,195,-205,196,-205,44,-205,59,-205,41,-205,58,-205});
    states[62] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-20,63,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[63] = new State(new int[]{38,64,94,-207,124,-207,195,-207,196,-207,44,-207,59,-207,41,-207,58,-207});
    states[64] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-21,65,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[65] = new State(new int[]{190,66,193,112,38,-209,94,-209,124,-209,195,-209,196,-209,44,-209,59,-209,41,-209,58,-209});
    states[66] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-22,67,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[67] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-211,193,-211,38,-211,94,-211,124,-211,195,-211,196,-211,44,-211,59,-211,41,-211,58,-211});
    states[68] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,69,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[69] = new State(new int[]{199,70,200,116,201,132,60,-214,62,-214,192,-214,191,-214,159,-214,190,-214,193,-214,38,-214,94,-214,124,-214,195,-214,196,-214,44,-214,59,-214,41,-214,58,-214});
    states[70] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,71,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[71] = new State(new int[]{43,72,45,118,199,-220,200,-220,201,-220,60,-220,62,-220,192,-220,191,-220,159,-220,190,-220,193,-220,38,-220,94,-220,124,-220,195,-220,196,-220,44,-220,59,-220,41,-220,58,-220});
    states[72] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-25,73,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[73] = new State(new int[]{42,74,47,120,37,135,43,-224,45,-224,199,-224,200,-224,201,-224,60,-224,62,-224,192,-224,191,-224,159,-224,190,-224,193,-224,38,-224,94,-224,124,-224,195,-224,196,-224,44,-224,59,-224,41,-224,58,-224});
    states[74] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,75,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[75] = new State(-227);
    states[76] = new State(-230);
    states[77] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,78,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[78] = new State(-235);
    states[79] = new State(-231);
    states[80] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,81,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[81] = new State(-236);
    states[82] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,83,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[83] = new State(-232);
    states[84] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,85,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[85] = new State(-233);
    states[86] = new State(-234);
    states[87] = new State(new int[]{197,88,198,89,42,-237,47,-237,37,-237,43,-237,45,-237,199,-237,200,-237,201,-237,60,-237,62,-237,192,-237,191,-237,159,-237,190,-237,193,-237,38,-237,94,-237,124,-237,195,-237,196,-237,44,-237,59,-237,41,-237,58,-237});
    states[88] = new State(-245);
    states[89] = new State(-246);
    states[90] = new State(-241);
    states[91] = new State(-185);
    states[92] = new State(-186);
    states[93] = new State(-188);
    states[94] = new State(-189);
    states[95] = new State(-190);
    states[96] = new State(-191);
    states[97] = new State(-192);
    states[98] = new State(-193);
    states[99] = new State(-187);
    states[100] = new State(new int[]{40,101});
    states[101] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197,41,-157},new int[]{-40,102,-39,104,-12,128,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[102] = new State(new int[]{41,103});
    states[103] = new State(-151);
    states[104] = new State(new int[]{44,105,41,-156});
    states[105] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,106,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[106] = new State(-158);
    states[107] = new State(new int[]{195,58,196,-200,44,-200,59,-200,41,-200,58,-200});
    states[108] = new State(new int[]{124,60,195,-202,196,-202,44,-202,59,-202,41,-202,58,-202});
    states[109] = new State(new int[]{94,62,124,-204,195,-204,196,-204,44,-204,59,-204,41,-204,58,-204});
    states[110] = new State(new int[]{38,64,94,-206,124,-206,195,-206,196,-206,44,-206,59,-206,41,-206,58,-206});
    states[111] = new State(new int[]{190,66,193,112,38,-208,94,-208,124,-208,195,-208,196,-208,44,-208,59,-208,41,-208,58,-208});
    states[112] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-22,113,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[113] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-212,193,-212,38,-212,94,-212,124,-212,195,-212,196,-212,44,-212,59,-212,41,-212,58,-212});
    states[114] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,115,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[115] = new State(new int[]{199,70,200,116,201,132,60,-215,62,-215,192,-215,191,-215,159,-215,190,-215,193,-215,38,-215,94,-215,124,-215,195,-215,196,-215,44,-215,59,-215,41,-215,58,-215});
    states[116] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,117,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[117] = new State(new int[]{43,72,45,118,199,-221,200,-221,201,-221,60,-221,62,-221,192,-221,191,-221,159,-221,190,-221,193,-221,38,-221,94,-221,124,-221,195,-221,196,-221,44,-221,59,-221,41,-221,58,-221});
    states[118] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-25,119,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[119] = new State(new int[]{42,74,47,120,37,135,43,-225,45,-225,199,-225,200,-225,201,-225,60,-225,62,-225,192,-225,191,-225,159,-225,190,-225,193,-225,38,-225,94,-225,124,-225,195,-225,196,-225,44,-225,59,-225,41,-225,58,-225});
    states[120] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,121,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[121] = new State(-228);
    states[122] = new State(new int[]{46,123});
    states[123] = new State(new int[]{131,124});
    states[124] = new State(new int[]{40,125,46,-154});
    states[125] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197,41,-157},new int[]{-40,126,-39,104,-12,128,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[126] = new State(new int[]{41,127});
    states[127] = new State(-152);
    states[128] = new State(-159);
    states[129] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-210,193,-210,38,-210,94,-210,124,-210,195,-210,196,-210,44,-210,59,-210,41,-210,58,-210});
    states[130] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,131,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[131] = new State(new int[]{199,70,200,116,201,132,60,-216,62,-216,192,-216,191,-216,159,-216,190,-216,193,-216,38,-216,94,-216,124,-216,195,-216,196,-216,44,-216,59,-216,41,-216,58,-216});
    states[132] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,133,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[133] = new State(new int[]{43,72,45,118,199,-222,200,-222,201,-222,60,-222,62,-222,192,-222,191,-222,159,-222,190,-222,193,-222,38,-222,94,-222,124,-222,195,-222,196,-222,44,-222,59,-222,41,-222,58,-222});
    states[134] = new State(new int[]{42,74,47,120,37,135,43,-223,45,-223,199,-223,200,-223,201,-223,60,-223,62,-223,192,-223,191,-223,159,-223,190,-223,193,-223,38,-223,94,-223,124,-223,195,-223,196,-223,44,-223,59,-223,41,-223,58,-223});
    states[135] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,136,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[136] = new State(-229);
    states[137] = new State(-242);
    states[138] = new State(-243);
    states[139] = new State(-244);
    states[140] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,141,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[141] = new State(-238);
    states[142] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,143,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[143] = new State(-239);
    states[144] = new State(-240);
    states[145] = new State(new int[]{152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,159},new int[]{-109,146,-102,149,-101,150,-100,156});
    states[146] = new State(new int[]{41,147});
    states[147] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,148,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[148] = new State(-247);
=======
    states[35] = new State(new int[]{131,170},new int[]{-114,36,-113,175,-108,39});
    states[36] = new State(new int[]{44,37,59,-90});
    states[37] = new State(new int[]{131,170},new int[]{-113,38,-108,39});
    states[38] = new State(-92);
    states[39] = new State(new int[]{61,40,44,-93,59,-93});
    states[40] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-38,41,-12,42,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[41] = new State(-94);
    states[42] = new State(-95);
    states[43] = new State(-179);
    states[44] = new State(new int[]{194,45});
    states[45] = new State(-183,new int[]{-14,46});
    states[46] = new State(-181);
    states[47] = new State(-180);
    states[48] = new State(-168);
    states[49] = new State(new int[]{61,169},new int[]{-124,50});
    states[50] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,51,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[51] = new State(-164);
    states[52] = new State(new int[]{61,-165,197,-227,198,-227,42,-227,47,-227,37,-227,43,-227,45,-227,199,-227,200,-227,201,-227,60,-227,62,-227,192,-227,191,-227,159,-227,190,-227,193,-227,38,-227,94,-227,124,-227,195,-227,196,-227,44,-227,59,-227,41,-227,58,-227});
    states[53] = new State(new int[]{61,-166,197,-166,198,-166,42,-166,47,-166,37,-166,43,-166,45,-166,199,-166,200,-166,201,-166,60,-166,62,-166,192,-166,191,-166,159,-166,190,-166,193,-166,38,-166,94,-166,124,-166,195,-166,196,-166,44,-166,59,-166,41,-166,58,-166,40,-140,46,-138});
    states[54] = new State(-169);
    states[55] = new State(new int[]{196,56,44,-184,59,-184,41,-184,58,-184});
    states[56] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-17,57,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[57] = new State(new int[]{195,58,196,-186,44,-186,59,-186,41,-186,58,-186});
    states[58] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-18,59,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[59] = new State(new int[]{124,60,195,-188,196,-188,44,-188,59,-188,41,-188,58,-188});
    states[60] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-19,61,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[61] = new State(new int[]{94,62,124,-190,195,-190,196,-190,44,-190,59,-190,41,-190,58,-190});
    states[62] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-20,63,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[63] = new State(new int[]{38,64,94,-192,124,-192,195,-192,196,-192,44,-192,59,-192,41,-192,58,-192});
    states[64] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-21,65,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[65] = new State(new int[]{190,66,193,112,38,-194,94,-194,124,-194,195,-194,196,-194,44,-194,59,-194,41,-194,58,-194});
    states[66] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-22,67,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[67] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-196,193,-196,38,-196,94,-196,124,-196,195,-196,196,-196,44,-196,59,-196,41,-196,58,-196});
    states[68] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,69,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[69] = new State(new int[]{199,70,200,116,201,132,60,-199,62,-199,192,-199,191,-199,159,-199,190,-199,193,-199,38,-199,94,-199,124,-199,195,-199,196,-199,44,-199,59,-199,41,-199,58,-199});
    states[70] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,71,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[71] = new State(new int[]{43,72,45,118,199,-205,200,-205,201,-205,60,-205,62,-205,192,-205,191,-205,159,-205,190,-205,193,-205,38,-205,94,-205,124,-205,195,-205,196,-205,44,-205,59,-205,41,-205,58,-205});
    states[72] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-25,73,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[73] = new State(new int[]{42,74,47,120,37,135,43,-209,45,-209,199,-209,200,-209,201,-209,60,-209,62,-209,192,-209,191,-209,159,-209,190,-209,193,-209,38,-209,94,-209,124,-209,195,-209,196,-209,44,-209,59,-209,41,-209,58,-209});
    states[74] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,75,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[75] = new State(-212);
    states[76] = new State(-215);
    states[77] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,78,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[78] = new State(-220);
    states[79] = new State(-216);
    states[80] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,81,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[81] = new State(-221);
    states[82] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,83,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[83] = new State(-217);
    states[84] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,85,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[85] = new State(-218);
    states[86] = new State(-219);
    states[87] = new State(new int[]{197,88,198,89,42,-222,47,-222,37,-222,43,-222,45,-222,199,-222,200,-222,201,-222,60,-222,62,-222,192,-222,191,-222,159,-222,190,-222,193,-222,38,-222,94,-222,124,-222,195,-222,196,-222,44,-222,59,-222,41,-222,58,-222});
    states[88] = new State(-230);
    states[89] = new State(-231);
    states[90] = new State(-226);
    states[91] = new State(-170);
    states[92] = new State(-171);
    states[93] = new State(-173);
    states[94] = new State(-174);
    states[95] = new State(-175);
    states[96] = new State(-176);
    states[97] = new State(-177);
    states[98] = new State(-178);
    states[99] = new State(-172);
    states[100] = new State(new int[]{40,101});
    states[101] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182,41,-142},new int[]{-40,102,-39,104,-12,128,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[102] = new State(new int[]{41,103});
    states[103] = new State(-136);
    states[104] = new State(new int[]{44,105,41,-141});
    states[105] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,106,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[106] = new State(-143);
    states[107] = new State(new int[]{195,58,196,-185,44,-185,59,-185,41,-185,58,-185});
    states[108] = new State(new int[]{124,60,195,-187,196,-187,44,-187,59,-187,41,-187,58,-187});
    states[109] = new State(new int[]{94,62,124,-189,195,-189,196,-189,44,-189,59,-189,41,-189,58,-189});
    states[110] = new State(new int[]{38,64,94,-191,124,-191,195,-191,196,-191,44,-191,59,-191,41,-191,58,-191});
    states[111] = new State(new int[]{190,66,193,112,38,-193,94,-193,124,-193,195,-193,196,-193,44,-193,59,-193,41,-193,58,-193});
    states[112] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-22,113,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[113] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-197,193,-197,38,-197,94,-197,124,-197,195,-197,196,-197,44,-197,59,-197,41,-197,58,-197});
    states[114] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,115,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[115] = new State(new int[]{199,70,200,116,201,132,60,-200,62,-200,192,-200,191,-200,159,-200,190,-200,193,-200,38,-200,94,-200,124,-200,195,-200,196,-200,44,-200,59,-200,41,-200,58,-200});
    states[116] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,117,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[117] = new State(new int[]{43,72,45,118,199,-206,200,-206,201,-206,60,-206,62,-206,192,-206,191,-206,159,-206,190,-206,193,-206,38,-206,94,-206,124,-206,195,-206,196,-206,44,-206,59,-206,41,-206,58,-206});
    states[118] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-25,119,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[119] = new State(new int[]{42,74,47,120,37,135,43,-210,45,-210,199,-210,200,-210,201,-210,60,-210,62,-210,192,-210,191,-210,159,-210,190,-210,193,-210,38,-210,94,-210,124,-210,195,-210,196,-210,44,-210,59,-210,41,-210,58,-210});
    states[120] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,121,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[121] = new State(-213);
    states[122] = new State(new int[]{46,123});
    states[123] = new State(new int[]{131,124});
    states[124] = new State(new int[]{40,125,46,-139});
    states[125] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182,41,-142},new int[]{-40,126,-39,104,-12,128,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[126] = new State(new int[]{41,127});
    states[127] = new State(-137);
    states[128] = new State(-144);
    states[129] = new State(new int[]{60,68,62,114,192,130,191,162,159,164,190,-195,193,-195,38,-195,94,-195,124,-195,195,-195,196,-195,44,-195,59,-195,41,-195,58,-195});
    states[130] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,131,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[131] = new State(new int[]{199,70,200,116,201,132,60,-201,62,-201,192,-201,191,-201,159,-201,190,-201,193,-201,38,-201,94,-201,124,-201,195,-201,196,-201,44,-201,59,-201,41,-201,58,-201});
    states[132] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-24,133,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[133] = new State(new int[]{43,72,45,118,199,-207,200,-207,201,-207,60,-207,62,-207,192,-207,191,-207,159,-207,190,-207,193,-207,38,-207,94,-207,124,-207,195,-207,196,-207,44,-207,59,-207,41,-207,58,-207});
    states[134] = new State(new int[]{42,74,47,120,37,135,43,-208,45,-208,199,-208,200,-208,201,-208,60,-208,62,-208,192,-208,191,-208,159,-208,190,-208,193,-208,38,-208,94,-208,124,-208,195,-208,196,-208,44,-208,59,-208,41,-208,58,-208});
    states[135] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,136,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[136] = new State(-214);
    states[137] = new State(-227);
    states[138] = new State(-228);
    states[139] = new State(-229);
    states[140] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,141,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[141] = new State(-223);
    states[142] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,143,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[143] = new State(-224);
    states[144] = new State(-225);
    states[145] = new State(new int[]{152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,159},new int[]{-101,146,-94,149,-93,150,-92,156});
    states[146] = new State(new int[]{41,147});
    states[147] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-26,148,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[148] = new State(-232);
>>>>>>> master
    states[149] = new State(-63);
    states[150] = new State(-67);
    states[151] = new State(-69);
    states[152] = new State(-70);
    states[153] = new State(-71);
    states[154] = new State(-72);
    states[155] = new State(-73);
    states[156] = new State(-68);
    states[157] = new State(-74);
    states[158] = new State(-75);
    states[159] = new State(-64);
<<<<<<< HEAD
    states[160] = new State(-226);
    states[161] = new State(new int[]{43,72,45,118,199,-219,200,-219,201,-219,60,-219,62,-219,192,-219,191,-219,159,-219,190,-219,193,-219,38,-219,94,-219,124,-219,195,-219,196,-219,44,-219,59,-219,41,-219,58,-219});
    states[162] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,163,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-5,137,-34,138,-35,139,-33,144});
    states[163] = new State(new int[]{199,70,200,116,201,132,60,-217,62,-217,192,-217,191,-217,159,-217,190,-217,193,-217,38,-217,94,-217,124,-217,195,-217,196,-217,44,-217,59,-217,41,-217,58,-217});
    states[164] = new State(new int[]{131,167},new int[]{-108,165,-131,166});
    states[165] = new State(-218);
    states[166] = new State(-65);
    states[167] = new State(-66);
    states[168] = new State(new int[]{199,70,200,116,201,132,60,-213,62,-213,192,-213,191,-213,159,-213,190,-213,193,-213,38,-213,94,-213,124,-213,195,-213,196,-213,44,-213,59,-213,41,-213,58,-213});
    states[169] = new State(-182);
    states[170] = new State(new int[]{91,173,61,-57,44,-57,59,-57,58,-57,41,-57},new int[]{-129,171,-130,172});
=======
    states[160] = new State(-211);
    states[161] = new State(new int[]{43,72,45,118,199,-204,200,-204,201,-204,60,-204,62,-204,192,-204,191,-204,159,-204,190,-204,193,-204,38,-204,94,-204,124,-204,195,-204,196,-204,44,-204,59,-204,41,-204,58,-204});
    states[162] = new State(new int[]{197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,131,53,126,140,33,142,40,145},new int[]{-23,163,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-5,137,-34,138,-35,139,-33,144});
    states[163] = new State(new int[]{199,70,200,116,201,132,60,-202,62,-202,192,-202,191,-202,159,-202,190,-202,193,-202,38,-202,94,-202,124,-202,195,-202,196,-202,44,-202,59,-202,41,-202,58,-202});
    states[164] = new State(new int[]{131,167},new int[]{-100,165,-123,166});
    states[165] = new State(-203);
    states[166] = new State(-65);
    states[167] = new State(-66);
    states[168] = new State(new int[]{199,70,200,116,201,132,60,-198,62,-198,192,-198,191,-198,159,-198,190,-198,193,-198,38,-198,94,-198,124,-198,195,-198,196,-198,44,-198,59,-198,41,-198,58,-198});
    states[169] = new State(-167);
    states[170] = new State(new int[]{91,173,61,-57,44,-57,59,-57,41,-57},new int[]{-121,171,-122,172});
>>>>>>> master
    states[171] = new State(-96);
    states[172] = new State(-56);
    states[173] = new State(new int[]{93,174});
    states[174] = new State(-58);
    states[175] = new State(-91);
    states[176] = new State(-59);
    states[177] = new State(-76);
<<<<<<< HEAD
    states[178] = new State(new int[]{91,173,131,-77},new int[]{-130,179});
    states[179] = new State(-78);
    states[180] = new State(new int[]{58,181,91,-79,131,-79,61,-181,197,-181,198,-181,40,-155,46,-153});
    states[181] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,182,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[182] = new State(-171);
    states[183] = new State(-97);
    states[184] = new State(-106);
    states[185] = new State(new int[]{59,186});
    states[186] = new State(-144);
    states[187] = new State(-145);
    states[188] = new State(new int[]{58,181,61,-181,197,-181,198,-181,40,-155,46,-153});
    states[189] = new State(new int[]{59,-146,44,-146,41,-146,197,-187,198,-187});
    states[190] = new State(-147);
    states[191] = new State(-148);
    states[192] = new State(new int[]{59,-149,44,-149,41,-149,197,-243,198,-243});
    states[193] = new State(new int[]{197,88,198,89});
    states[194] = new State(new int[]{197,-244,198,-244,59,-150,44,-150,41,-150});
    states[195] = new State(-107);
    states[196] = new State(-108);
    states[197] = new State(new int[]{131,200,59,-174},new int[]{-123,198});
    states[198] = new State(new int[]{59,199});
    states[199] = new State(-172);
    states[200] = new State(-173);
    states[201] = new State(-109);
    states[202] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,203,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[203] = new State(new int[]{181,204});
    states[204] = new State(new int[]{40,205});
    states[205] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,206,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[206] = new State(new int[]{41,207});
    states[207] = new State(new int[]{59,208});
    states[208] = new State(-128);
    states[209] = new State(-110);
    states[210] = new State(new int[]{131,200,59,-174},new int[]{-123,211});
    states[211] = new State(new int[]{59,212});
    states[212] = new State(-175);
    states[213] = new State(-111);
    states[214] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197,59,-178},new int[]{-124,215,-12,217,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[215] = new State(new int[]{59,216});
    states[216] = new State(-176);
    states[217] = new State(-177);
    states[218] = new State(-112);
    states[219] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,220,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[220] = new State(new int[]{59,221});
    states[221] = new State(-142);
    states[222] = new State(-113);
    states[223] = new State(new int[]{40,224});
    states[224] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,225,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[225] = new State(new int[]{41,226});
    states[226] = new State(new int[]{123,27},new int[]{-58,227});
    states[227] = new State(-143);
    states[228] = new State(-114);
    states[229] = new State(new int[]{40,230});
    states[230] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,231,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[231] = new State(new int[]{41,232});
    states[232] = new State(new int[]{123,234},new int[]{-98,233});
    states[233] = new State(-119);
    states[234] = new State(new int[]{157,337,138,341},new int[]{-97,235,-74,344,-96,238,-75,343});
    states[235] = new State(new int[]{125,236,157,337,138,341},new int[]{-74,237,-96,238,-75,343});
    states[236] = new State(-120);
    states[237] = new State(-122);
    states[238] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283,157,337,138,341},new int[]{-93,239,-75,335,-53,336,-52,32,-6,33,-103,35,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[239] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283,125,-123,157,-123,138,-123},new int[]{-53,31,-52,32,-6,33,-103,35,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
=======
    states[178] = new State(new int[]{91,173,131,-77},new int[]{-122,179});
    states[179] = new State(-78);
    states[180] = new State(new int[]{58,181,91,-79,131,-79,61,-166,197,-166,198,-166,40,-140,46,-138});
    states[181] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275},new int[]{-44,182,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[182] = new State(-156);
    states[183] = new State(-97);
    states[184] = new State(-104);
    states[185] = new State(new int[]{59,186});
    states[186] = new State(-129);
    states[187] = new State(-130);
    states[188] = new State(new int[]{58,181,61,-166,197,-166,198,-166,40,-140,46,-138});
    states[189] = new State(new int[]{59,-131,197,-172,198,-172});
    states[190] = new State(-132);
    states[191] = new State(-133);
    states[192] = new State(new int[]{59,-134,197,-228,198,-228});
    states[193] = new State(new int[]{197,88,198,89});
    states[194] = new State(new int[]{197,-229,198,-229,59,-135});
    states[195] = new State(-105);
    states[196] = new State(-106);
    states[197] = new State(new int[]{131,200,59,-159},new int[]{-115,198});
    states[198] = new State(new int[]{59,199});
    states[199] = new State(-157);
    states[200] = new State(-158);
    states[201] = new State(-107);
    states[202] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275},new int[]{-44,203,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[203] = new State(new int[]{181,204});
    states[204] = new State(new int[]{40,205});
    states[205] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,206,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[206] = new State(new int[]{41,207});
    states[207] = new State(new int[]{59,208});
    states[208] = new State(-126);
    states[209] = new State(-108);
    states[210] = new State(new int[]{131,200,59,-159},new int[]{-115,211});
    states[211] = new State(new int[]{59,212});
    states[212] = new State(-160);
    states[213] = new State(-109);
    states[214] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182,59,-163},new int[]{-116,215,-12,217,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[215] = new State(new int[]{59,216});
    states[216] = new State(-161);
    states[217] = new State(-162);
    states[218] = new State(-110);
    states[219] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,220,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[220] = new State(new int[]{59,221});
    states[221] = new State(-127);
    states[222] = new State(-111);
    states[223] = new State(new int[]{40,224});
    states[224] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,225,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[225] = new State(new int[]{41,226});
    states[226] = new State(new int[]{123,27},new int[]{-58,227});
    states[227] = new State(-128);
    states[228] = new State(-112);
    states[229] = new State(new int[]{40,230});
    states[230] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,231,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[231] = new State(new int[]{41,232});
    states[232] = new State(new int[]{123,234},new int[]{-90,233});
    states[233] = new State(-117);
    states[234] = new State(new int[]{157,292,138,296},new int[]{-89,235,-74,299,-88,238,-75,298});
    states[235] = new State(new int[]{125,236,157,292,138,296},new int[]{-74,237,-88,238,-75,298});
    states[236] = new State(-118);
    states[237] = new State(-120);
    states[238] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,157,292,138,296},new int[]{-85,239,-75,290,-53,291,-52,32,-6,33,-95,35,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[239] = new State(new int[]{131,180,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,125,-121,157,-121,138,-121},new int[]{-53,31,-52,32,-6,33,-95,35,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156,-44,243,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
>>>>>>> master
    states[240] = new State(-60);
    states[241] = new State(-61);
    states[242] = new State(-62);
    states[243] = new State(-88);
<<<<<<< HEAD
    states[244] = new State(-115);
    states[245] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,246,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[246] = new State(new int[]{59,247,58,248});
    states[247] = new State(-117);
    states[248] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,249,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[249] = new State(new int[]{59,250});
    states[250] = new State(-118);
    states[251] = new State(-116);
    states[252] = new State(new int[]{123,27},new int[]{-58,253});
    states[253] = new State(new int[]{162,260,173,-167},new int[]{-66,254,-67,255,-68,259});
    states[254] = new State(new int[]{131,-164,152,-164,165,-164,164,-164,174,-164,167,-164,178,-164,148,-164,142,-164,197,-164,198,-164,182,-164,183,-164,184,-164,185,-164,186,-164,187,-164,123,-164,147,-164,143,-164,133,-164,160,-164,151,-164,141,-164,136,-164,137,-164,166,-164,139,-164,181,-164,134,-164,125,-164,157,-164,138,-164,153,-164,173,-166});
    states[255] = new State(new int[]{173,257},new int[]{-69,256});
    states[256] = new State(-165);
    states[257] = new State(new int[]{123,27},new int[]{-58,258});
    states[258] = new State(-170);
    states[259] = new State(-168);
    states[260] = new State(new int[]{40,261});
    states[261] = new State(new int[]{41,262});
    states[262] = new State(new int[]{123,27},new int[]{-58,263});
    states[263] = new State(-169);
    states[264] = new State(-98);
    states[265] = new State(new int[]{40,266});
    states[266] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,267,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[267] = new State(new int[]{41,268});
    states[268] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,308,181,275,134,315},new int[]{-44,269,-60,270,-51,307,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292,-61,324,-86,325,-84,326,-87,327});
    states[269] = new State(-160);
    states[270] = new State(new int[]{153,271});
    states[271] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,272,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[272] = new State(-161);
    states[273] = new State(-99);
    states[274] = new State(-100);
    states[275] = new State(new int[]{40,276});
    states[276] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,277,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[277] = new State(new int[]{41,278});
    states[278] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,279,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[279] = new State(-163);
    states[280] = new State(-101);
    states[281] = new State(-102);
    states[282] = new State(-129);
    states[283] = new State(new int[]{40,284});
    states[284] = new State(new int[]{59,-135,131,-54,152,-54,165,-54,164,-54,174,-54,167,-54,178,-54,148,-54,142,-54,168,-54},new int[]{-89,285,-115,297});
    states[285] = new State(new int[]{59,286});
    states[286] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,287,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[287] = new State(new int[]{59,288});
    states[288] = new State(new int[]{131,53,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,41,-136},new int[]{-82,289,-132,293,-2,296,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194});
    states[289] = new State(new int[]{41,290});
    states[290] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,291,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[291] = new State(-133);
    states[292] = new State(-130);
    states[293] = new State(new int[]{44,294,41,-137});
    states[294] = new State(new int[]{131,53,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98},new int[]{-2,295,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194});
    states[295] = new State(-139);
    states[296] = new State(-138);
    states[297] = new State(new int[]{131,305,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,168,306},new int[]{-103,298,-112,304,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156});
    states[298] = new State(new int[]{131,170},new int[]{-116,299});
    states[299] = new State(new int[]{58,300});
    states[300] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,301,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[301] = new State(new int[]{41,302});
    states[302] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275,134,283},new int[]{-44,303,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292});
    states[303] = new State(-140);
    states[304] = new State(-53);
    states[305] = new State(-79);
    states[306] = new State(-55);
    states[307] = new State(new int[]{131,-97,152,-97,165,-97,164,-97,174,-97,167,-97,178,-97,148,-97,142,-97,197,-97,198,-97,182,-97,183,-97,184,-97,185,-97,186,-97,187,-97,123,-97,147,-97,143,-97,133,-97,160,-97,151,-97,141,-97,136,-97,137,-97,166,-97,139,-97,181,-97,134,-97,125,-97,157,-97,138,-97,153,-103});
    states[308] = new State(new int[]{40,309});
    states[309] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,310,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[310] = new State(new int[]{41,311});
    states[311] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,308,181,275,134,315},new int[]{-44,269,-60,312,-51,307,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292,-61,324,-86,325,-84,326,-87,327});
    states[312] = new State(new int[]{153,313});
    states[313] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,308,181,275,134,315},new int[]{-44,272,-60,314,-51,307,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292,-61,324,-86,325,-84,326,-87,327});
    states[314] = new State(-162);
    states[315] = new State(new int[]{40,316});
    states[316] = new State(new int[]{59,-135,131,-54,152,-54,165,-54,164,-54,174,-54,167,-54,178,-54,148,-54,142,-54,168,-54},new int[]{-89,317,-115,328});
    states[317] = new State(new int[]{59,318});
    states[318] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,319,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[319] = new State(new int[]{59,320});
    states[320] = new State(new int[]{131,53,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,41,-136},new int[]{-82,321,-132,293,-2,296,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194});
    states[321] = new State(new int[]{41,322});
    states[322] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,308,181,275,134,315},new int[]{-44,291,-60,323,-51,307,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292,-61,324,-86,325,-84,326,-87,327});
    states[323] = new State(-134);
    states[324] = new State(-104);
    states[325] = new State(-105);
    states[326] = new State(-131);
    states[327] = new State(-132);
    states[328] = new State(new int[]{131,305,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,168,306},new int[]{-103,329,-112,304,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156});
    states[329] = new State(new int[]{131,170},new int[]{-116,330});
    states[330] = new State(new int[]{58,331});
    states[331] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-12,332,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[332] = new State(new int[]{41,333});
    states[333] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,308,181,275,134,315},new int[]{-44,303,-60,334,-51,307,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-118,100,-117,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-85,281,-83,282,-88,292,-61,324,-86,325,-84,326,-87,327});
    states[334] = new State(-141);
    states[335] = new State(-125);
    states[336] = new State(-85);
    states[337] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-197},new int[]{-32,338,-12,340,-13,43,-134,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-118,100,-117,122,-34,138,-35,139,-33,144});
    states[338] = new State(new int[]{58,339});
    states[339] = new State(-126);
    states[340] = new State(-251);
    states[341] = new State(new int[]{58,342});
    states[342] = new State(-127);
    states[343] = new State(-124);
    states[344] = new State(-121);
    states[345] = new State(-81);
    states[346] = new State(-38);
    states[347] = new State(new int[]{131,351},new int[]{-120,348});
    states[348] = new State(-3,new int[]{-54,349,-128,350});
    states[349] = new State(-42);
    states[350] = new State(-45);
    states[351] = new State(new int[]{40,352});
    states[352] = new State(new int[]{131,-54,152,-54,165,-54,164,-54,174,-54,167,-54,178,-54,148,-54,142,-54,168,-54,41,-48},new int[]{-43,353,-42,356,-41,357,-37,363,-115,360});
    states[353] = new State(new int[]{41,354});
    states[354] = new State(new int[]{91,173,123,-57,59,-57},new int[]{-129,355,-130,172});
    states[355] = new State(-46);
    states[356] = new State(-47);
    states[357] = new State(new int[]{44,358,41,-49});
    states[358] = new State(-54,new int[]{-37,359,-115,360});
    states[359] = new State(-51);
    states[360] = new State(new int[]{131,305,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,168,306},new int[]{-103,361,-112,304,-105,176,-106,177,-107,178,-104,240,-102,241,-101,150,-100,156});
    states[361] = new State(new int[]{131,170},new int[]{-116,362});
    states[362] = new State(-52);
    states[363] = new State(-50);
    states[364] = new State(-43);
    states[365] = new State(-44);
    states[366] = new State(-40);
    states[367] = new State(-41);
    states[368] = new State(-20);
    states[369] = new State(-22);
    states[370] = new State(-23);
    states[371] = new State(-24);
    states[372] = new State(-25);
    states[373] = new State(-26);
    states[374] = new State(-27);
    states[375] = new State(-28);
    states[376] = new State(-7);
    states[377] = new State(new int[]{170,384,131,391},new int[]{-125,378});
    states[378] = new State(new int[]{59,379,46,380});
    states[379] = new State(-9);
    states[380] = new State(new int[]{42,381,131,383});
    states[381] = new State(new int[]{59,382});
    states[382] = new State(-10);
    states[383] = new State(-14);
    states[384] = new State(new int[]{131,391},new int[]{-125,385});
    states[385] = new State(new int[]{46,386});
    states[386] = new State(new int[]{131,387,42,389});
    states[387] = new State(new int[]{59,388,46,-14});
    states[388] = new State(-11);
    states[389] = new State(new int[]{59,390});
    states[390] = new State(-12);
    states[391] = new State(-13);
    states[392] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-127, new int[]{-126,129});
    rules[2] = new Rule(-126, new int[]{-45});
    rules[3] = new Rule(-128, new int[]{});
    rules[4] = new Rule(-45, new int[]{-57,-95,-90});
    rules[5] = new Rule(-57, new int[]{});
    rules[6] = new Rule(-95, new int[]{-81});
    rules[7] = new Rule(-95, new int[]{-95,-81});
    rules[8] = new Rule(-95, new int[]{});
    rules[9] = new Rule(-81, new int[]{154,-125,59});
    rules[10] = new Rule(-81, new int[]{154,-125,46,42,59});
    rules[11] = new Rule(-81, new int[]{154,170,-125,46,131,59});
    rules[12] = new Rule(-81, new int[]{154,170,-125,46,42,59});
    rules[13] = new Rule(-125, new int[]{131});
    rules[14] = new Rule(-125, new int[]{-125,46,131});
    rules[15] = new Rule(-90, new int[]{-90,-46});
    rules[16] = new Rule(-90, new int[]{});
    rules[17] = new Rule(-46, new int[]{-47});
    rules[18] = new Rule(-47, new int[]{-48});
    rules[19] = new Rule(-48, new int[]{-113,172,131,-7,-8,-9,-91});
    rules[20] = new Rule(-113, new int[]{-113,-110});
    rules[21] = new Rule(-113, new int[]{});
    rules[22] = new Rule(-110, new int[]{155});
    rules[23] = new Rule(-110, new int[]{150});
    rules[24] = new Rule(-110, new int[]{145});
    rules[25] = new Rule(-110, new int[]{132});
    rules[26] = new Rule(-110, new int[]{170});
    rules[27] = new Rule(-110, new int[]{168});
    rules[28] = new Rule(-110, new int[]{175});
    rules[29] = new Rule(-7, new int[]{});
    rules[30] = new Rule(-8, new int[]{});
    rules[31] = new Rule(-9, new int[]{});
    rules[32] = new Rule(-91, new int[]{123,-92,125});
    rules[33] = new Rule(-92, new int[]{-92,-49});
    rules[34] = new Rule(-92, new int[]{});
    rules[35] = new Rule(-49, new int[]{-55});
    rules[36] = new Rule(-55, new int[]{-56});
    rules[37] = new Rule(-56, new int[]{-114,-119,-59});
    rules[38] = new Rule(-114, new int[]{-114,-111});
    rules[39] = new Rule(-114, new int[]{});
    rules[40] = new Rule(-111, new int[]{155});
    rules[41] = new Rule(-111, new int[]{170});
    rules[42] = new Rule(-119, new int[]{-99,-120,-54});
    rules[43] = new Rule(-99, new int[]{171});
    rules[44] = new Rule(-99, new int[]{-103});
    rules[45] = new Rule(-54, new int[]{-128});
    rules[46] = new Rule(-120, new int[]{131,40,-43,41,-129});
=======
    states[244] = new State(-113);
    states[245] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,246,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[246] = new State(new int[]{59,247,58,248});
    states[247] = new State(-115);
    states[248] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,249,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[249] = new State(new int[]{59,250});
    states[250] = new State(-116);
    states[251] = new State(-114);
    states[252] = new State(new int[]{123,27},new int[]{-58,253});
    states[253] = new State(new int[]{162,260,173,-152},new int[]{-66,254,-67,255,-68,259});
    states[254] = new State(new int[]{131,-149,152,-149,165,-149,164,-149,174,-149,167,-149,178,-149,148,-149,142,-149,197,-149,198,-149,182,-149,183,-149,184,-149,185,-149,186,-149,187,-149,123,-149,147,-149,143,-149,133,-149,160,-149,151,-149,141,-149,136,-149,137,-149,166,-149,139,-149,181,-149,125,-149,157,-149,138,-149,153,-149,173,-151});
    states[255] = new State(new int[]{173,257},new int[]{-69,256});
    states[256] = new State(-150);
    states[257] = new State(new int[]{123,27},new int[]{-58,258});
    states[258] = new State(-155);
    states[259] = new State(-153);
    states[260] = new State(new int[]{40,261});
    states[261] = new State(new int[]{41,262});
    states[262] = new State(new int[]{123,27},new int[]{-58,263});
    states[263] = new State(-154);
    states[264] = new State(-98);
    states[265] = new State(new int[]{40,266});
    states[266] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,267,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[267] = new State(new int[]{41,268});
    states[268] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,282,181,275},new int[]{-44,269,-60,270,-51,281,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-61,289});
    states[269] = new State(-145);
    states[270] = new State(new int[]{153,271});
    states[271] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275},new int[]{-44,272,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[272] = new State(-146);
    states[273] = new State(-99);
    states[274] = new State(-100);
    states[275] = new State(new int[]{40,276});
    states[276] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,277,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[277] = new State(new int[]{41,278});
    states[278] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,265,181,275},new int[]{-44,279,-51,183,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280});
    states[279] = new State(-148);
    states[280] = new State(-101);
    states[281] = new State(new int[]{131,-97,152,-97,165,-97,164,-97,174,-97,167,-97,178,-97,148,-97,142,-97,197,-97,198,-97,182,-97,183,-97,184,-97,185,-97,186,-97,187,-97,123,-97,147,-97,143,-97,133,-97,160,-97,151,-97,141,-97,136,-97,137,-97,166,-97,139,-97,181,-97,125,-97,157,-97,138,-97,153,-102});
    states[282] = new State(new int[]{40,283});
    states[283] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-12,284,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[284] = new State(new int[]{41,285});
    states[285] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,282,181,275},new int[]{-44,269,-60,286,-51,281,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-61,289});
    states[286] = new State(new int[]{153,287});
    states[287] = new State(new int[]{131,188,197,77,198,80,182,93,183,94,184,95,185,96,186,97,187,98,123,27,147,197,143,202,133,210,160,214,151,219,141,223,136,229,137,245,166,252,139,282,181,275},new int[]{-44,272,-60,288,-51,281,-50,184,-2,185,-3,187,-4,49,-5,52,-36,189,-110,100,-109,122,-29,190,-30,191,-34,192,-27,193,-28,90,-11,91,-1,92,-35,194,-58,195,-78,196,-70,201,-79,209,-80,213,-71,218,-72,222,-73,228,-76,244,-65,251,-62,264,-63,273,-64,274,-77,280,-61,289});
    states[288] = new State(-147);
    states[289] = new State(-103);
    states[290] = new State(-123);
    states[291] = new State(-85);
    states[292] = new State(new int[]{131,53,197,77,198,80,43,82,45,84,182,93,183,94,184,95,185,96,186,97,187,98,126,140,33,142,40,145,194,-182},new int[]{-32,293,-12,295,-13,43,-125,44,-10,47,-3,48,-4,49,-5,52,-15,54,-16,55,-17,107,-18,108,-19,109,-20,110,-21,111,-22,129,-23,168,-24,161,-25,134,-26,160,-29,76,-30,79,-31,86,-27,87,-28,90,-11,91,-1,92,-36,99,-110,100,-109,122,-34,138,-35,139,-33,144});
    states[293] = new State(new int[]{58,294});
    states[294] = new State(-124);
    states[295] = new State(-236);
    states[296] = new State(new int[]{58,297});
    states[297] = new State(-125);
    states[298] = new State(-122);
    states[299] = new State(-119);
    states[300] = new State(-81);
    states[301] = new State(-38);
    states[302] = new State(new int[]{131,306},new int[]{-112,303});
    states[303] = new State(-3,new int[]{-54,304,-120,305});
    states[304] = new State(-42);
    states[305] = new State(-45);
    states[306] = new State(new int[]{40,307});
    states[307] = new State(new int[]{131,-54,152,-54,165,-54,164,-54,174,-54,167,-54,178,-54,148,-54,142,-54,168,-54,41,-48},new int[]{-43,308,-42,311,-41,312,-37,321,-107,315});
    states[308] = new State(new int[]{41,309});
    states[309] = new State(new int[]{91,173,123,-57,59,-57},new int[]{-121,310,-122,172});
    states[310] = new State(-46);
    states[311] = new State(-47);
    states[312] = new State(new int[]{44,313,41,-49});
    states[313] = new State(-54,new int[]{-37,314,-107,315});
    states[314] = new State(-51);
    states[315] = new State(new int[]{131,319,152,151,165,152,164,153,174,154,167,155,178,157,148,158,142,242,168,320},new int[]{-95,316,-104,318,-97,176,-98,177,-99,178,-96,240,-94,241,-93,150,-92,156});
    states[316] = new State(new int[]{131,170},new int[]{-108,317});
    states[317] = new State(-52);
    states[318] = new State(-53);
    states[319] = new State(-79);
    states[320] = new State(-55);
    states[321] = new State(-50);
    states[322] = new State(-43);
    states[323] = new State(-44);
    states[324] = new State(-40);
    states[325] = new State(-41);
    states[326] = new State(-20);
    states[327] = new State(-22);
    states[328] = new State(-23);
    states[329] = new State(-24);
    states[330] = new State(-25);
    states[331] = new State(-26);
    states[332] = new State(-27);
    states[333] = new State(-28);
    states[334] = new State(-7);
    states[335] = new State(new int[]{170,342,131,349},new int[]{-117,336});
    states[336] = new State(new int[]{59,337,46,338});
    states[337] = new State(-9);
    states[338] = new State(new int[]{42,339,131,341});
    states[339] = new State(new int[]{59,340});
    states[340] = new State(-10);
    states[341] = new State(-14);
    states[342] = new State(new int[]{131,349},new int[]{-117,343});
    states[343] = new State(new int[]{46,344});
    states[344] = new State(new int[]{131,345,42,347});
    states[345] = new State(new int[]{59,346,46,-14});
    states[346] = new State(-11);
    states[347] = new State(new int[]{59,348});
    states[348] = new State(-12);
    states[349] = new State(-13);
    states[350] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-119, new int[]{-118,129});
    rules[2] = new Rule(-118, new int[]{-45});
    rules[3] = new Rule(-120, new int[]{});
    rules[4] = new Rule(-45, new int[]{-57,-87,-82});
    rules[5] = new Rule(-57, new int[]{});
    rules[6] = new Rule(-87, new int[]{-81});
    rules[7] = new Rule(-87, new int[]{-87,-81});
    rules[8] = new Rule(-87, new int[]{});
    rules[9] = new Rule(-81, new int[]{154,-117,59});
    rules[10] = new Rule(-81, new int[]{154,-117,46,42,59});
    rules[11] = new Rule(-81, new int[]{154,170,-117,46,131,59});
    rules[12] = new Rule(-81, new int[]{154,170,-117,46,42,59});
    rules[13] = new Rule(-117, new int[]{131});
    rules[14] = new Rule(-117, new int[]{-117,46,131});
    rules[15] = new Rule(-82, new int[]{-82,-46});
    rules[16] = new Rule(-82, new int[]{});
    rules[17] = new Rule(-46, new int[]{-47});
    rules[18] = new Rule(-47, new int[]{-48});
    rules[19] = new Rule(-48, new int[]{-105,172,131,-7,-8,-9,-83});
    rules[20] = new Rule(-105, new int[]{-105,-102});
    rules[21] = new Rule(-105, new int[]{});
    rules[22] = new Rule(-102, new int[]{155});
    rules[23] = new Rule(-102, new int[]{150});
    rules[24] = new Rule(-102, new int[]{145});
    rules[25] = new Rule(-102, new int[]{132});
    rules[26] = new Rule(-102, new int[]{170});
    rules[27] = new Rule(-102, new int[]{168});
    rules[28] = new Rule(-102, new int[]{175});
    rules[29] = new Rule(-7, new int[]{});
    rules[30] = new Rule(-8, new int[]{});
    rules[31] = new Rule(-9, new int[]{});
    rules[32] = new Rule(-83, new int[]{123,-84,125});
    rules[33] = new Rule(-84, new int[]{-84,-49});
    rules[34] = new Rule(-84, new int[]{});
    rules[35] = new Rule(-49, new int[]{-55});
    rules[36] = new Rule(-55, new int[]{-56});
    rules[37] = new Rule(-56, new int[]{-106,-111,-59});
    rules[38] = new Rule(-106, new int[]{-106,-103});
    rules[39] = new Rule(-106, new int[]{});
    rules[40] = new Rule(-103, new int[]{155});
    rules[41] = new Rule(-103, new int[]{170});
    rules[42] = new Rule(-111, new int[]{-91,-112,-54});
    rules[43] = new Rule(-91, new int[]{171});
    rules[44] = new Rule(-91, new int[]{-95});
    rules[45] = new Rule(-54, new int[]{-120});
    rules[46] = new Rule(-112, new int[]{131,40,-43,41,-121});
>>>>>>> master
    rules[47] = new Rule(-43, new int[]{-42});
    rules[48] = new Rule(-43, new int[]{});
    rules[49] = new Rule(-42, new int[]{-41});
    rules[50] = new Rule(-41, new int[]{-37});
    rules[51] = new Rule(-41, new int[]{-41,44,-37});
<<<<<<< HEAD
    rules[52] = new Rule(-37, new int[]{-115,-103,-116});
    rules[53] = new Rule(-115, new int[]{-115,-112});
    rules[54] = new Rule(-115, new int[]{});
    rules[55] = new Rule(-112, new int[]{168});
    rules[56] = new Rule(-129, new int[]{-130});
    rules[57] = new Rule(-129, new int[]{});
    rules[58] = new Rule(-130, new int[]{91,93});
    rules[59] = new Rule(-103, new int[]{-105});
    rules[60] = new Rule(-103, new int[]{-104});
    rules[61] = new Rule(-104, new int[]{-102});
    rules[62] = new Rule(-104, new int[]{142});
    rules[63] = new Rule(-109, new int[]{-102});
    rules[64] = new Rule(-109, new int[]{142});
    rules[65] = new Rule(-108, new int[]{-131});
    rules[66] = new Rule(-131, new int[]{131});
    rules[67] = new Rule(-102, new int[]{-101});
    rules[68] = new Rule(-102, new int[]{-100});
    rules[69] = new Rule(-101, new int[]{152});
    rules[70] = new Rule(-101, new int[]{165});
    rules[71] = new Rule(-101, new int[]{164});
    rules[72] = new Rule(-101, new int[]{174});
    rules[73] = new Rule(-101, new int[]{167});
    rules[74] = new Rule(-100, new int[]{178});
    rules[75] = new Rule(-100, new int[]{148});
    rules[76] = new Rule(-105, new int[]{-106});
    rules[77] = new Rule(-105, new int[]{-107});
    rules[78] = new Rule(-106, new int[]{-107,-130});
    rules[79] = new Rule(-107, new int[]{131});
    rules[80] = new Rule(-59, new int[]{-58});
    rules[81] = new Rule(-59, new int[]{59});
    rules[82] = new Rule(-58, new int[]{123,-94,125});
    rules[83] = new Rule(-94, new int[]{-93});
    rules[84] = new Rule(-94, new int[]{});
    rules[85] = new Rule(-93, new int[]{-53});
    rules[86] = new Rule(-93, new int[]{-93,-53});
    rules[87] = new Rule(-53, new int[]{-52});
    rules[88] = new Rule(-53, new int[]{-44});
    rules[89] = new Rule(-52, new int[]{-6,59});
    rules[90] = new Rule(-6, new int[]{-103,-122});
    rules[91] = new Rule(-122, new int[]{-121});
    rules[92] = new Rule(-122, new int[]{-122,44,-121});
    rules[93] = new Rule(-121, new int[]{-116});
    rules[94] = new Rule(-121, new int[]{-116,61,-38});
    rules[95] = new Rule(-38, new int[]{-12});
    rules[96] = new Rule(-116, new int[]{131,-129});
=======
    rules[52] = new Rule(-37, new int[]{-107,-95,-108});
    rules[53] = new Rule(-107, new int[]{-107,-104});
    rules[54] = new Rule(-107, new int[]{});
    rules[55] = new Rule(-104, new int[]{168});
    rules[56] = new Rule(-121, new int[]{-122});
    rules[57] = new Rule(-121, new int[]{});
    rules[58] = new Rule(-122, new int[]{91,93});
    rules[59] = new Rule(-95, new int[]{-97});
    rules[60] = new Rule(-95, new int[]{-96});
    rules[61] = new Rule(-96, new int[]{-94});
    rules[62] = new Rule(-96, new int[]{142});
    rules[63] = new Rule(-101, new int[]{-94});
    rules[64] = new Rule(-101, new int[]{142});
    rules[65] = new Rule(-100, new int[]{-123});
    rules[66] = new Rule(-123, new int[]{131});
    rules[67] = new Rule(-94, new int[]{-93});
    rules[68] = new Rule(-94, new int[]{-92});
    rules[69] = new Rule(-93, new int[]{152});
    rules[70] = new Rule(-93, new int[]{165});
    rules[71] = new Rule(-93, new int[]{164});
    rules[72] = new Rule(-93, new int[]{174});
    rules[73] = new Rule(-93, new int[]{167});
    rules[74] = new Rule(-92, new int[]{178});
    rules[75] = new Rule(-92, new int[]{148});
    rules[76] = new Rule(-97, new int[]{-98});
    rules[77] = new Rule(-97, new int[]{-99});
    rules[78] = new Rule(-98, new int[]{-99,-122});
    rules[79] = new Rule(-99, new int[]{131});
    rules[80] = new Rule(-59, new int[]{-58});
    rules[81] = new Rule(-59, new int[]{59});
    rules[82] = new Rule(-58, new int[]{123,-86,125});
    rules[83] = new Rule(-86, new int[]{-85});
    rules[84] = new Rule(-86, new int[]{});
    rules[85] = new Rule(-85, new int[]{-53});
    rules[86] = new Rule(-85, new int[]{-85,-53});
    rules[87] = new Rule(-53, new int[]{-52});
    rules[88] = new Rule(-53, new int[]{-44});
    rules[89] = new Rule(-52, new int[]{-6,59});
    rules[90] = new Rule(-6, new int[]{-95,-114});
    rules[91] = new Rule(-114, new int[]{-113});
    rules[92] = new Rule(-114, new int[]{-114,44,-113});
    rules[93] = new Rule(-113, new int[]{-108});
    rules[94] = new Rule(-113, new int[]{-108,61,-38});
    rules[95] = new Rule(-38, new int[]{-12});
    rules[96] = new Rule(-108, new int[]{131,-121});
>>>>>>> master
    rules[97] = new Rule(-44, new int[]{-51});
    rules[98] = new Rule(-44, new int[]{-62});
    rules[99] = new Rule(-44, new int[]{-63});
    rules[100] = new Rule(-44, new int[]{-64});
    rules[101] = new Rule(-44, new int[]{-77});
<<<<<<< HEAD
    rules[102] = new Rule(-44, new int[]{-85});
    rules[103] = new Rule(-60, new int[]{-51});
    rules[104] = new Rule(-60, new int[]{-61});
    rules[105] = new Rule(-60, new int[]{-86});
    rules[106] = new Rule(-51, new int[]{-50});
    rules[107] = new Rule(-51, new int[]{-58});
    rules[108] = new Rule(-51, new int[]{-78});
    rules[109] = new Rule(-51, new int[]{-70});
    rules[110] = new Rule(-51, new int[]{-79});
    rules[111] = new Rule(-51, new int[]{-80});
    rules[112] = new Rule(-51, new int[]{-71});
    rules[113] = new Rule(-51, new int[]{-72});
    rules[114] = new Rule(-51, new int[]{-73});
    rules[115] = new Rule(-51, new int[]{-76});
    rules[116] = new Rule(-51, new int[]{-65});
    rules[117] = new Rule(-76, new int[]{137,-12,59});
    rules[118] = new Rule(-76, new int[]{137,-12,58,-12,59});
    rules[119] = new Rule(-73, new int[]{136,40,-12,41,-98});
    rules[120] = new Rule(-98, new int[]{123,-97,125});
    rules[121] = new Rule(-97, new int[]{-74});
    rules[122] = new Rule(-97, new int[]{-97,-74});
    rules[123] = new Rule(-74, new int[]{-96,-93});
    rules[124] = new Rule(-96, new int[]{-75});
    rules[125] = new Rule(-96, new int[]{-96,-75});
    rules[126] = new Rule(-75, new int[]{157,-32,58});
    rules[127] = new Rule(-75, new int[]{138,58});
    rules[128] = new Rule(-70, new int[]{143,-44,181,40,-12,41,59});
    rules[129] = new Rule(-85, new int[]{-83});
    rules[130] = new Rule(-85, new int[]{-88});
    rules[131] = new Rule(-86, new int[]{-84});
    rules[132] = new Rule(-86, new int[]{-87});
    rules[133] = new Rule(-83, new int[]{134,40,-89,59,-12,59,-82,41,-44});
    rules[134] = new Rule(-84, new int[]{134,40,-89,59,-12,59,-82,41,-60});
    rules[135] = new Rule(-89, new int[]{});
    rules[136] = new Rule(-82, new int[]{});
    rules[137] = new Rule(-82, new int[]{-132});
    rules[138] = new Rule(-132, new int[]{-2});
    rules[139] = new Rule(-132, new int[]{-132,44,-2});
    rules[140] = new Rule(-88, new int[]{134,40,-115,-103,-116,58,-12,41,-44});
    rules[141] = new Rule(-87, new int[]{134,40,-115,-103,-116,58,-12,41,-60});
    rules[142] = new Rule(-71, new int[]{151,-12,59});
    rules[143] = new Rule(-72, new int[]{141,40,-12,41,-58});
    rules[144] = new Rule(-50, new int[]{-2,59});
    rules[145] = new Rule(-2, new int[]{-3});
    rules[146] = new Rule(-2, new int[]{-36});
    rules[147] = new Rule(-2, new int[]{-29});
    rules[148] = new Rule(-2, new int[]{-30});
    rules[149] = new Rule(-2, new int[]{-34});
    rules[150] = new Rule(-2, new int[]{-35});
    rules[151] = new Rule(-36, new int[]{-118,40,-40,41});
    rules[152] = new Rule(-36, new int[]{-117,46,131,40,-40,41});
    rules[153] = new Rule(-117, new int[]{131});
    rules[154] = new Rule(-117, new int[]{-117,46,131});
    rules[155] = new Rule(-118, new int[]{131});
    rules[156] = new Rule(-40, new int[]{-39});
    rules[157] = new Rule(-40, new int[]{});
    rules[158] = new Rule(-39, new int[]{-39,44,-12});
    rules[159] = new Rule(-39, new int[]{-12});
    rules[160] = new Rule(-62, new int[]{139,40,-12,41,-44});
    rules[161] = new Rule(-63, new int[]{139,40,-12,41,-60,153,-44});
    rules[162] = new Rule(-61, new int[]{139,40,-12,41,-60,153,-60});
    rules[163] = new Rule(-64, new int[]{181,40,-12,41,-44});
    rules[164] = new Rule(-65, new int[]{166,-58,-66});
    rules[165] = new Rule(-65, new int[]{166,-58,-67,-69});
    rules[166] = new Rule(-67, new int[]{-66});
    rules[167] = new Rule(-67, new int[]{});
    rules[168] = new Rule(-66, new int[]{-68});
    rules[169] = new Rule(-68, new int[]{162,40,41,-58});
    rules[170] = new Rule(-69, new int[]{173,-58});
    rules[171] = new Rule(-77, new int[]{131,58,-44});
    rules[172] = new Rule(-78, new int[]{147,-123,59});
    rules[173] = new Rule(-123, new int[]{131});
    rules[174] = new Rule(-123, new int[]{});
    rules[175] = new Rule(-79, new int[]{133,-123,59});
    rules[176] = new Rule(-80, new int[]{160,-124,59});
    rules[177] = new Rule(-124, new int[]{-12});
    rules[178] = new Rule(-124, new int[]{});
    rules[179] = new Rule(-3, new int[]{-4,-133,-12});
    rules[180] = new Rule(-4, new int[]{-5});
    rules[181] = new Rule(-5, new int[]{131});
    rules[182] = new Rule(-133, new int[]{61});
    rules[183] = new Rule(-10, new int[]{-3});
    rules[184] = new Rule(-10, new int[]{-15});
    rules[185] = new Rule(-28, new int[]{-11});
    rules[186] = new Rule(-11, new int[]{-1});
    rules[187] = new Rule(-11, new int[]{-36});
    rules[188] = new Rule(-1, new int[]{182});
    rules[189] = new Rule(-1, new int[]{183});
    rules[190] = new Rule(-1, new int[]{184});
    rules[191] = new Rule(-1, new int[]{185});
    rules[192] = new Rule(-1, new int[]{186});
    rules[193] = new Rule(-1, new int[]{187});
    rules[194] = new Rule(-12, new int[]{-13});
    rules[195] = new Rule(-12, new int[]{-10});
    rules[196] = new Rule(-13, new int[]{-134,194,-14});
    rules[197] = new Rule(-134, new int[]{});
    rules[198] = new Rule(-14, new int[]{});
    rules[199] = new Rule(-15, new int[]{-16});
    rules[200] = new Rule(-16, new int[]{-17});
    rules[201] = new Rule(-16, new int[]{-16,196,-17});
    rules[202] = new Rule(-17, new int[]{-18});
    rules[203] = new Rule(-17, new int[]{-17,195,-18});
    rules[204] = new Rule(-18, new int[]{-19});
    rules[205] = new Rule(-18, new int[]{-18,124,-19});
    rules[206] = new Rule(-19, new int[]{-20});
    rules[207] = new Rule(-19, new int[]{-19,94,-20});
    rules[208] = new Rule(-20, new int[]{-21});
    rules[209] = new Rule(-20, new int[]{-20,38,-21});
    rules[210] = new Rule(-21, new int[]{-22});
    rules[211] = new Rule(-21, new int[]{-21,190,-22});
    rules[212] = new Rule(-21, new int[]{-21,193,-22});
    rules[213] = new Rule(-22, new int[]{-23});
    rules[214] = new Rule(-22, new int[]{-22,60,-23});
    rules[215] = new Rule(-22, new int[]{-22,62,-23});
    rules[216] = new Rule(-22, new int[]{-22,192,-23});
    rules[217] = new Rule(-22, new int[]{-22,191,-23});
    rules[218] = new Rule(-22, new int[]{-22,159,-108});
    rules[219] = new Rule(-23, new int[]{-24});
    rules[220] = new Rule(-23, new int[]{-23,199,-24});
    rules[221] = new Rule(-23, new int[]{-23,200,-24});
    rules[222] = new Rule(-23, new int[]{-23,201,-24});
    rules[223] = new Rule(-24, new int[]{-25});
    rules[224] = new Rule(-24, new int[]{-24,43,-25});
    rules[225] = new Rule(-24, new int[]{-24,45,-25});
    rules[226] = new Rule(-25, new int[]{-26});
    rules[227] = new Rule(-25, new int[]{-25,42,-26});
    rules[228] = new Rule(-25, new int[]{-25,47,-26});
    rules[229] = new Rule(-25, new int[]{-25,37,-26});
    rules[230] = new Rule(-26, new int[]{-29});
    rules[231] = new Rule(-26, new int[]{-30});
    rules[232] = new Rule(-26, new int[]{43,-26});
    rules[233] = new Rule(-26, new int[]{45,-26});
    rules[234] = new Rule(-26, new int[]{-31});
    rules[235] = new Rule(-29, new int[]{197,-26});
    rules[236] = new Rule(-30, new int[]{198,-26});
    rules[237] = new Rule(-31, new int[]{-27});
    rules[238] = new Rule(-31, new int[]{126,-26});
    rules[239] = new Rule(-31, new int[]{33,-26});
    rules[240] = new Rule(-31, new int[]{-33});
    rules[241] = new Rule(-27, new int[]{-28});
    rules[242] = new Rule(-27, new int[]{-5});
    rules[243] = new Rule(-27, new int[]{-34});
    rules[244] = new Rule(-27, new int[]{-35});
    rules[245] = new Rule(-34, new int[]{-27,197});
    rules[246] = new Rule(-35, new int[]{-27,198});
    rules[247] = new Rule(-33, new int[]{40,-109,41,-26});
    rules[248] = new Rule(-135, new int[]{-135,-136});
    rules[249] = new Rule(-135, new int[]{});
    rules[250] = new Rule(-136, new int[]{38});
    rules[251] = new Rule(-32, new int[]{-12});
=======
    rules[102] = new Rule(-60, new int[]{-51});
    rules[103] = new Rule(-60, new int[]{-61});
    rules[104] = new Rule(-51, new int[]{-50});
    rules[105] = new Rule(-51, new int[]{-58});
    rules[106] = new Rule(-51, new int[]{-78});
    rules[107] = new Rule(-51, new int[]{-70});
    rules[108] = new Rule(-51, new int[]{-79});
    rules[109] = new Rule(-51, new int[]{-80});
    rules[110] = new Rule(-51, new int[]{-71});
    rules[111] = new Rule(-51, new int[]{-72});
    rules[112] = new Rule(-51, new int[]{-73});
    rules[113] = new Rule(-51, new int[]{-76});
    rules[114] = new Rule(-51, new int[]{-65});
    rules[115] = new Rule(-76, new int[]{137,-12,59});
    rules[116] = new Rule(-76, new int[]{137,-12,58,-12,59});
    rules[117] = new Rule(-73, new int[]{136,40,-12,41,-90});
    rules[118] = new Rule(-90, new int[]{123,-89,125});
    rules[119] = new Rule(-89, new int[]{-74});
    rules[120] = new Rule(-89, new int[]{-89,-74});
    rules[121] = new Rule(-74, new int[]{-88,-85});
    rules[122] = new Rule(-88, new int[]{-75});
    rules[123] = new Rule(-88, new int[]{-88,-75});
    rules[124] = new Rule(-75, new int[]{157,-32,58});
    rules[125] = new Rule(-75, new int[]{138,58});
    rules[126] = new Rule(-70, new int[]{143,-44,181,40,-12,41,59});
    rules[127] = new Rule(-71, new int[]{151,-12,59});
    rules[128] = new Rule(-72, new int[]{141,40,-12,41,-58});
    rules[129] = new Rule(-50, new int[]{-2,59});
    rules[130] = new Rule(-2, new int[]{-3});
    rules[131] = new Rule(-2, new int[]{-36});
    rules[132] = new Rule(-2, new int[]{-29});
    rules[133] = new Rule(-2, new int[]{-30});
    rules[134] = new Rule(-2, new int[]{-34});
    rules[135] = new Rule(-2, new int[]{-35});
    rules[136] = new Rule(-36, new int[]{-110,40,-40,41});
    rules[137] = new Rule(-36, new int[]{-109,46,131,40,-40,41});
    rules[138] = new Rule(-109, new int[]{131});
    rules[139] = new Rule(-109, new int[]{-109,46,131});
    rules[140] = new Rule(-110, new int[]{131});
    rules[141] = new Rule(-40, new int[]{-39});
    rules[142] = new Rule(-40, new int[]{});
    rules[143] = new Rule(-39, new int[]{-39,44,-12});
    rules[144] = new Rule(-39, new int[]{-12});
    rules[145] = new Rule(-62, new int[]{139,40,-12,41,-44});
    rules[146] = new Rule(-63, new int[]{139,40,-12,41,-60,153,-44});
    rules[147] = new Rule(-61, new int[]{139,40,-12,41,-60,153,-60});
    rules[148] = new Rule(-64, new int[]{181,40,-12,41,-44});
    rules[149] = new Rule(-65, new int[]{166,-58,-66});
    rules[150] = new Rule(-65, new int[]{166,-58,-67,-69});
    rules[151] = new Rule(-67, new int[]{-66});
    rules[152] = new Rule(-67, new int[]{});
    rules[153] = new Rule(-66, new int[]{-68});
    rules[154] = new Rule(-68, new int[]{162,40,41,-58});
    rules[155] = new Rule(-69, new int[]{173,-58});
    rules[156] = new Rule(-77, new int[]{131,58,-44});
    rules[157] = new Rule(-78, new int[]{147,-115,59});
    rules[158] = new Rule(-115, new int[]{131});
    rules[159] = new Rule(-115, new int[]{});
    rules[160] = new Rule(-79, new int[]{133,-115,59});
    rules[161] = new Rule(-80, new int[]{160,-116,59});
    rules[162] = new Rule(-116, new int[]{-12});
    rules[163] = new Rule(-116, new int[]{});
    rules[164] = new Rule(-3, new int[]{-4,-124,-12});
    rules[165] = new Rule(-4, new int[]{-5});
    rules[166] = new Rule(-5, new int[]{131});
    rules[167] = new Rule(-124, new int[]{61});
    rules[168] = new Rule(-10, new int[]{-3});
    rules[169] = new Rule(-10, new int[]{-15});
    rules[170] = new Rule(-28, new int[]{-11});
    rules[171] = new Rule(-11, new int[]{-1});
    rules[172] = new Rule(-11, new int[]{-36});
    rules[173] = new Rule(-1, new int[]{182});
    rules[174] = new Rule(-1, new int[]{183});
    rules[175] = new Rule(-1, new int[]{184});
    rules[176] = new Rule(-1, new int[]{185});
    rules[177] = new Rule(-1, new int[]{186});
    rules[178] = new Rule(-1, new int[]{187});
    rules[179] = new Rule(-12, new int[]{-13});
    rules[180] = new Rule(-12, new int[]{-10});
    rules[181] = new Rule(-13, new int[]{-125,194,-14});
    rules[182] = new Rule(-125, new int[]{});
    rules[183] = new Rule(-14, new int[]{});
    rules[184] = new Rule(-15, new int[]{-16});
    rules[185] = new Rule(-16, new int[]{-17});
    rules[186] = new Rule(-16, new int[]{-16,196,-17});
    rules[187] = new Rule(-17, new int[]{-18});
    rules[188] = new Rule(-17, new int[]{-17,195,-18});
    rules[189] = new Rule(-18, new int[]{-19});
    rules[190] = new Rule(-18, new int[]{-18,124,-19});
    rules[191] = new Rule(-19, new int[]{-20});
    rules[192] = new Rule(-19, new int[]{-19,94,-20});
    rules[193] = new Rule(-20, new int[]{-21});
    rules[194] = new Rule(-20, new int[]{-20,38,-21});
    rules[195] = new Rule(-21, new int[]{-22});
    rules[196] = new Rule(-21, new int[]{-21,190,-22});
    rules[197] = new Rule(-21, new int[]{-21,193,-22});
    rules[198] = new Rule(-22, new int[]{-23});
    rules[199] = new Rule(-22, new int[]{-22,60,-23});
    rules[200] = new Rule(-22, new int[]{-22,62,-23});
    rules[201] = new Rule(-22, new int[]{-22,192,-23});
    rules[202] = new Rule(-22, new int[]{-22,191,-23});
    rules[203] = new Rule(-22, new int[]{-22,159,-100});
    rules[204] = new Rule(-23, new int[]{-24});
    rules[205] = new Rule(-23, new int[]{-23,199,-24});
    rules[206] = new Rule(-23, new int[]{-23,200,-24});
    rules[207] = new Rule(-23, new int[]{-23,201,-24});
    rules[208] = new Rule(-24, new int[]{-25});
    rules[209] = new Rule(-24, new int[]{-24,43,-25});
    rules[210] = new Rule(-24, new int[]{-24,45,-25});
    rules[211] = new Rule(-25, new int[]{-26});
    rules[212] = new Rule(-25, new int[]{-25,42,-26});
    rules[213] = new Rule(-25, new int[]{-25,47,-26});
    rules[214] = new Rule(-25, new int[]{-25,37,-26});
    rules[215] = new Rule(-26, new int[]{-29});
    rules[216] = new Rule(-26, new int[]{-30});
    rules[217] = new Rule(-26, new int[]{43,-26});
    rules[218] = new Rule(-26, new int[]{45,-26});
    rules[219] = new Rule(-26, new int[]{-31});
    rules[220] = new Rule(-29, new int[]{197,-26});
    rules[221] = new Rule(-30, new int[]{198,-26});
    rules[222] = new Rule(-31, new int[]{-27});
    rules[223] = new Rule(-31, new int[]{126,-26});
    rules[224] = new Rule(-31, new int[]{33,-26});
    rules[225] = new Rule(-31, new int[]{-33});
    rules[226] = new Rule(-27, new int[]{-28});
    rules[227] = new Rule(-27, new int[]{-5});
    rules[228] = new Rule(-27, new int[]{-34});
    rules[229] = new Rule(-27, new int[]{-35});
    rules[230] = new Rule(-34, new int[]{-27,197});
    rules[231] = new Rule(-35, new int[]{-27,198});
    rules[232] = new Rule(-33, new int[]{40,-101,41,-26});
    rules[233] = new Rule(-126, new int[]{-126,-127});
    rules[234] = new Rule(-126, new int[]{});
    rules[235] = new Rule(-127, new int[]{38});
    rules[236] = new Rule(-32, new int[]{-12});
>>>>>>> master
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // Program -> CompilationUnit
<<<<<<< HEAD
#line 130 "parser.y"
=======
#line 129 "parser.y"
>>>>>>> master
                                   {root = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 4: // CompilationUnit -> PackageDeclaration_opt, ImportDeclarations, TypeDeclarations
<<<<<<< HEAD
#line 138 "parser.y"
=======
#line 137 "parser.y"
>>>>>>> master
                                                               { CurrentSemanticValue.stmt = new CompilationUnitDeclaration(ValueStack[ValueStack.Depth-3].stmt,ValueStack[ValueStack.Depth-2].stmts,ValueStack[ValueStack.Depth-1].stmts);  }
#line default
        break;
      case 6: // ImportDeclarations -> ImportDeclaration
<<<<<<< HEAD
#line 147 "parser.y"
=======
#line 146 "parser.y"
>>>>>>> master
                                 { CurrentSemanticValue.stmts = new List<Statement> {ValueStack[ValueStack.Depth-1].stmt};}
#line default
        break;
      case 7: // ImportDeclarations -> ImportDeclarations, ImportDeclaration
<<<<<<< HEAD
#line 148 "parser.y"
=======
#line 147 "parser.y"
>>>>>>> master
                                                  { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 9: // ImportDeclaration -> IMPORT, TypeName, ';'
<<<<<<< HEAD
#line 153 "parser.y"
=======
#line 152 "parser.y"
>>>>>>> master
                                  {  CurrentSemanticValue.stmt = new ImportDeclaration(ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 10: // ImportDeclaration -> IMPORT, TypeName, '.', '*', ';'
<<<<<<< HEAD
#line 154 "parser.y"
=======
#line 153 "parser.y"
>>>>>>> master
                                         {  CurrentSemanticValue.stmt = new ImportDeclaration(ValueStack[ValueStack.Depth-4].name); }
#line default
        break;
      case 11: // ImportDeclaration -> IMPORT, STATIC, TypeName, '.', IDENTIFIER, ';'
<<<<<<< HEAD
#line 155 "parser.y"
=======
#line 154 "parser.y"
>>>>>>> master
                                                   {  CurrentSemanticValue.stmt = new ImportDeclaration(ValueStack[ValueStack.Depth-4].name,ValueStack[ValueStack.Depth-2].name); }
#line default
        break;
      case 12: // ImportDeclaration -> IMPORT, STATIC, TypeName, '.', '*', ';'
<<<<<<< HEAD
#line 156 "parser.y"
=======
#line 155 "parser.y"
>>>>>>> master
                                                                  {  CurrentSemanticValue.stmt = new ImportDeclaration(ValueStack[ValueStack.Depth-4].name); }
#line default
        break;
      case 15: // TypeDeclarations -> TypeDeclarations, TypeDeclaration
<<<<<<< HEAD
#line 165 "parser.y"
=======
#line 164 "parser.y"
>>>>>>> master
                                          { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 16: // TypeDeclarations -> /* empty */
<<<<<<< HEAD
#line 166 "parser.y"
=======
#line 165 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.stmts = new List<Statement>();}
#line default
        break;
      case 17: // TypeDeclaration -> ClassDeclaration
<<<<<<< HEAD
#line 170 "parser.y"
=======
#line 169 "parser.y"
>>>>>>> master
                                                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 18: // ClassDeclaration -> NormalClassDeclaration
<<<<<<< HEAD
#line 174 "parser.y"
=======
#line 173 "parser.y"
>>>>>>> master
                                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 19: // NormalClassDeclaration -> ClassModifiers, CLASS, IDENTIFIER, TypeParameters_opt, 
               //                           Superclass_opt, Superinterfaces_opt, ClassBody
<<<<<<< HEAD
#line 178 "parser.y"
=======
#line 177 "parser.y"
>>>>>>> master
                                                                                                    {  CurrentSemanticValue.stmt = new ClassDeclaration(ValueStack[ValueStack.Depth-5].name,ValueStack[ValueStack.Depth-7].modfs,ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 20: // ClassModifiers -> ClassModifiers, ClassModifier
<<<<<<< HEAD
#line 182 "parser.y"
=======
#line 181 "parser.y"
>>>>>>> master
                                       { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 21: // ClassModifiers -> /* empty */
<<<<<<< HEAD
#line 183 "parser.y"
=======
#line 182 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 22: // ClassModifier -> PUBLIC
<<<<<<< HEAD
#line 187 "parser.y"
=======
#line 186 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 23: // ClassModifier -> PROTECTED
<<<<<<< HEAD
#line 188 "parser.y"
=======
#line 187 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.modf = Modifier.PROTECTED; }
#line default
        break;
      case 24: // ClassModifier -> PRIVATE
<<<<<<< HEAD
#line 189 "parser.y"
=======
#line 188 "parser.y"
>>>>>>> master
                        { CurrentSemanticValue.modf = Modifier.PRIVATE; }
#line default
        break;
      case 25: // ClassModifier -> ABSTRACT
<<<<<<< HEAD
#line 190 "parser.y"
=======
#line 189 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.modf = Modifier.ABSTRACT; }
#line default
        break;
      case 26: // ClassModifier -> STATIC
<<<<<<< HEAD
#line 191 "parser.y"
=======
#line 190 "parser.y"
>>>>>>> master
                       { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 27: // ClassModifier -> FINAL
<<<<<<< HEAD
#line 192 "parser.y"
=======
#line 191 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 28: // ClassModifier -> STRICTFP
<<<<<<< HEAD
#line 193 "parser.y"
=======
#line 192 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.modf = Modifier.STRICTFP; }
#line default
        break;
      case 29: // TypeParameters_opt -> /* empty */
<<<<<<< HEAD
#line 198 "parser.y"
=======
#line 197 "parser.y"
>>>>>>> master
                                        { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 30: // Superclass_opt -> /* empty */
<<<<<<< HEAD
#line 201 "parser.y"
=======
#line 200 "parser.y"
>>>>>>> master
                                     { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 31: // Superinterfaces_opt -> /* empty */
<<<<<<< HEAD
#line 204 "parser.y"
=======
#line 203 "parser.y"
>>>>>>> master
                                         { CurrentSemanticValue.expr = null; }
#line default
        break;
      case 32: // ClassBody -> '{', ClassBodyDeclarations, '}'
<<<<<<< HEAD
#line 208 "parser.y"
=======
#line 207 "parser.y"
>>>>>>> master
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
#line default
        break;
      case 33: // ClassBodyDeclarations -> ClassBodyDeclarations, ClassBodyDeclaration
<<<<<<< HEAD
#line 215 "parser.y"
=======
#line 214 "parser.y"
>>>>>>> master
                                                 { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 34: // ClassBodyDeclarations -> /* empty */
<<<<<<< HEAD
#line 216 "parser.y"
=======
#line 215 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.stmts = new List<Statement>(); }
#line default
        break;
      case 35: // ClassBodyDeclaration -> ClassMemberDeclaration
<<<<<<< HEAD
#line 220 "parser.y"
=======
#line 219 "parser.y"
>>>>>>> master
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 36: // ClassMemberDeclaration -> MethodDeclaration
<<<<<<< HEAD
#line 225 "parser.y"
=======
#line 224 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 37: // MethodDeclaration -> MethodModifiers, MethodHeader, MethodBody
<<<<<<< HEAD
#line 230 "parser.y"
=======
#line 229 "parser.y"
>>>>>>> master
                                               { CurrentSemanticValue.stmt = new MethodDeclaration( (string)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[0], ValueStack[ValueStack.Depth-3].modfs, ValueStack[ValueStack.Depth-1].stmt, (AST.Type)ValueStack[ValueStack.Depth-2].arrlst[0], (List<Expression>)((ArrayList)ValueStack[ValueStack.Depth-2].arrlst[1])[1]); }
#line default
        break;
      case 38: // MethodModifiers -> MethodModifiers, MethodModifier
<<<<<<< HEAD
#line 234 "parser.y"
=======
#line 233 "parser.y"
>>>>>>> master
                                              { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 39: // MethodModifiers -> /* empty */
<<<<<<< HEAD
#line 235 "parser.y"
=======
#line 234 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 40: // MethodModifier -> PUBLIC
<<<<<<< HEAD
#line 239 "parser.y"
=======
#line 238 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.modf = Modifier.PUBLIC; }
#line default
        break;
      case 41: // MethodModifier -> STATIC
<<<<<<< HEAD
#line 240 "parser.y"
=======
#line 239 "parser.y"
>>>>>>> master
                            { CurrentSemanticValue.modf = Modifier.STATIC; }
#line default
        break;
      case 42: // MethodHeader -> Result, MethodDeclarator, Throws_opt
<<<<<<< HEAD
#line 244 "parser.y"
=======
#line 243 "parser.y"
>>>>>>> master
                                           {CurrentSemanticValue.arrlst = new ArrayList() { ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-2].arrlst, ValueStack[ValueStack.Depth-1].stmt } ; }
#line default
        break;
      case 43: // Result -> VOID
<<<<<<< HEAD
#line 252 "parser.y"
=======
#line 251 "parser.y"
>>>>>>> master
                     {CurrentSemanticValue.type = new NamedType("VOID"); }
#line default
        break;
      case 44: // Result -> UnannType
<<<<<<< HEAD
#line 253 "parser.y"
=======
#line 252 "parser.y"
>>>>>>> master
                         {CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 45: // Throws_opt -> Empty
<<<<<<< HEAD
#line 257 "parser.y"
=======
#line 256 "parser.y"
>>>>>>> master
                      {CurrentSemanticValue.stmt = null; }
#line default
        break;
      case 46: // MethodDeclarator -> IDENTIFIER, '(', FormalParameterList_Opt, ')', Dims_Opt
<<<<<<< HEAD
#line 262 "parser.y"
=======
#line 261 "parser.y"
>>>>>>> master
                                                        {CurrentSemanticValue.arrlst =  new ArrayList() { ValueStack[ValueStack.Depth-5].name, ValueStack[ValueStack.Depth-3].exprlst, ValueStack[ValueStack.Depth-1] };}
#line default
        break;
      case 47: // FormalParameterList_Opt -> FormalParameterList
<<<<<<< HEAD
#line 267 "parser.y"
=======
#line 266 "parser.y"
>>>>>>> master
                                { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-1].exprlst; }
#line default
        break;
      case 48: // FormalParameterList_Opt -> /* empty */
<<<<<<< HEAD
#line 268 "parser.y"
=======
#line 267 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.exprlst = null; }
#line default
        break;
      case 49: // FormalParameterList -> FormalParameters
<<<<<<< HEAD
#line 275 "parser.y"
=======
#line 274 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-1].exprlst; }
#line default
        break;
      case 50: // FormalParameters -> FormalParameter
<<<<<<< HEAD
#line 279 "parser.y"
=======
#line 278 "parser.y"
>>>>>>> master
                              { CurrentSemanticValue.exprlst = new List<Expression> { ValueStack[ValueStack.Depth-1].expr }; }
#line default
        break;
      case 51: // FormalParameters -> FormalParameters, ',', FormalParameter
<<<<<<< HEAD
#line 280 "parser.y"
=======
#line 279 "parser.y"
>>>>>>> master
                                             { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-3].exprlst; CurrentSemanticValue.exprlst.Add(ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 52: // FormalParameter -> VariableModifiers, UnannType, VariableDeclaratorId
<<<<<<< HEAD
#line 284 "parser.y"
=======
#line 283 "parser.y"
>>>>>>> master
                                                       { CurrentSemanticValue.expr = new FormalParam(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 53: // VariableModifiers -> VariableModifiers, VariableModifier
<<<<<<< HEAD
#line 287 "parser.y"
=======
#line 286 "parser.y"
>>>>>>> master
                                           { CurrentSemanticValue.modfs = ValueStack[ValueStack.Depth-2].modfs; CurrentSemanticValue.modfs.Add(ValueStack[ValueStack.Depth-1].modf); }
#line default
        break;
      case 54: // VariableModifiers -> /* empty */
<<<<<<< HEAD
#line 288 "parser.y"
=======
#line 287 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.modfs = new List<Modifier>(); }
#line default
        break;
      case 55: // VariableModifier -> FINAL
<<<<<<< HEAD
#line 292 "parser.y"
=======
#line 291 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.modf = Modifier.FINAL; }
#line default
        break;
      case 56: // Dims_Opt -> Dims
<<<<<<< HEAD
#line 298 "parser.y"
=======
#line 297 "parser.y"
>>>>>>> master
                     { CurrentSemanticValue = ValueStack[ValueStack.Depth-1]; }
#line default
        break;
      case 57: // Dims_Opt -> /* empty */
<<<<<<< HEAD
#line 299 "parser.y"
=======
#line 298 "parser.y"
>>>>>>> master
                          { }
#line default
        break;
      case 59: // UnannType -> UnannReferenceType
<<<<<<< HEAD
#line 308 "parser.y"
=======
#line 307 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 60: // UnannType -> UnannPrimitiveType
<<<<<<< HEAD
#line 309 "parser.y"
=======
#line 308 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 61: // UnannPrimitiveType -> NumericType
<<<<<<< HEAD
#line 313 "parser.y"
=======
#line 312 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 62: // UnannPrimitiveType -> BOOLEAN
<<<<<<< HEAD
#line 314 "parser.y"
=======
#line 313 "parser.y"
>>>>>>> master
                       { CurrentSemanticValue.type = new NamedType("BOOLEAN"); }
#line default
        break;
      case 67: // NumericType -> IntegralType
<<<<<<< HEAD
#line 334 "parser.y"
=======
#line 333 "parser.y"
>>>>>>> master
                           { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 68: // NumericType -> FloatingPointType
<<<<<<< HEAD
#line 335 "parser.y"
=======
#line 334 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 69: // IntegralType -> BYTE
<<<<<<< HEAD
#line 339 "parser.y"
=======
#line 338 "parser.y"
>>>>>>> master
                     { CurrentSemanticValue.type = new NamedType("BYTE");  }
#line default
        break;
      case 70: // IntegralType -> SHORT
<<<<<<< HEAD
#line 340 "parser.y"
=======
#line 339 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.type = new NamedType("SHORT");  }
#line default
        break;
      case 71: // IntegralType -> INT
<<<<<<< HEAD
#line 341 "parser.y"
=======
#line 340 "parser.y"
>>>>>>> master
                    { CurrentSemanticValue.type = new NamedType("INT");}
#line default
        break;
      case 72: // IntegralType -> LONG
<<<<<<< HEAD
#line 342 "parser.y"
=======
#line 341 "parser.y"
>>>>>>> master
                     { CurrentSemanticValue.type = new NamedType("LONG"); }
#line default
        break;
      case 73: // IntegralType -> CHAR
<<<<<<< HEAD
#line 343 "parser.y"
=======
#line 342 "parser.y"
>>>>>>> master
                     { CurrentSemanticValue.type = new NamedType("CHAR"); }
#line default
        break;
      case 74: // FloatingPointType -> FLOAT
<<<<<<< HEAD
#line 347 "parser.y"
=======
#line 346 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.type = new NamedType("FLOAT"); }
#line default
        break;
      case 75: // FloatingPointType -> DOUBLE
<<<<<<< HEAD
#line 348 "parser.y"
=======
#line 347 "parser.y"
>>>>>>> master
                      { CurrentSemanticValue.type = new NamedType("DOUBLE"); }
#line default
        break;
      case 76: // UnannReferenceType -> UnannArrayType
<<<<<<< HEAD
#line 352 "parser.y"
=======
#line 351 "parser.y"
>>>>>>> master
                            { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 77: // UnannReferenceType -> UnannTypeVariable
<<<<<<< HEAD
#line 353 "parser.y"
=======
#line 352 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.type = ValueStack[ValueStack.Depth-1].type; }
#line default
        break;
      case 78: // UnannArrayType -> UnannTypeVariable, Dims
<<<<<<< HEAD
#line 359 "parser.y"
=======
#line 358 "parser.y"
>>>>>>> master
                                  { CurrentSemanticValue.type = new ArrayType(ValueStack[ValueStack.Depth-2].type); }
#line default
        break;
      case 79: // UnannTypeVariable -> IDENTIFIER
<<<<<<< HEAD
#line 363 "parser.y"
=======
#line 362 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.type = new NamedType(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 80: // MethodBody -> Block
<<<<<<< HEAD
#line 368 "parser.y"
=======
#line 367 "parser.y"
>>>>>>> master
                       { CurrentSemanticValue.stmt= ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 81: // MethodBody -> ';'
<<<<<<< HEAD
#line 369 "parser.y"
=======
#line 368 "parser.y"
>>>>>>> master
                    { CurrentSemanticValue.stmt= null;}
#line default
        break;
      case 82: // Block -> '{', BlockStatements_Opt, '}'
<<<<<<< HEAD
#line 379 "parser.y"
=======
#line 378 "parser.y"
>>>>>>> master
                                      { CurrentSemanticValue.stmt = new BlockStatement(ValueStack[ValueStack.Depth-2].stmts); }
#line default
        break;
      case 83: // BlockStatements_Opt -> BlockStatements
<<<<<<< HEAD
#line 383 "parser.y"
=======
#line 382 "parser.y"
>>>>>>> master
                             { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-1].stmts; }
#line default
        break;
      case 84: // BlockStatements_Opt -> /* empty */
<<<<<<< HEAD
#line 384 "parser.y"
=======
#line 383 "parser.y"
>>>>>>> master
                          { CurrentSemanticValue.stmts = null; }
#line default
        break;
      case 85: // BlockStatements -> BlockStatement
<<<<<<< HEAD
#line 388 "parser.y"
=======
#line 387 "parser.y"
>>>>>>> master
                            { CurrentSemanticValue.stmts = new List<Statement> { ValueStack[ValueStack.Depth-1].stmt };}
#line default
        break;
      case 86: // BlockStatements -> BlockStatements, BlockStatement
<<<<<<< HEAD
#line 389 "parser.y"
=======
#line 388 "parser.y"
>>>>>>> master
                                        { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 87: // BlockStatement -> LocalVariableDeclarationStatement
<<<<<<< HEAD
#line 393 "parser.y"
=======
#line 392 "parser.y"
>>>>>>> master
                                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 88: // BlockStatement -> Statement
<<<<<<< HEAD
#line 394 "parser.y"
=======
#line 393 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 89: // LocalVariableDeclarationStatement -> LocalVariableDeclaration, ';'
<<<<<<< HEAD
#line 398 "parser.y"
=======
#line 397 "parser.y"
>>>>>>> master
                                       { CurrentSemanticValue.stmt = new VariableDeclarationStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 90: // LocalVariableDeclaration -> UnannType, VariableDeclaratorList
<<<<<<< HEAD
#line 402 "parser.y"
=======
#line 401 "parser.y"
>>>>>>> master
                                          { CurrentSemanticValue.expr = new VariableDeclarationList(ValueStack[ValueStack.Depth-2].type, ValueStack[ValueStack.Depth-1].vardeclst); }
#line default
        break;
      case 91: // VariableDeclaratorList -> VariableDeclarator
<<<<<<< HEAD
#line 408 "parser.y"
=======
#line 407 "parser.y"
>>>>>>> master
                               { CurrentSemanticValue.vardeclst = new List<VariableDeclarator> { ValueStack[ValueStack.Depth-1].vardec }; }
#line default
        break;
      case 92: // VariableDeclaratorList -> VariableDeclaratorList, ',', VariableDeclarator
<<<<<<< HEAD
#line 409 "parser.y"
=======
#line 408 "parser.y"
>>>>>>> master
                                                    { CurrentSemanticValue.vardeclst = ValueStack[ValueStack.Depth-3].vardeclst; CurrentSemanticValue.vardeclst.Add(ValueStack[ValueStack.Depth-1].vardec); }
#line default
        break;
      case 93: // VariableDeclarator -> VariableDeclaratorId
<<<<<<< HEAD
#line 413 "parser.y"
=======
#line 412 "parser.y"
>>>>>>> master
                                 { CurrentSemanticValue.vardec = new VariableDeclarator(ValueStack[ValueStack.Depth-1].name, null); }
#line default
        break;
      case 94: // VariableDeclarator -> VariableDeclaratorId, '=', VariableInitialiser
<<<<<<< HEAD
#line 414 "parser.y"
=======
#line 413 "parser.y"
>>>>>>> master
                                                   { CurrentSemanticValue.vardec = new VariableDeclarator(ValueStack[ValueStack.Depth-3].name, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 95: // VariableInitialiser -> Expression
<<<<<<< HEAD
#line 418 "parser.y"
=======
#line 417 "parser.y"
>>>>>>> master
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 96: // VariableDeclaratorId -> IDENTIFIER, Dims_Opt
<<<<<<< HEAD
#line 422 "parser.y"
=======
#line 421 "parser.y"
>>>>>>> master
                                { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-2].name; }
#line default
        break;
      case 97: // Statement -> StatementWithoutTrailingSubstatement
<<<<<<< HEAD
#line 426 "parser.y"
=======
#line 425 "parser.y"
>>>>>>> master
                                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 98: // Statement -> IfThenStatement
<<<<<<< HEAD
#line 427 "parser.y"
=======
#line 426 "parser.y"
>>>>>>> master
                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 99: // Statement -> IfThenElseStatement
<<<<<<< HEAD
#line 428 "parser.y"
=======
#line 427 "parser.y"
>>>>>>> master
                                {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 100: // Statement -> WhileStatement
<<<<<<< HEAD
#line 429 "parser.y"
=======
#line 428 "parser.y"
>>>>>>> master
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 101: // Statement -> LabeledStatement
<<<<<<< HEAD
#line 430 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 102: // Statement -> ForStatement
#line 431 "parser.y"
                           {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 103: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 435 "parser.y"
                                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 104: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 436 "parser.y"
                                       {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 105: // StatementNoShortIf -> ForStatementNoShortIf
#line 437 "parser.y"
                                  {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 106: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 442 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 107: // StatementWithoutTrailingSubstatement -> Block
#line 443 "parser.y"
                      { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 108: // StatementWithoutTrailingSubstatement -> BreakStatement
#line 444 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 109: // StatementWithoutTrailingSubstatement -> DoStatement
#line 445 "parser.y"
                          { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 110: // StatementWithoutTrailingSubstatement -> ContinueStatement
#line 446 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 111: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 447 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 112: // StatementWithoutTrailingSubstatement -> ThrowStatement
#line 448 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 113: // StatementWithoutTrailingSubstatement -> SynchronizedStatement
#line 449 "parser.y"
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 114: // StatementWithoutTrailingSubstatement -> SwitchStatement
#line 450 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 115: // StatementWithoutTrailingSubstatement -> AssertStatement
#line 451 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 116: // StatementWithoutTrailingSubstatement -> TryStatement
#line 452 "parser.y"
                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 117: // AssertStatement -> ASSERT, Expression, ';'
#line 456 "parser.y"
                                  { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 118: // AssertStatement -> ASSERT, Expression, ':', Expression, ';'
#line 457 "parser.y"
                                             { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 119: // SwitchStatement -> SWITCH, '(', Expression, ')', SwitchBlock
#line 461 "parser.y"
                                              { CurrentSemanticValue.stmt = new SwitchStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 120: // SwitchBlock -> '{', SwitchBlockStatementGroups, '}'
#line 465 "parser.y"
                                            { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
#line default
        break;
      case 121: // SwitchBlockStatementGroups -> SwitchBlockStatementGroup
#line 469 "parser.y"
                                      { CurrentSemanticValue.stmts = new List<Statement> {ValueStack[ValueStack.Depth-1].stmt}; }
#line default
        break;
      case 122: // SwitchBlockStatementGroups -> SwitchBlockStatementGroups, 
                //                               SwitchBlockStatementGroup
#line 470 "parser.y"
                                                          { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 123: // SwitchBlockStatementGroup -> SwitchLabels, BlockStatements
#line 474 "parser.y"
                                       { CurrentSemanticValue.stmt = new SwitchBlockGroup(ValueStack[ValueStack.Depth-2].stmts, ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 124: // SwitchLabels -> SwitchLabel
#line 478 "parser.y"
                           { CurrentSemanticValue.stmts = new List<Statement> {ValueStack[ValueStack.Depth-1].stmt};}
#line default
        break;
      case 125: // SwitchLabels -> SwitchLabels, SwitchLabel
#line 479 "parser.y"
                                     { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 126: // SwitchLabel -> CASE, ConstantExpression, ':'
#line 483 "parser.y"
                                      { CurrentSemanticValue.stmt = new SwitchLabelStatement(ValueStack[ValueStack.Depth-2].expr) ;}
#line default
        break;
      case 127: // SwitchLabel -> DEFAULT, ':'
#line 484 "parser.y"
                          { CurrentSemanticValue.stmt = new SwitchLabelStatement(); }
#line default
        break;
      case 128: // DoStatement -> DO, Statement, WHILE, '(', Expression, ')', ';'
#line 489 "parser.y"
                                                 { CurrentSemanticValue.stmt = new DoStatement(ValueStack[ValueStack.Depth-6].stmt, ValueStack[ValueStack.Depth-3].expr); }
#line default
        break;
      case 129: // ForStatement -> BasicForStatement
#line 492 "parser.y"
                               {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 130: // ForStatement -> EnhancedForStatement
#line 493 "parser.y"
                                 {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 131: // ForStatementNoShortIf -> BasicForStatementNoShortIf
#line 497 "parser.y"
                                     {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 132: // ForStatementNoShortIf -> EnhancedForStatementNoShortIf
#line 498 "parser.y"
                                        {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 140: // EnhancedForStatement -> FOR, '(', VariableModifiers, UnannType, 
                //                         VariableDeclaratorId, ':', Expression, ')', Statement
#line 526 "parser.y"
                                                                                            {CurrentSemanticValue.stmt= new EnhancedForStatement(ValueStack[ValueStack.Depth-7].modfs,ValueStack[ValueStack.Depth-6].type,ValueStack[ValueStack.Depth-5].name,ValueStack[ValueStack.Depth-3].expr,ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 142: // ThrowStatement -> THROW, Expression, ';'
#line 533 "parser.y"
                                 { CurrentSemanticValue.stmt = new ThrowStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 143: // SynchronizedStatement -> SYNCHRONIZED, '(', Expression, ')', Block
#line 537 "parser.y"
                                              { CurrentSemanticValue.stmt = new SynchronizedStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 144: // ExpressionStatement -> StatementExpression, ';'
#line 541 "parser.y"
                                   { CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 145: // StatementExpression -> Assignment
#line 545 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 146: // StatementExpression -> MethodInvocation
#line 546 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 147: // StatementExpression -> PreIncrementExpression
#line 547 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 148: // StatementExpression -> PreDecrementExpression
#line 548 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 149: // StatementExpression -> PostIncrementExpression
#line 549 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 150: // StatementExpression -> PostDecrementExpression
#line 550 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 151: // MethodInvocation -> MethodName, '(', ArgumentList_opt, ')'
#line 555 "parser.y"
                                            { CurrentSemanticValue.expr = new MethodInvocation(ValueStack[ValueStack.Depth-4].name, ValueStack[ValueStack.Depth-2].exprlst); }
#line default
        break;
      case 152: // MethodInvocation -> PackageOrTypeName, '.', IDENTIFIER, '(', ArgumentList_opt, 
                //                     ')'
#line 556 "parser.y"
                                                               { CurrentSemanticValue.expr = new MethodInvocation( ValueStack[ValueStack.Depth-6].name + '.' + ValueStack[ValueStack.Depth-4].name, ValueStack[ValueStack.Depth-2].exprlst); }
#line default
        break;
      case 153: // PackageOrTypeName -> IDENTIFIER
#line 560 "parser.y"
                         { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 154: // PackageOrTypeName -> PackageOrTypeName, '.', IDENTIFIER
#line 561 "parser.y"
                                          { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-3].name + '.' + ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 155: // MethodName -> IDENTIFIER
#line 565 "parser.y"
                         { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 156: // ArgumentList_opt -> ArgumentList
#line 569 "parser.y"
                           { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-1].exprlst; }
#line default
        break;
      case 157: // ArgumentList_opt -> /* empty */
#line 570 "parser.y"
                          { }
#line default
        break;
      case 158: // ArgumentList -> ArgumentList, ',', Expression
#line 574 "parser.y"
                                      { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-3].exprlst; CurrentSemanticValue.exprlst.Add(ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 159: // ArgumentList -> Expression
#line 575 "parser.y"
                         { CurrentSemanticValue.exprlst = new List<Expression> {ValueStack[ValueStack.Depth-1].expr}; }
#line default
        break;
      case 160: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 580 "parser.y"
                                         { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt,null); }
#line default
        break;
      case 161: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
                //                        Statement
#line 585 "parser.y"
                                                               { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 162: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
                //                                 ELSE, StatementNoShortIf
#line 589 "parser.y"
                                                                      { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 163: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 593 "parser.y"
                                           { CurrentSemanticValue.stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 164: // TryStatement -> TRY, Block, Catches
#line 597 "parser.y"
                               { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt, null); }
#line default
        break;
      case 165: // TryStatement -> TRY, Block, Catches_opt, Finally
#line 598 "parser.y"
                                        { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 166: // Catches_opt -> Catches
#line 603 "parser.y"
                       { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 167: // Catches_opt -> /* empty */
#line 604 "parser.y"
                          { }
#line default
        break;
      case 168: // Catches -> CatchClause
#line 608 "parser.y"
                          { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 169: // CatchClause -> CATCH, '(', ')', Block
#line 615 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 170: // Finally -> FINALLY, Block
#line 633 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 171: // LabeledStatement -> IDENTIFIER, ':', Statement
#line 642 "parser.y"
                                    { CurrentSemanticValue.stmt = new LabeledStatement(ValueStack[ValueStack.Depth-3].name,ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 172: // BreakStatement -> BREAK, Identifier_opt, ';'
#line 647 "parser.y"
                                     { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new BreakStatement();} else {CurrentSemanticValue.stmt = new BreakStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 175: // ContinueStatement -> CONTINUE, Identifier_opt, ';'
#line 658 "parser.y"
                                        { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new ContinueStatement();} else {CurrentSemanticValue.stmt = new ContinueStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 176: // ReturnStatement -> RETURN, Expression_opt, ';'
#line 663 "parser.y"
                                      { if(ValueStack[ValueStack.Depth-2].expr == null){CurrentSemanticValue.stmt = new ReturnStatement();} else {CurrentSemanticValue.stmt = new ReturnStatement(ValueStack[ValueStack.Depth-2].expr);} }
#line default
        break;
      case 177: // Expression_opt -> Expression
#line 668 "parser.y"
                          { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 179: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 676 "parser.y"
                                                 { CurrentSemanticValue.expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 180: // LeftHandSide -> ExpressionName
#line 680 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 181: // ExpressionName -> IDENTIFIER
#line 684 "parser.y"
                         { CurrentSemanticValue.expr = new VariableExpression(ValueStack[ValueStack.Depth-1].name);  }
#line default
        break;
      case 183: // AssignmentExpression -> Assignment
#line 692 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 184: // AssignmentExpression -> ConditionalExpression
#line 693 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 185: // Primary -> PrimaryNoNewArray
#line 697 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 186: // PrimaryNoNewArray -> Literal
#line 701 "parser.y"
                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 187: // PrimaryNoNewArray -> MethodInvocation
#line 702 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 188: // Literal -> IntegerLiteral
#line 706 "parser.y"
                            { CurrentSemanticValue.expr = (Expression) ValueStack[ValueStack.Depth-1].num;}
#line default
        break;
      case 189: // Literal -> FloatingPointLiteral
#line 707 "parser.y"
                                 {CurrentSemanticValue.expr = (Expression)ValueStack[ValueStack.Depth-1].floatnum;}
#line default
        break;
      case 190: // Literal -> BooleanLiteral
#line 708 "parser.y"
                            { CurrentSemanticValue.expr = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].boolval); }
#line default
        break;
      case 191: // Literal -> CharacterLiteral
#line 709 "parser.y"
                              { CurrentSemanticValue.expr = new CharacterLiteralExpression(ValueStack[ValueStack.Depth-1].charval); }
#line default
        break;
      case 192: // Literal -> StringLiteral
#line 710 "parser.y"
                            { CurrentSemanticValue.expr = new StringLiteralExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 193: // Literal -> NullLiteral
#line 711 "parser.y"
                          { CurrentSemanticValue.expr = new NullLiteralExpression(); }
#line default
        break;
      case 194: // Expression -> LambdaExpression
#line 717 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 195: // Expression -> AssignmentExpression
#line 718 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 196: // LambdaExpression -> LambdaParameters, ARROW, LambdaBody
#line 722 "parser.y"
                                           { }
#line default
        break;
      case 197: // LambdaParameters -> /* empty */
#line 726 "parser.y"
                          { }
#line default
        break;
      case 198: // LambdaBody -> /* empty */
#line 730 "parser.y"
                          { }
#line default
        break;
      case 199: // ConditionalExpression -> ConditionalOrExpression
#line 734 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 200: // ConditionalOrExpression -> ConditionalAndExpression
#line 740 "parser.y"
                                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 201: // ConditionalOrExpression -> ConditionalOrExpression, LOGICAL_OR, 
                //                            ConditionalAndExpression
#line 741 "parser.y"
                                                                { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "||", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 202: // ConditionalAndExpression -> InclusiveOrExpression
#line 745 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 203: // ConditionalAndExpression -> ConditionalAndExpression, LOGICAL_AND, 
                //                             InclusiveOrExpression
#line 746 "parser.y"
                                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 204: // InclusiveOrExpression -> ExclusiveOrExpression
#line 750 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 205: // InclusiveOrExpression -> InclusiveOrExpression, '|', ExclusiveOrExpression
#line 751 "parser.y"
                                                       { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "|", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 206: // ExclusiveOrExpression -> AndExpression
#line 755 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 207: // ExclusiveOrExpression -> ExclusiveOrExpression, '^', AndExpression
#line 756 "parser.y"
                                                 { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "^", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 208: // AndExpression -> EqualityExpression
#line 760 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 209: // AndExpression -> AndExpression, '&', EqualityExpression
#line 761 "parser.y"
                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 210: // EqualityExpression -> RelationalExpression
#line 765 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 211: // EqualityExpression -> EqualityExpression, EQUAL, RelationalExpression
#line 766 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "==", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 212: // EqualityExpression -> EqualityExpression, NOT_EQUAL, RelationalExpression
#line 767 "parser.y"
                                                         { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "!=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 213: // RelationalExpression -> ShiftExpression
#line 771 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 214: // RelationalExpression -> RelationalExpression, '<', ShiftExpression
#line 772 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 215: // RelationalExpression -> RelationalExpression, '>', ShiftExpression
#line 773 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 216: // RelationalExpression -> RelationalExpression, LESS_THAN_OR_EQUAL, 
                //                         ShiftExpression
#line 774 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 217: // RelationalExpression -> RelationalExpression, GREATER_OR_EQUAL, ShiftExpression
#line 775 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 218: // RelationalExpression -> RelationalExpression, INSTANCEOF, ReferenceType
#line 776 "parser.y"
                                                      { CurrentSemanticValue.expr = new InstanceOfExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 219: // ShiftExpression -> AdditiveExpression
#line 780 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 220: // ShiftExpression -> ShiftExpression, LEFT_SHIFT, AdditiveExpression
#line 781 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 221: // ShiftExpression -> ShiftExpression, SIGNED_RIGHT_SHIFT, AdditiveExpression
#line 782 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 222: // ShiftExpression -> ShiftExpression, UNSIGNED_RIGHT_SHIFT, AdditiveExpression
#line 783 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 223: // AdditiveExpression -> MultiplicativeExpression
#line 787 "parser.y"
                                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 224: // AdditiveExpression -> AdditiveExpression, '+', MultiplicativeExpression
#line 788 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 225: // AdditiveExpression -> AdditiveExpression, '-', MultiplicativeExpression
#line 789 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 226: // MultiplicativeExpression -> UnaryExpression
#line 793 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 227: // MultiplicativeExpression -> MultiplicativeExpression, '*', UnaryExpression
#line 794 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "*", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 228: // MultiplicativeExpression -> MultiplicativeExpression, '/', UnaryExpression
#line 795 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "/", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 229: // MultiplicativeExpression -> MultiplicativeExpression, '%', UnaryExpression
#line 796 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "%", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 230: // UnaryExpression -> PreIncrementExpression
#line 800 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 231: // UnaryExpression -> PreDecrementExpression
#line 801 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 232: // UnaryExpression -> '+', UnaryExpression
#line 802 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 233: // UnaryExpression -> '-', UnaryExpression
#line 803 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 234: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 804 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 235: // PreIncrementExpression -> INCREMENT, UnaryExpression
#line 812 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("++", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 236: // PreDecrementExpression -> DECREMENT, UnaryExpression
#line 816 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("--", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 237: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 820 "parser.y"
                                { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 238: // UnaryExpressionNotPlusMinus -> '~', UnaryExpression
#line 821 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("~", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 239: // UnaryExpressionNotPlusMinus -> '!', UnaryExpression
#line 822 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("!", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 240: // UnaryExpressionNotPlusMinus -> CastExpression
#line 823 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 241: // PostfixExpression -> Primary
#line 827 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 242: // PostfixExpression -> ExpressionName
#line 828 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 243: // PostfixExpression -> PostIncrementExpression
#line 829 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 244: // PostfixExpression -> PostDecrementExpression
#line 830 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 245: // PostIncrementExpression -> PostfixExpression, INCREMENT
#line 834 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "++"); }
#line default
        break;
      case 246: // PostDecrementExpression -> PostfixExpression, DECREMENT
#line 838 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "--"); }
#line default
        break;
      case 247: // CastExpression -> '(', PrimitiveType, ')', UnaryExpression
#line 842 "parser.y"
                                                   { CurrentSemanticValue.expr = new CastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 251: // ConstantExpression -> Expression
#line 857 "parser.y"
=======
#line 429 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 102: // StatementNoShortIf -> StatementWithoutTrailingSubstatement
#line 433 "parser.y"
                                             {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 103: // StatementNoShortIf -> IfThenElseStatementNoShortIf
#line 434 "parser.y"
                                       {CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 104: // StatementWithoutTrailingSubstatement -> ExpressionStatement
#line 439 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 105: // StatementWithoutTrailingSubstatement -> Block
#line 440 "parser.y"
                      { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 106: // StatementWithoutTrailingSubstatement -> BreakStatement
#line 441 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 107: // StatementWithoutTrailingSubstatement -> DoStatement
#line 442 "parser.y"
                          { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 108: // StatementWithoutTrailingSubstatement -> ContinueStatement
#line 443 "parser.y"
                               { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 109: // StatementWithoutTrailingSubstatement -> ReturnStatement
#line 444 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 110: // StatementWithoutTrailingSubstatement -> ThrowStatement
#line 445 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 111: // StatementWithoutTrailingSubstatement -> SynchronizedStatement
#line 446 "parser.y"
                                  { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 112: // StatementWithoutTrailingSubstatement -> SwitchStatement
#line 447 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 113: // StatementWithoutTrailingSubstatement -> AssertStatement
#line 448 "parser.y"
                             { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 114: // StatementWithoutTrailingSubstatement -> TryStatement
#line 449 "parser.y"
                           { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt;}
#line default
        break;
      case 115: // AssertStatement -> ASSERT, Expression, ';'
#line 453 "parser.y"
                                  { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 116: // AssertStatement -> ASSERT, Expression, ':', Expression, ';'
#line 454 "parser.y"
                                             { CurrentSemanticValue.stmt = new AssertStatement(ValueStack[ValueStack.Depth-4].expr, ValueStack[ValueStack.Depth-2].expr);}
#line default
        break;
      case 117: // SwitchStatement -> SWITCH, '(', Expression, ')', SwitchBlock
#line 458 "parser.y"
                                              { CurrentSemanticValue.stmt = new SwitchStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 118: // SwitchBlock -> '{', SwitchBlockStatementGroups, '}'
#line 462 "parser.y"
                                            { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; }
#line default
        break;
      case 119: // SwitchBlockStatementGroups -> SwitchBlockStatementGroup
#line 466 "parser.y"
                                      { CurrentSemanticValue.stmts = new List<Statement> {ValueStack[ValueStack.Depth-1].stmt}; }
#line default
        break;
      case 120: // SwitchBlockStatementGroups -> SwitchBlockStatementGroups, 
                //                               SwitchBlockStatementGroup
#line 467 "parser.y"
                                                          { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 121: // SwitchBlockStatementGroup -> SwitchLabels, BlockStatements
#line 471 "parser.y"
                                       { CurrentSemanticValue.stmt = new SwitchBlockGroup(ValueStack[ValueStack.Depth-2].stmts, ValueStack[ValueStack.Depth-1].stmts); }
#line default
        break;
      case 122: // SwitchLabels -> SwitchLabel
#line 475 "parser.y"
                           { CurrentSemanticValue.stmts = new List<Statement> {ValueStack[ValueStack.Depth-1].stmt};}
#line default
        break;
      case 123: // SwitchLabels -> SwitchLabels, SwitchLabel
#line 476 "parser.y"
                                     { CurrentSemanticValue.stmts = ValueStack[ValueStack.Depth-2].stmts; CurrentSemanticValue.stmts.Add(ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 124: // SwitchLabel -> CASE, ConstantExpression, ':'
#line 480 "parser.y"
                                      { CurrentSemanticValue.stmt = new SwitchLabelStatement(ValueStack[ValueStack.Depth-2].expr) ;}
#line default
        break;
      case 125: // SwitchLabel -> DEFAULT, ':'
#line 481 "parser.y"
                          { CurrentSemanticValue.stmt = new SwitchLabelStatement(); }
#line default
        break;
      case 126: // DoStatement -> DO, Statement, WHILE, '(', Expression, ')', ';'
#line 486 "parser.y"
                                                 { CurrentSemanticValue.stmt = new DoStatement(ValueStack[ValueStack.Depth-6].stmt, ValueStack[ValueStack.Depth-3].expr); }
#line default
        break;
      case 127: // ThrowStatement -> THROW, Expression, ';'
#line 490 "parser.y"
                                 { CurrentSemanticValue.stmt = new ThrowStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 128: // SynchronizedStatement -> SYNCHRONIZED, '(', Expression, ')', Block
#line 494 "parser.y"
                                              { CurrentSemanticValue.stmt = new SynchronizedStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 129: // ExpressionStatement -> StatementExpression, ';'
#line 498 "parser.y"
                                   { CurrentSemanticValue.stmt = new ExpressionStatement(ValueStack[ValueStack.Depth-2].expr); }
#line default
        break;
      case 130: // StatementExpression -> Assignment
#line 502 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 131: // StatementExpression -> MethodInvocation
#line 503 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 132: // StatementExpression -> PreIncrementExpression
#line 504 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 133: // StatementExpression -> PreDecrementExpression
#line 505 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 134: // StatementExpression -> PostIncrementExpression
#line 506 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 135: // StatementExpression -> PostDecrementExpression
#line 507 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 136: // MethodInvocation -> MethodName, '(', ArgumentList_opt, ')'
#line 512 "parser.y"
                                            { CurrentSemanticValue.expr = new MethodInvocation(ValueStack[ValueStack.Depth-4].name, ValueStack[ValueStack.Depth-2].exprlst); }
#line default
        break;
      case 137: // MethodInvocation -> PackageOrTypeName, '.', IDENTIFIER, '(', ArgumentList_opt, 
                //                     ')'
#line 513 "parser.y"
                                                               { CurrentSemanticValue.expr = new MethodInvocation( ValueStack[ValueStack.Depth-6].name + '.' + ValueStack[ValueStack.Depth-4].name, ValueStack[ValueStack.Depth-2].exprlst); }
#line default
        break;
      case 138: // PackageOrTypeName -> IDENTIFIER
#line 517 "parser.y"
                         { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 139: // PackageOrTypeName -> PackageOrTypeName, '.', IDENTIFIER
#line 518 "parser.y"
                                          { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-3].name + '.' + ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 140: // MethodName -> IDENTIFIER
#line 522 "parser.y"
                         { CurrentSemanticValue.name = ValueStack[ValueStack.Depth-1].name; }
#line default
        break;
      case 141: // ArgumentList_opt -> ArgumentList
#line 526 "parser.y"
                           { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-1].exprlst; }
#line default
        break;
      case 142: // ArgumentList_opt -> /* empty */
#line 527 "parser.y"
                          { }
#line default
        break;
      case 143: // ArgumentList -> ArgumentList, ',', Expression
#line 531 "parser.y"
                                      { CurrentSemanticValue.exprlst = ValueStack[ValueStack.Depth-3].exprlst; CurrentSemanticValue.exprlst.Add(ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 144: // ArgumentList -> Expression
#line 532 "parser.y"
                         { CurrentSemanticValue.exprlst = new List<Expression> {ValueStack[ValueStack.Depth-1].expr}; }
#line default
        break;
      case 145: // IfThenStatement -> IF, '(', Expression, ')', Statement
#line 537 "parser.y"
                                         { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt,null); }
#line default
        break;
      case 146: // IfThenElseStatement -> IF, '(', Expression, ')', StatementNoShortIf, ELSE, 
                //                        Statement
#line 542 "parser.y"
                                                               { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 147: // IfThenElseStatementNoShortIf -> IF, '(', Expression, ')', StatementNoShortIf, 
                //                                 ELSE, StatementNoShortIf
#line 546 "parser.y"
                                                                      { CurrentSemanticValue.stmt = new IfStatement(ValueStack[ValueStack.Depth-5].expr, ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 148: // WhileStatement -> WHILE, '(', Expression, ')', Statement
#line 550 "parser.y"
                                           { CurrentSemanticValue.stmt = new WhileStatement(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 149: // TryStatement -> TRY, Block, Catches
#line 554 "parser.y"
                               { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt, null); }
#line default
        break;
      case 150: // TryStatement -> TRY, Block, Catches_opt, Finally
#line 555 "parser.y"
                                        { CurrentSemanticValue.stmt = new TryStatement(ValueStack[ValueStack.Depth-3].stmt, ValueStack[ValueStack.Depth-2].stmt, ValueStack[ValueStack.Depth-1].stmt); }
#line default
        break;
      case 151: // Catches_opt -> Catches
#line 560 "parser.y"
                       { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 152: // Catches_opt -> /* empty */
#line 561 "parser.y"
                          { }
#line default
        break;
      case 153: // Catches -> CatchClause
#line 565 "parser.y"
                          { CurrentSemanticValue.stmt =  ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 154: // CatchClause -> CATCH, '(', ')', Block
#line 572 "parser.y"
                                 { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 155: // Finally -> FINALLY, Block
#line 590 "parser.y"
                            { CurrentSemanticValue.stmt = ValueStack[ValueStack.Depth-1].stmt; }
#line default
        break;
      case 156: // LabeledStatement -> IDENTIFIER, ':', Statement
#line 599 "parser.y"
                                    { CurrentSemanticValue.stmt = new LabeledStatement(ValueStack[ValueStack.Depth-3].name,ValueStack[ValueStack.Depth-1].stmt);}
#line default
        break;
      case 157: // BreakStatement -> BREAK, Identifier_opt, ';'
#line 604 "parser.y"
                                     { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new BreakStatement();} else {CurrentSemanticValue.stmt = new BreakStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 160: // ContinueStatement -> CONTINUE, Identifier_opt, ';'
#line 615 "parser.y"
                                        { if(ValueStack[ValueStack.Depth-2].name == null){CurrentSemanticValue.stmt = new ContinueStatement();} else {CurrentSemanticValue.stmt = new ContinueStatement(ValueStack[ValueStack.Depth-2].name);} }
#line default
        break;
      case 161: // ReturnStatement -> RETURN, Expression_opt, ';'
#line 620 "parser.y"
                                      { if(ValueStack[ValueStack.Depth-2].expr == null){CurrentSemanticValue.stmt = new ReturnStatement();} else {CurrentSemanticValue.stmt = new ReturnStatement(ValueStack[ValueStack.Depth-2].expr);} }
#line default
        break;
      case 162: // Expression_opt -> Expression
#line 625 "parser.y"
                          { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 164: // Assignment -> LeftHandSide, AssignmentOperator, Expression
#line 633 "parser.y"
                                                 { CurrentSemanticValue.expr = new AssignmentExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 165: // LeftHandSide -> ExpressionName
#line 637 "parser.y"
                            { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 166: // ExpressionName -> IDENTIFIER
#line 641 "parser.y"
                         { CurrentSemanticValue.expr = new VariableExpression(ValueStack[ValueStack.Depth-1].name);  }
#line default
        break;
      case 168: // AssignmentExpression -> Assignment
#line 649 "parser.y"
                         { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 169: // AssignmentExpression -> ConditionalExpression
#line 650 "parser.y"
                                  { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 170: // Primary -> PrimaryNoNewArray
#line 654 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 171: // PrimaryNoNewArray -> Literal
#line 658 "parser.y"
                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 172: // PrimaryNoNewArray -> MethodInvocation
#line 659 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 173: // Literal -> IntegerLiteral
#line 663 "parser.y"
                            { CurrentSemanticValue.expr = (Expression) ValueStack[ValueStack.Depth-1].num;}
#line default
        break;
      case 174: // Literal -> FloatingPointLiteral
#line 664 "parser.y"
                                 {CurrentSemanticValue.expr = (Expression)ValueStack[ValueStack.Depth-1].floatnum;}
#line default
        break;
      case 175: // Literal -> BooleanLiteral
#line 665 "parser.y"
                            { CurrentSemanticValue.expr = new BooleanLiteralExpression(ValueStack[ValueStack.Depth-1].boolval); }
#line default
        break;
      case 176: // Literal -> CharacterLiteral
#line 666 "parser.y"
                              { CurrentSemanticValue.expr = new CharacterLiteralExpression(ValueStack[ValueStack.Depth-1].charval); }
#line default
        break;
      case 177: // Literal -> StringLiteral
#line 667 "parser.y"
                            { CurrentSemanticValue.expr = new StringLiteralExpression(ValueStack[ValueStack.Depth-1].name); }
#line default
        break;
      case 178: // Literal -> NullLiteral
#line 668 "parser.y"
                          { CurrentSemanticValue.expr = new NullLiteralExpression(); }
#line default
        break;
      case 179: // Expression -> LambdaExpression
#line 674 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 180: // Expression -> AssignmentExpression
#line 675 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 181: // LambdaExpression -> LambdaParameters, ARROW, LambdaBody
#line 679 "parser.y"
                                           { }
#line default
        break;
      case 182: // LambdaParameters -> /* empty */
#line 683 "parser.y"
                          { }
#line default
        break;
      case 183: // LambdaBody -> /* empty */
#line 687 "parser.y"
                          { }
#line default
        break;
      case 184: // ConditionalExpression -> ConditionalOrExpression
#line 691 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 185: // ConditionalOrExpression -> ConditionalAndExpression
#line 697 "parser.y"
                                      { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 186: // ConditionalOrExpression -> ConditionalOrExpression, LOGICAL_OR, 
                //                            ConditionalAndExpression
#line 698 "parser.y"
                                                                { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "||", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 187: // ConditionalAndExpression -> InclusiveOrExpression
#line 702 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 188: // ConditionalAndExpression -> ConditionalAndExpression, LOGICAL_AND, 
                //                             InclusiveOrExpression
#line 703 "parser.y"
                                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 189: // InclusiveOrExpression -> ExclusiveOrExpression
#line 707 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 190: // InclusiveOrExpression -> InclusiveOrExpression, '|', ExclusiveOrExpression
#line 708 "parser.y"
                                                       { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "|", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 191: // ExclusiveOrExpression -> AndExpression
#line 712 "parser.y"
                              { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 192: // ExclusiveOrExpression -> ExclusiveOrExpression, '^', AndExpression
#line 713 "parser.y"
                                                 { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "^", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 193: // AndExpression -> EqualityExpression
#line 717 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 194: // AndExpression -> AndExpression, '&', EqualityExpression
#line 718 "parser.y"
                                               { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "&", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 195: // EqualityExpression -> RelationalExpression
#line 722 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 196: // EqualityExpression -> EqualityExpression, EQUAL, RelationalExpression
#line 723 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "==", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 197: // EqualityExpression -> EqualityExpression, NOT_EQUAL, RelationalExpression
#line 724 "parser.y"
                                                         { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "!=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 198: // RelationalExpression -> ShiftExpression
#line 728 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 199: // RelationalExpression -> RelationalExpression, '<', ShiftExpression
#line 729 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 200: // RelationalExpression -> RelationalExpression, '>', ShiftExpression
#line 730 "parser.y"
                                                  { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 201: // RelationalExpression -> RelationalExpression, LESS_THAN_OR_EQUAL, 
                //                         ShiftExpression
#line 731 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 202: // RelationalExpression -> RelationalExpression, GREATER_OR_EQUAL, ShiftExpression
#line 732 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">=", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 203: // RelationalExpression -> RelationalExpression, INSTANCEOF, ReferenceType
#line 733 "parser.y"
                                                      { CurrentSemanticValue.expr = new InstanceOfExpression(ValueStack[ValueStack.Depth-3].expr, ValueStack[ValueStack.Depth-1].type); }
#line default
        break;
      case 204: // ShiftExpression -> AdditiveExpression
#line 737 "parser.y"
                                 { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 205: // ShiftExpression -> ShiftExpression, LEFT_SHIFT, AdditiveExpression
#line 738 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "<<", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 206: // ShiftExpression -> ShiftExpression, SIGNED_RIGHT_SHIFT, AdditiveExpression
#line 739 "parser.y"
                                                            { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 207: // ShiftExpression -> ShiftExpression, UNSIGNED_RIGHT_SHIFT, AdditiveExpression
#line 740 "parser.y"
                                                             { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, ">>>", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 208: // AdditiveExpression -> MultiplicativeExpression
#line 744 "parser.y"
                                     { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 209: // AdditiveExpression -> AdditiveExpression, '+', MultiplicativeExpression
#line 745 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 210: // AdditiveExpression -> AdditiveExpression, '-', MultiplicativeExpression
#line 746 "parser.y"
                                                      { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 211: // MultiplicativeExpression -> UnaryExpression
#line 750 "parser.y"
                               { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 212: // MultiplicativeExpression -> MultiplicativeExpression, '*', UnaryExpression
#line 751 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "*", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 213: // MultiplicativeExpression -> MultiplicativeExpression, '/', UnaryExpression
#line 752 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "/", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 214: // MultiplicativeExpression -> MultiplicativeExpression, '%', UnaryExpression
#line 753 "parser.y"
                                                     { CurrentSemanticValue.expr = new BinaryExpression(ValueStack[ValueStack.Depth-3].expr, "%", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 215: // UnaryExpression -> PreIncrementExpression
#line 757 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 216: // UnaryExpression -> PreDecrementExpression
#line 758 "parser.y"
                                   { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 217: // UnaryExpression -> '+', UnaryExpression
#line 759 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("+", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 218: // UnaryExpression -> '-', UnaryExpression
#line 760 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("-", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 219: // UnaryExpression -> UnaryExpressionNotPlusMinus
#line 761 "parser.y"
                                       { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 220: // PreIncrementExpression -> INCREMENT, UnaryExpression
#line 769 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("++", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 221: // PreDecrementExpression -> DECREMENT, UnaryExpression
#line 773 "parser.y"
                                      { CurrentSemanticValue.expr = new PreUnaryExpression("--", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 222: // UnaryExpressionNotPlusMinus -> PostfixExpression
#line 777 "parser.y"
                                { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 223: // UnaryExpressionNotPlusMinus -> '~', UnaryExpression
#line 778 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("~", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 224: // UnaryExpressionNotPlusMinus -> '!', UnaryExpression
#line 779 "parser.y"
                                 { CurrentSemanticValue.expr = new PreUnaryExpression("!", ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 225: // UnaryExpressionNotPlusMinus -> CastExpression
#line 780 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
      case 226: // PostfixExpression -> Primary
#line 784 "parser.y"
                        { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 227: // PostfixExpression -> ExpressionName
#line 785 "parser.y"
                             { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 228: // PostfixExpression -> PostIncrementExpression
#line 786 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 229: // PostfixExpression -> PostDecrementExpression
#line 787 "parser.y"
                                    { CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr; }
#line default
        break;
      case 230: // PostIncrementExpression -> PostfixExpression, INCREMENT
#line 791 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "++"); }
#line default
        break;
      case 231: // PostDecrementExpression -> PostfixExpression, DECREMENT
#line 795 "parser.y"
                                        { CurrentSemanticValue.expr = new PostUnaryExpression(ValueStack[ValueStack.Depth-2].expr, "--"); }
#line default
        break;
      case 232: // CastExpression -> '(', PrimitiveType, ')', UnaryExpression
#line 799 "parser.y"
                                                   { CurrentSemanticValue.expr = new CastExpression(ValueStack[ValueStack.Depth-3].type, ValueStack[ValueStack.Depth-1].expr); }
#line default
        break;
      case 236: // ConstantExpression -> Expression
#line 815 "parser.y"
>>>>>>> master
               {CurrentSemanticValue.expr = ValueStack[ValueStack.Depth-1].expr;}
#line default
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

<<<<<<< HEAD
#line 861 "parser.y"
=======
#line 819 "parser.y"
>>>>>>> master

public Parser(Scanner scanner) : base(scanner)
{
}
#line default
}
}
