//
//  This CSharp output file generated by Gardens Point LEX
//  Gardens Point LEX (GPLEX) is Copyright (c) John Gough, QUT 2006-2014.
//  Output produced by GPLEX is the property of the user.
//  See accompanying file GPLEXcopyright.rtf.
//
//  GPLEX Version:  1.2.2
//  Machine:  WING-PC
//  DateTime: 3/14/2017 12:00:26 PM
//  UserName: wInG
//  GPLEX input file <scanner.lex - 3/14/2017 11:56:56 AM>
//  GPLEX frame file <embedded resource>
//
//  Option settings: unicode, parser, minimize
//  Option settings: classes, compressMap, compressNext, persistBuffer, embedbuffers
//  Fallback code page: Target machine default
//

//
// Revised backup code
// Version 1.2.1 of 24-June-2013
//
//
#define BACKUP
#define PERSIST

using System;
using System.IO;
using System.Text;
using System.Globalization;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Diagnostics.CodeAnalysis;


namespace IFN660_Java_ECMAScript
{   
    /// <summary>
    /// Summary Canonical example of GPLEX automaton
    /// </summary>
    
#if STANDALONE
    //
    // These are the dummy declarations for stand-alone GPLEX applications
    // normally these declarations would come from the parser.
    // If you declare /noparser, or %option noparser then you get this.
    //

     public enum Tokens
    { 
      EOF = 0, maxParseToken = int.MaxValue 
      // must have at least these two, values are almost arbitrary
    }

     public abstract class ScanBase
    {
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public abstract int yylex();

        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yywrap")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yywrap")]
        protected virtual bool yywrap() { return true; }

#if BABEL
        protected abstract int CurrentSc { get; set; }
        // EolState is the 32-bit of state data persisted at 
        // the end of each line for Visual Studio colorization.  
        // The default is to return CurrentSc.  You must override
        // this if you want more complicated behavior.
        public virtual int EolState { 
            get { return CurrentSc; }
            set { CurrentSc = value; } 
        }
    }
    
     public interface IColorScan
    {
        void SetSource(string source, int offset);
        int GetNext(ref int state, out int start, out int end);
#endif // BABEL
    }

#endif // STANDALONE
    
    // If the compiler can't find the scanner base class maybe you
    // need to run GPPG with the /gplex option, or GPLEX with /noparser
#if BABEL
     public sealed partial class Scanner : ScanBase, IColorScan
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
        
        protected override int CurrentSc 
        {
             // The current start state is a property
             // to try to avoid the user error of setting
             // scState but forgetting to update the FSA
             // start state "currentStart"
             //
             get { return currentScOrd; }  // i.e. return YY_START;
             set { currentScOrd = value;   // i.e. BEGIN(value);
                   currentStart = startState[value]; }
        }
#else  // BABEL
     public sealed partial class Scanner : ScanBase
    {
        private ScanBuff buffer;
        int currentScOrd;  // start condition ordinal
#endif // BABEL
        
        /// <summary>
        /// The input buffer for this scanner.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public ScanBuff Buffer { get { return buffer; } }
        
        private static int GetMaxParseToken() {
     System.Reflection.FieldInfo f = typeof(Tokens).GetField("maxParseToken");
            return (f == null ? int.MaxValue : (int)f.GetValue(null));
        }
        
        static int parserMax = GetMaxParseToken();
        
        enum Result {accept, noMatch, contextFound};

        const int maxAccept = 372;
        const int initial = 373;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;

#region user code
#endregion user code

        int state;
        int currentStart = startState[0];
        int code;      // last code read
        int cCol;      // column number of code
        int lNum;      // current line number
        //
        // The following instance variables are used, among other
        // things, for constructing the yylloc location objects.
        //
        int tokPos;        // buffer position at start of token
        int tokCol;        // zero-based column number at start of token
        int tokLin;        // line number at start of token
        int tokEPos;       // buffer position at end of token
        int tokECol;       // column number at end of token
        int tokELin;       // line number at end of token
        string tokTxt;     // lazily constructed text of token
#if STACK          
        private Stack<int> scStack = new Stack<int>();
#endif // STACK

#region ScannerTables
    struct Table {
        public int min; public int rng; public int dflt;
        public short[] nxt;
        public Table(int m, int x, int d, short[] n) {
            min = m; rng = x; dflt = d; nxt = n;
        }
    };

    static int[] startState = new int[] {373, 0};

#region CompressedCharacterMap
    //
    // There are 64 equivalence classes
    // There are 2 character sequence regions
    // There are 1 tables, 127 entries
    // There are 1 runs, 0 singletons
    // Decision tree depth is 1
    //
    static sbyte[] mapC0 = new sbyte[127] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 7, 10, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 7, 58, 2, 0, 63, 61, 60, 49, 51, 51, 3, 43, 51, 59, 47, 9, 
/*      '0' */ 36, 41, 50, 50, 39, 39, 39, 39, 34, 34, 53, 51, 57, 55, 56, 54, 
/*      '@' */ 51, 5, 40, 5, 46, 42, 44, 63, 45, 63, 63, 63, 37, 63, 63, 63, 
/*      'P' */ 48, 63, 63, 63, 63, 63, 63, 63, 38, 63, 63, 51, 1, 51, 62, 35, 
/*      '`' */ 0, 11, 12, 16, 25, 17, 26, 29, 23, 24, 63, 21, 19, 27, 20, 18, 
/*      'p' */ 30, 63, 15, 13, 14, 4, 31, 32, 28, 22, 33, 52, 6, 52, 54 };

    static sbyte MapC(int code)
    { // '\0' <= code <= '\U0010FFFF'
      if (code < 127) // '\0' <= code <= '~'
        return mapC0[code - 0];
      else // '\x7F' <= code <= '\U0010FFFF'
        return (sbyte)0;
    }
#endregion

    static Table[] NxS = new Table[405] {
/* NxS[   0] */ new Table(0, 0, 0, null),
/* NxS[   1] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46}),
/* NxS[   2] */ new Table(1, 50, -1, new short[] {371, 371, -1, 401, -1, -1, 
          -1, -1, -1, -1, -1, 371, -1, 371, 371, -1, -1, -1, -1, 371, -1, -1, 
          -1, -1, -1, 371, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, -1, -1, -1, -1, -1, -1, -1, 371, 46}),
/* NxS[   3] */ new Table(34, 33, 397, new short[] {368, 368, 368, 397, 397, 368, 
          397, 368, 397, 397, 397, 397, 397, 397, 397, 397, 368, 397, 397, 397, 397, 397, 
          397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 367}),
/* NxS[   4] */ new Table(34, 35, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 365, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 393}),
/* NxS[   5] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 349, 
          350, -1, -1, -1, -1, -1, 350, 350, 115, 115, 115, 350, 350, 115, 115, 115, 
          115, 115, 115, 115, 350, 350, 115, 115, 115, 115, 115, 115, 115, 351, 111, 351, 
          115, 115, 351, 350, 351, 350, -1, 350, 115, 350, -1, 115, -1, 351}),
/* NxS[   6] */ new Table(34, 41, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1}),
/* NxS[   7] */ new Table(34, 37, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 348, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 347}),
/* NxS[   8] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46}),
/* NxS[   9] */ new Table(0, 0, -1, null),
/* NxS[  10] */ new Table(34, 40, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 345, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 391, -1, -1, -1, -1, 
          -1, 344}),
/* NxS[  11] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46}),
/* NxS[  12] */ new Table(34, 44, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 332, 333}),
/* NxS[  13] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 319, 115, 115, 320, 115, 115, 
          115, 321, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  14] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 284, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 285, 115, 115, 115, 115, 115, 115, 
          115, 286, 287, 115, 115, 115, 115, 115, 115, 115, 115, 288, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  15] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 268, 115, 115, 115, 115, 115, 
          115, 115, 269, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  16] */ new Table(34, 48, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 263}),
/* NxS[  17] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 241, 115, 115, 115, 115, 115, 115, 242, 243, 115, 
          115, 115, 244, 115, 115, 115, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  18] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 115, 229, 230, 
          115, 115, 115, 115, 115, 115, 115, 231, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  19] */ new Table(34, 41, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1}),
/* NxS[  20] */ new Table(34, 49, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 226}),
/* NxS[  21] */ new Table(34, 48, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 216, 115, -1, -1, 
          -1, -1, -1, 217, 115, 115, 115, 115, 115, 218}),
/* NxS[  22] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 115, 115, 187, 
          115, 115, 115, 115, 115, 188, 189, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  23] */ new Table(34, 49, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 176, 177}),
/* NxS[  24] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 160, 115, 115, 115, 115, 115, 115, 161, 162, 115, 
          115, 115, 115, 163, 115, 115, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111}),
/* NxS[  25] */ new Table(34, 49, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 157}),
/* NxS[  26] */ new Table(34, 46, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 133, 115, -1, -1, 
          -1, -1, -1, 134, 115, 115, 115, 135}),
/* NxS[  27] */ new Table(34, 49, 115, new short[] {111, 111, 111, 115, 115, 111, 
          115, 111, 115, -1, 115, 115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1, 115, 115, 115, 115, 115, 115, 115, 124}),
/* NxS[  28] */ new Table(23, 52, 115, new short[] {120, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 111, 111, 111, 115, 115, 111, 115, 111, 115, -1, 115, 
          115, 115, -1, 115, -1, 111, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[  29] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 46, 46, 
          46, 46, 46, 103, 46, 73, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 119, 119, 119, 73, 46, 119, 46, 119, 103, 46, 46, 46, 
          46, 46, 46, 46, 119}),
/* NxS[  30] */ new Table(34, 50, 111, new short[] {113, 113, 113, 112, 111, 113, 
          111, 113, 114, 46, 111, 111, 111, 46, 111, 46, 113, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 46, 46, 46, 111, 46, 46, 46, 46, 111, 111, 46, 46, 
          -1, 46, 46, 111, 111, 111, 111, 111, 111, 114, 111, 112}),
/* NxS[  31] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 72, 46, 
          46, 46, 46, 103, 46, 73, 46, 46, 46, 46, 46, 46, 46, 46, 74, 46, 
          46, 46, 46, 46, 75, 76, 77, 73, 78, 77, 72, 77, 103, 46, 46, 46, 
          46, 46, 46, 46, 77}),
/* NxS[  32] */ new Table(34, 22, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, 70, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 71}),
/* NxS[  33] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, 380, -1, -1, 46}),
/* NxS[  34] */ new Table(34, 32, 376, new short[] {67, 67, 67, 376, 376, 67, 
          376, 67, 376, 376, 376, 376, 376, 376, 376, -1, 67, 376, 376, 376, 376, 376, 
          376, 376, 376, 376, 376, 376, 376, 376, 376, 377}),
/* NxS[  35] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46}),
/* NxS[  36] */ new Table(34, 20, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, 66}),
/* NxS[  37] */ new Table(34, 17, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46}),
/* NxS[  38] */ new Table(34, 22, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 65}),
/* NxS[  39] */ new Table(34, 23, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 60, 
          61}),
/* NxS[  40] */ new Table(34, 24, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 57, 
          -1, 58}),
/* NxS[  41] */ new Table(34, 22, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 56}),
/* NxS[  42] */ new Table(34, 26, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 53, 
          54, -1, -1, 55}),
/* NxS[  43] */ new Table(34, 27, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 51, 
          -1, -1, -1, -1, 52}),
/* NxS[  44] */ new Table(34, 22, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 50}),
/* NxS[  45] */ new Table(34, 22, -1, new short[] {46, 46, 46, -1, -1, 46, 
          -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, 47}),
/* NxS[  46] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[  47] */ new Table(0, 0, -1, null),
/* NxS[  48] */ new Table(0, 0, -1, null),
/* NxS[  49] */ new Table(25, 26, -1, new short[] {48, 48, -1, -1, -1, -1, 
          -1, -1, -1, 49, 49, 49, -1, -1, 49, -1, 49, -1, -1, 48, -1, 48, 
          -1, -1, -1, 49}),
/* NxS[  50] */ new Table(0, 0, -1, null),
/* NxS[  51] */ new Table(0, 0, -1, null),
/* NxS[  52] */ new Table(0, 0, -1, null),
/* NxS[  53] */ new Table(0, 0, -1, null),
/* NxS[  54] */ new Table(0, 0, -1, null),
/* NxS[  55] */ new Table(0, 0, -1, null),
/* NxS[  56] */ new Table(0, 0, -1, null),
/* NxS[  57] */ new Table(0, 0, -1, null),
/* NxS[  58] */ new Table(55, 1, -1, new short[] {59}),
/* NxS[  59] */ new Table(0, 0, -1, null),
/* NxS[  60] */ new Table(0, 0, -1, null),
/* NxS[  61] */ new Table(55, 2, -1, new short[] {62, 63}),
/* NxS[  62] */ new Table(0, 0, -1, null),
/* NxS[  63] */ new Table(55, 1, -1, new short[] {64}),
/* NxS[  64] */ new Table(0, 0, -1, null),
/* NxS[  65] */ new Table(0, 0, -1, null),
/* NxS[  66] */ new Table(0, 0, -1, null),
/* NxS[  67] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, 374, -1, 48, -1, 48, -1, -1, 68, 46}),
/* NxS[  68] */ new Table(0, 0, -1, null),
/* NxS[  69] */ new Table(0, 0, -1, null),
/* NxS[  70] */ new Table(0, 0, -1, null),
/* NxS[  71] */ new Table(0, 0, -1, null),
/* NxS[  72] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 108, -1, -1, 
          46, -1, 108, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[  73] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[  74] */ new Table(5, 46, -1, new short[] {105, -1, -1, -1, -1, -1, 
          105, 105, -1, -1, -1, 105, 106, -1, -1, -1, -1, -1, -1, -1, 105, 105, 
          -1, -1, -1, -1, -1, -1, -1, 107, 46, 107, -1, -1, 107, 105, 107, 106, 
          -1, 105, -1, 105, 389, -1, -1, 107}),
/* NxS[  75] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 46, 46, 
          46, 46, 46, 103, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 75, 75, 75, 46, 46, 75, 46, 75, 103, 46, 46, 46, 
          46, 46, 46, 46, 75}),
/* NxS[  76] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 46, 46, 
          46, 46, 46, 103, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 75, 76, 77, 46, 46, 77, 46, 77, 103, 46, 46, 46, 
          46, 46, 46, 46, 77}),
/* NxS[  77] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 46, 46, 
          46, 46, 46, 103, 46, 104, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 75, 77, 77, 104, 46, 77, 46, 77, 103, 46, 46, 46, 
          46, 46, 46, 46, 77}),
/* NxS[  78] */ new Table(5, 46, -1, new short[] {79, -1, -1, -1, -1, -1, 
          79, 79, -1, -1, -1, 79, 80, -1, -1, -1, -1, -1, -1, -1, 79, 79, 
          -1, -1, -1, -1, -1, -1, -1, 81, 46, 81, -1, -1, 81, 79, 81, 80, 
          -1, 79, -1, 79, -1, -1, -1, 81}),
/* NxS[  79] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 82, 383, 82, 84, -1, 82, 82, 82, 82, 
          -1, 82, 381, 82, -1, -1, -1, 82, -1, 381}),
/* NxS[  80] */ new Table(5, 55, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 92, 93, 92, 84, -1, 92, 82, 92, 82, 
          375, 82, 381, 82, -1, -1, -1, 92, -1, 381, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[  81] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 83, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 85, 86, 85, 84, -1, 85, 82, 85, 83, 
          -1, 82, 381, 82, -1, -1, -1, 85, -1, 381}),
/* NxS[  82] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, 382, -1, -1, -1, 82, 383, 82, 84, -1, 82, 82, 82, 82, 
          -1, 82, 381, 82, 384, 382, -1, 82, -1, 381}),
/* NxS[  83] */ new Table(5, 55, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, 382, -1, -1, -1, 92, 93, 92, 84, -1, 92, 82, 92, 82, 
          375, 82, 381, 82, 384, 382, -1, 92, -1, 381, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[  84] */ new Table(0, 0, -1, null),
/* NxS[  85] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 83, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, 382, -1, -1, -1, 85, 86, 85, 84, -1, 85, 82, 85, 83, 
          -1, 82, 381, 82, 384, 382, -1, 85, -1, 381}),
/* NxS[  86] */ new Table(5, 48, -1, new short[] {87, 381, -1, -1, -1, -1, 
          87, 87, -1, 381, -1, 87, 97, -1, -1, -1, -1, -1, -1, 381, 87, 87, 
          -1, 381, 381, -1, -1, -1, -1, 98, 86, 98, -1, -1, 98, 87, 98, 99, 
          -1, 87, 381, 88, -1, -1, -1, 98, -1, 381}),
/* NxS[  87] */ new Table(5, 46, -1, new short[] {87, -1, -1, -1, -1, -1, 
          87, 87, -1, -1, -1, 87, 87, -1, 84, -1, -1, -1, -1, -1, 87, 87, 
          -1, -1, -1, 382, -1, -1, -1, 87, 385, 87, 84, -1, 87, 87, 87, 87, 
          -1, 87, -1, 87, 384, 382, -1, 87}),
/* NxS[  88] */ new Table(5, 48, -1, new short[] {87, 381, -1, -1, -1, -1, 
          87, 87, -1, 381, -1, 87, 88, -1, 84, -1, -1, -1, -1, 381, 87, 87, 
          -1, 381, 381, 382, -1, -1, -1, 87, 383, 87, 84, -1, 87, 87, 87, 87, 
          -1, 87, 381, 88, 384, 382, -1, 87, -1, 381}),
/* NxS[  89] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 89, -1, 84, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 89, 385, 89, 84, -1, 89, 89, 89, 89, 
          -1, 89, -1, 89, -1, -1, -1, 89}),
/* NxS[  90] */ new Table(25, 26, -1, new short[] {91, 91, -1, -1, -1, -1, 
          -1, -1, -1, 90, 90, 90, -1, -1, 90, -1, 90, -1, -1, 91, -1, 91, 
          -1, -1, -1, 90}),
/* NxS[  91] */ new Table(0, 0, -1, null),
/* NxS[  92] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, 382, -1, -1, -1, 92, 93, 92, 84, -1, 92, 82, 92, 82, 
          -1, 82, 381, 82, 384, 382, -1, 92, -1, 381}),
/* NxS[  93] */ new Table(5, 48, -1, new short[] {87, 381, -1, -1, -1, -1, 
          87, 87, -1, 381, -1, 87, 88, -1, -1, -1, -1, -1, -1, 381, 87, 87, 
          -1, 381, 381, -1, -1, -1, -1, 94, 93, 94, -1, -1, 94, 87, 94, 87, 
          -1, 87, 381, 88, -1, -1, -1, 94, -1, 381}),
/* NxS[  94] */ new Table(5, 46, -1, new short[] {87, -1, -1, -1, -1, -1, 
          87, 87, -1, -1, -1, 87, 87, -1, 84, -1, -1, -1, -1, -1, 87, 87, 
          -1, -1, -1, 382, -1, -1, -1, 94, 95, 94, 84, -1, 94, 87, 94, 87, 
          -1, 87, -1, 87, 384, 382, -1, 94}),
/* NxS[  95] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 89, -1, -1, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 96, 95, 96, -1, -1, 96, 89, 96, 89, 
          -1, 89, -1, 89, -1, -1, -1, 96}),
/* NxS[  96] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 89, -1, 84, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 96, 95, 96, 84, -1, 96, 89, 96, 89, 
          -1, 89, -1, 89, -1, -1, -1, 96}),
/* NxS[  97] */ new Table(5, 55, -1, new short[] {87, 381, -1, -1, -1, -1, 
          87, 87, -1, 381, -1, 87, 88, -1, 84, -1, -1, -1, -1, 381, 87, 87, 
          -1, 381, 381, 382, -1, -1, -1, 94, 93, 94, 84, -1, 94, 87, 94, 87, 
          375, 87, 381, 88, 384, 382, -1, 94, -1, 381, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[  98] */ new Table(5, 46, -1, new short[] {87, -1, -1, -1, -1, -1, 
          87, 87, -1, -1, -1, 87, 99, -1, 84, -1, -1, -1, -1, -1, 87, 87, 
          -1, -1, -1, 382, -1, -1, -1, 98, 100, 98, 84, -1, 98, 87, 98, 99, 
          -1, 87, -1, 87, 384, 382, -1, 98}),
/* NxS[  99] */ new Table(5, 55, -1, new short[] {87, -1, -1, -1, -1, -1, 
          87, 87, -1, -1, -1, 87, 87, -1, 84, -1, -1, -1, -1, -1, 87, 87, 
          -1, -1, -1, 382, -1, -1, -1, 94, 95, 94, 84, -1, 94, 87, 94, 87, 
          375, 87, -1, 87, 384, 382, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[ 100] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 101, -1, -1, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 102, 100, 102, -1, -1, 102, 89, 102, 101, 
          -1, 89, -1, 89, -1, -1, -1, 102}),
/* NxS[ 101] */ new Table(5, 55, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 89, -1, 84, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 96, 95, 96, 84, -1, 96, 89, 96, 89, 
          375, 89, -1, 89, -1, -1, -1, 96, -1, -1, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[ 102] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 101, -1, 84, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 102, 100, 102, 84, -1, 102, 89, 102, 101, 
          -1, 89, -1, 89, -1, -1, -1, 102}),
/* NxS[ 103] */ new Table(17, 43, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, 374, 375, 48, -1, 48, -1, -1, -1, 46, -1, -1, -1, -1, 
          -1, -1, -1, -1, 375}),
/* NxS[ 104] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 46, 46, -1, -1, 
          46, -1, 46, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[ 105] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 82, 383, 82, 84, -1, 82, 82, 82, 82, 
          -1, 82, 381, 82, 389, -1, -1, 82, -1, 381}),
/* NxS[ 106] */ new Table(5, 55, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 82, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 92, 93, 92, 84, -1, 92, 82, 92, 82, 
          375, 82, 381, 82, 389, -1, -1, 92, -1, 381, -1, -1, -1, -1, -1, -1, 
          375}),
/* NxS[ 107] */ new Table(5, 48, -1, new short[] {82, 381, -1, -1, -1, -1, 
          82, 82, -1, 381, -1, 82, 83, -1, 84, -1, -1, -1, -1, 381, 82, 82, 
          -1, 381, 381, -1, -1, -1, -1, 85, 86, 85, 84, -1, 85, 82, 85, 83, 
          -1, 82, 381, 82, 389, -1, -1, 85, -1, 381}),
/* NxS[ 108] */ new Table(17, 34, -1, new short[] {374, -1, -1, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 108, 109, -1, -1, 
          46, -1, 109, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[ 109] */ new Table(17, 34, -1, new short[] {374, -1, 110, -1, -1, -1, 
          -1, -1, 48, 48, -1, -1, -1, -1, -1, -1, -1, 46, 108, 109, 110, -1, 
          46, -1, 109, 374, -1, 48, -1, 48, -1, -1, -1, 46}),
/* NxS[ 110] */ new Table(0, 0, -1, null),
/* NxS[ 111] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 116, 115, 115, 115, 
          115, 115, 115, 115, 117, 117, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 116, -1, 117, 115, 117, -1, 115, -1, 111}),
/* NxS[ 112] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 116, 115, 115, 115, 
          115, 115, 115, 115, 117, 117, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 116, -1, 117, 115, 117, -1, 115, -1, 111}),
/* NxS[ 113] */ new Table(34, 48, 111, new short[] {113, 113, 113, 111, 111, 113, 
          111, 113, 114, 46, 111, 111, 111, 46, 111, 46, 113, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 46, 46, 46, 111, 46, 46, 46, 46, 111, 111, 46, 46, 
          -1, 46, 46, 111, 111, 111, 111, 111, 111, 114}),
/* NxS[ 114] */ new Table(59, 56, -1, new short[] {375, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          116, 115, 115, 115, 115, 115, 115, 115, 117, 117, 115, 115, 115, 115, 115, 115, 
          115, 111, 111, 111, 115, 115, 111, 115, 111, 116, 375, 117, 115, 117, -1, 115, 
          -1, 111}),
/* NxS[ 115] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 116] */ new Table(34, 41, 115, new short[] {118, 118, 118, 115, 115, 118, 
          115, 118, 115, 375, 115, 115, 115, -1, 115, -1, 118, -1, -1, -1, -1, -1, 
          -1, -1, -1, 375, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1}),
/* NxS[ 117] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 118] */ new Table(25, 50, 115, new short[] {117, 117, 115, 115, 115, 115, 
          115, 115, 115, 118, 118, 118, 115, 115, 118, 115, 118, 115, -1, 117, 115, 117, 
          -1, 115, -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          115, -1, -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 119] */ new Table(8, 43, 46, new short[] {-1, 46, 46, 46, 46, 46, 
          46, 46, 46, 103, 46, 73, 46, 46, 46, 46, 46, 46, 46, 46, 46, 46, 
          46, 46, 46, 46, 119, 119, 119, 73, 46, 119, 46, 119, 103, 46, 46, 46, 
          46, 46, 46, 46, 119}),
/* NxS[ 120] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 121}),
/* NxS[ 121] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 122}),
/* NxS[ 122] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          123}),
/* NxS[ 123] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 124] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 125, 115, 115, 115, 115, 126}),
/* NxS[ 125] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 128}),
/* NxS[ 126] */ new Table(43, 47, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 127}),
/* NxS[ 127] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 128] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 129}),
/* NxS[ 129] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 130}),
/* NxS[ 130] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 131}),
/* NxS[ 131] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          132}),
/* NxS[ 132] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 133] */ new Table(43, 34, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 153}),
/* NxS[ 134] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 148}),
/* NxS[ 135] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 136, 115, 115, 115, 115, 115, 137}),
/* NxS[ 136] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 142}),
/* NxS[ 137] */ new Table(31, 44, 115, new short[] {138, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1}),
/* NxS[ 138] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 139}),
/* NxS[ 139] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 140}),
/* NxS[ 140] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          141}),
/* NxS[ 141] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 142] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          143}),
/* NxS[ 143] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 144}),
/* NxS[ 144] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 145}),
/* NxS[ 145] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          146}),
/* NxS[ 146] */ new Table(43, 47, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 147}),
/* NxS[ 147] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 148] */ new Table(43, 43, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 149}),
/* NxS[ 149] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 150}),
/* NxS[ 150] */ new Table(29, 46, 115, new short[] {151, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, 
          -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 151] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          152}),
/* NxS[ 152] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 153] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 154}),
/* NxS[ 154] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 155}),
/* NxS[ 155] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 156}),
/* NxS[ 156] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 157] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 158}),
/* NxS[ 158] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 159}),
/* NxS[ 159] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 160] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 173}),
/* NxS[ 161] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 172}),
/* NxS[ 162] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 169}),
/* NxS[ 163] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 164}),
/* NxS[ 164] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 165}),
/* NxS[ 165] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 166}),
/* NxS[ 166] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 167}),
/* NxS[ 167] */ new Table(43, 44, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 168}),
/* NxS[ 168] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 169] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 170}),
/* NxS[ 170] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 171}),
/* NxS[ 171] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 172] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 173] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 174}),
/* NxS[ 174] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          175}),
/* NxS[ 175] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 176] */ new Table(43, 48, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 182}),
/* NxS[ 177] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 178, 115, -1, -1, -1, -1, -1}),
/* NxS[ 178] */ new Table(43, 34, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 179}),
/* NxS[ 179] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 180}),
/* NxS[ 180] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          181}),
/* NxS[ 181] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 182] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 183}),
/* NxS[ 183] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 184, 115, -1, -1, -1, -1, -1}),
/* NxS[ 184] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 185}),
/* NxS[ 185] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 186}),
/* NxS[ 186] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 187] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 201, 202}),
/* NxS[ 188] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 189] */ new Table(30, 45, 115, new short[] {190, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 
          115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 190] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 191, 192}),
/* NxS[ 191] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 199}),
/* NxS[ 192] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          193}),
/* NxS[ 193] */ new Table(27, 48, 115, new short[] {194, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 194] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          195}),
/* NxS[ 195] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 196}),
/* NxS[ 196] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 197}),
/* NxS[ 197] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 198}),
/* NxS[ 198] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 199] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 200}),
/* NxS[ 200] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 201] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 209}),
/* NxS[ 202] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          203}),
/* NxS[ 203] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 204}),
/* NxS[ 204] */ new Table(43, 48, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 205}),
/* NxS[ 205] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 206}),
/* NxS[ 206] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 207}),
/* NxS[ 207] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          208}),
/* NxS[ 208] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 209] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 210}),
/* NxS[ 210] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 211}),
/* NxS[ 211] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 212}),
/* NxS[ 212] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          213}),
/* NxS[ 213] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 214}),
/* NxS[ 214] */ new Table(43, 48, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 215}),
/* NxS[ 215] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 216] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 224}),
/* NxS[ 217] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 220}),
/* NxS[ 218] */ new Table(32, 43, 115, new short[] {219, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, 
          -1, -1, -1, -1, -1}),
/* NxS[ 219] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 220] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 221}),
/* NxS[ 221] */ new Table(31, 44, 115, new short[] {222, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1}),
/* NxS[ 222] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          223}),
/* NxS[ 223] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 224] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 225}),
/* NxS[ 225] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 226] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 227}),
/* NxS[ 227] */ new Table(29, 46, 115, new short[] {228, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, 
          -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 228] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 229] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 239}),
/* NxS[ 230] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 237, 115, -1, -1, -1, -1, -1}),
/* NxS[ 231] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 232}),
/* NxS[ 232] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          233}),
/* NxS[ 233] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 234}),
/* NxS[ 234] */ new Table(43, 47, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 235}),
/* NxS[ 235] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 236}),
/* NxS[ 236] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 237] */ new Table(27, 48, 115, new short[] {238, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 238] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 239] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          240}),
/* NxS[ 240] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 241] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 258, 259}),
/* NxS[ 242] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 250}),
/* NxS[ 243] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 247}),
/* NxS[ 244] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 245}),
/* NxS[ 245] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 246}),
/* NxS[ 246] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 247] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 248}),
/* NxS[ 248] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 249}),
/* NxS[ 249] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 250] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 251, 252}),
/* NxS[ 251] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 257}),
/* NxS[ 252] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 253}),
/* NxS[ 253] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 254}),
/* NxS[ 254] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 255, 115, -1, -1, -1, -1, -1}),
/* NxS[ 255] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          256}),
/* NxS[ 256] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 257] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 258] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          262}),
/* NxS[ 259] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 260}),
/* NxS[ 260] */ new Table(43, 45, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 261}),
/* NxS[ 261] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 262] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 263] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 264}),
/* NxS[ 264] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 265, 115, -1, -1, -1, -1, -1}),
/* NxS[ 265] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 266}),
/* NxS[ 266] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 267}),
/* NxS[ 267] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 268] */ new Table(43, 44, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 174, 115, -1, -1, -1, -1, -1, 276, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 277}),
/* NxS[ 269] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 270, 115, 
          115, 115, 115, 115, 115, 115, 115, 271}),
/* NxS[ 270] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 273}),
/* NxS[ 271] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 272}),
/* NxS[ 272] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 273] */ new Table(32, 43, 115, new short[] {274, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, 
          -1, -1, -1, -1, -1}),
/* NxS[ 274] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 275}),
/* NxS[ 275] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 276] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 278}),
/* NxS[ 277] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 278] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 279}),
/* NxS[ 279] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 280}),
/* NxS[ 280] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          281}),
/* NxS[ 281] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 282}),
/* NxS[ 282] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 283}),
/* NxS[ 283] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 284] */ new Table(30, 45, 115, new short[] {316, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 
          115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 285] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 306, 115, 115, 115, 307}),
/* NxS[ 286] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 296}),
/* NxS[ 287] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 293}),
/* NxS[ 288] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 289}),
/* NxS[ 289] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 290}),
/* NxS[ 290] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 291}),
/* NxS[ 291] */ new Table(43, 45, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 292}),
/* NxS[ 292] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 293] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 294}),
/* NxS[ 294] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 295}),
/* NxS[ 295] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 296] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 297}),
/* NxS[ 297] */ new Table(43, 45, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 298}),
/* NxS[ 298] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 299}),
/* NxS[ 299] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 300}),
/* NxS[ 300] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 301}),
/* NxS[ 301] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 302}),
/* NxS[ 302] */ new Table(33, 42, 115, new short[] {303, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, 
          -1, -1, -1, -1}),
/* NxS[ 303] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          304}),
/* NxS[ 304] */ new Table(43, 47, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 305}),
/* NxS[ 305] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 306] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 313}),
/* NxS[ 307] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 308}),
/* NxS[ 308] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 309}),
/* NxS[ 309] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 310}),
/* NxS[ 310] */ new Table(43, 48, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 115, 115, 311}),
/* NxS[ 311] */ new Table(30, 45, 115, new short[] {312, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, -1, 115, 115, 115, -1, 115, -1, 115, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, -1, -1, -1, 
          115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 312] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 313] */ new Table(43, 46, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 115, 115, 115, 314}),
/* NxS[ 314] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 315}),
/* NxS[ 315] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 316] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          317}),
/* NxS[ 317] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 318}),
/* NxS[ 318] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 319] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          329}),
/* NxS[ 320] */ new Table(43, 40, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 324}),
/* NxS[ 321] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 322}),
/* NxS[ 322] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          323}),
/* NxS[ 323] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 324] */ new Table(43, 41, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 325}),
/* NxS[ 325] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          326}),
/* NxS[ 326] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 327}),
/* NxS[ 327] */ new Table(43, 42, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 328}),
/* NxS[ 328] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 329] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 330}),
/* NxS[ 330] */ new Table(43, 43, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          115, 115, 115, 115, 331}),
/* NxS[ 331] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 332] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 338}),
/* NxS[ 333] */ new Table(43, 35, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 334}),
/* NxS[ 334] */ new Table(43, 39, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 
          335}),
/* NxS[ 335] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 336}),
/* NxS[ 336] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 337}),
/* NxS[ 337] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 338] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 339}),
/* NxS[ 339] */ new Table(43, 37, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 340}),
/* NxS[ 340] */ new Table(43, 33, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 341}),
/* NxS[ 341] */ new Table(43, 38, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 342}),
/* NxS[ 342] */ new Table(43, 36, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1, 115, 115, 115, 343}),
/* NxS[ 343] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 344] */ new Table(8, 1, 344, new short[] {-1}),
/* NxS[ 345] */ new Table(0, 0, -1, null),
/* NxS[ 346] */ new Table(0, 0, -1, null),
/* NxS[ 347] */ new Table(0, 0, -1, null),
/* NxS[ 348] */ new Table(0, 0, -1, null),
/* NxS[ 349] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 349, 115, -1, -1, -1, -1, -1}),
/* NxS[ 350] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          352, -1, -1, -1, -1, -1, 352, 352, 115, 115, 115, 352, 352, 115, 115, 115, 
          115, 115, 115, 115, 352, 352, 115, 115, 115, 115, 115, 115, 115, 352, 115, 352, 
          115, 115, 352, 352, 352, 352, -1, 352, 115, 352, -1, 115, -1, 352}),
/* NxS[ 351] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          352, -1, -1, -1, -1, -1, 352, 352, 115, 115, 115, 352, 353, 115, 115, 115, 
          115, 115, 115, 115, 354, 354, 115, 115, 115, 115, 115, 115, 115, 355, 111, 355, 
          115, 115, 355, 352, 355, 353, -1, 354, 115, 354, -1, 115, -1, 355}),
/* NxS[ 352] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          356, -1, -1, -1, -1, -1, 356, 356, 115, 115, 115, 356, 356, 115, 115, 115, 
          115, 115, 115, 115, 356, 356, 115, 115, 115, 115, 115, 115, 115, 356, 115, 356, 
          115, 115, 356, 356, 356, 356, -1, 356, 115, 356, -1, 115, -1, 356}),
/* NxS[ 353] */ new Table(59, 56, -1, new short[] {375, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 356, -1, -1, -1, -1, -1, 356, 356, 115, 115, 115, 356, 
          356, 115, 115, 115, 115, 115, 115, 115, 356, 356, 115, 115, 115, 115, 115, 115, 
          115, 364, 118, 364, 115, 115, 364, 356, 364, 356, 375, 356, 115, 356, -1, 115, 
          -1, 364}),
/* NxS[ 354] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          356, -1, -1, -1, -1, -1, 356, 356, 115, 115, 115, 356, 356, 115, 115, 115, 
          115, 115, 115, 115, 356, 356, 115, 115, 115, 115, 115, 115, 115, 356, 115, 356, 
          115, 115, 356, 356, 356, 356, -1, 356, 115, 356, -1, 115, -1, 356}),
/* NxS[ 355] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          356, -1, -1, -1, -1, -1, 356, 356, 115, 115, 115, 356, 357, 115, 115, 115, 
          115, 115, 115, 115, 358, 358, 115, 115, 115, 115, 115, 115, 115, 359, 111, 359, 
          115, 115, 359, 356, 359, 357, -1, 358, 115, 358, -1, 115, -1, 359}),
/* NxS[ 356] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          360, -1, -1, -1, -1, -1, 360, 360, 115, 115, 115, 360, 360, 115, 115, 115, 
          115, 115, 115, 115, 360, 360, 115, 115, 115, 115, 115, 115, 115, 360, 115, 360, 
          115, 115, 360, 360, 360, 360, -1, 360, 115, 360, -1, 115, -1, 360}),
/* NxS[ 357] */ new Table(59, 56, -1, new short[] {375, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 360, -1, -1, -1, -1, -1, 360, 360, 115, 115, 115, 360, 
          360, 115, 115, 115, 115, 115, 115, 115, 360, 360, 115, 115, 115, 115, 115, 115, 
          115, 363, 118, 363, 115, 115, 363, 360, 363, 360, 375, 360, 115, 360, -1, 115, 
          -1, 363}),
/* NxS[ 358] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          360, -1, -1, -1, -1, -1, 360, 360, 115, 115, 115, 360, 360, 115, 115, 115, 
          115, 115, 115, 115, 360, 360, 115, 115, 115, 115, 115, 115, 115, 360, 115, 360, 
          115, 115, 360, 360, 360, 360, -1, 360, 115, 360, -1, 115, -1, 360}),
/* NxS[ 359] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          360, -1, -1, -1, -1, -1, 360, 360, 115, 115, 115, 360, 361, 115, 115, 115, 
          115, 115, 115, 115, 360, 360, 115, 115, 115, 115, 115, 115, 115, 362, 111, 362, 
          115, 115, 362, 360, 362, 361, -1, 360, 115, 360, -1, 115, -1, 362}),
/* NxS[ 360] */ new Table(43, 32, 115, new short[] {-1, 115, 115, 115, -1, 115, 
          -1, 115, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 115, -1, 
          -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 361] */ new Table(34, 41, 115, new short[] {118, 118, 118, 115, 115, 118, 
          115, 118, 115, 375, 115, 115, 115, -1, 115, -1, 118, -1, -1, -1, -1, -1, 
          -1, -1, -1, 375, -1, -1, -1, 115, -1, -1, -1, -1, 115, 115, -1, -1, 
          -1, -1, -1}),
/* NxS[ 362] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          115, -1, -1, -1, -1, -1, 115, 115, 115, 115, 115, 115, 116, 115, 115, 115, 
          115, 115, 115, 115, 117, 117, 115, 115, 115, 115, 115, 115, 115, 111, 111, 111, 
          115, 115, 111, 115, 111, 116, -1, 117, 115, 117, -1, 115, -1, 111}),
/* NxS[ 363] */ new Table(25, 50, 115, new short[] {117, 117, 115, 115, 115, 115, 
          115, 115, 115, 118, 118, 118, 115, 115, 118, 115, 118, 115, -1, 117, 115, 117, 
          -1, 115, -1, 118, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
          115, -1, -1, -1, -1, 115, 115, -1, -1, -1, -1, -1}),
/* NxS[ 364] */ new Table(63, 52, -1, new short[] {115, -1, -1, -1, -1, 115, 
          360, -1, -1, -1, -1, -1, 360, 360, 115, 115, 115, 360, 360, 115, 115, 115, 
          115, 115, 115, 115, 360, 360, 115, 115, 115, 115, 115, 115, 115, 363, 118, 363, 
          115, 115, 363, 360, 363, 360, -1, 360, 115, 360, -1, 115, -1, 363}),
/* NxS[ 365] */ new Table(0, 0, -1, null),
/* NxS[ 366] */ new Table(0, 0, -1, null),
/* NxS[ 367] */ new Table(0, 0, -1, null),
/* NxS[ 368] */ new Table(17, 50, 397, new short[] {399, 397, 397, 397, 397, 397, 
          397, 397, 369, 369, 397, 397, 397, 397, 397, 397, 397, 368, 368, 368, 397, 397, 
          368, 397, 368, 399, 397, 369, 397, 369, 397, 397, 397, 368, 397, 397, 397, 397, 
          397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 367}),
/* NxS[ 369] */ new Table(1, 2, 397, new short[] {398, 367}),
/* NxS[ 370] */ new Table(25, 42, 397, new short[] {369, 369, 397, 397, 397, 397, 
          397, 397, 397, 370, 370, 370, 397, 397, 370, 397, 370, 397, 397, 369, 397, 369, 
          397, 397, 397, 370, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 397, 
          397, 397, 398, 367}),
/* NxS[ 371] */ new Table(0, 0, -1, null),
/* NxS[ 372] */ new Table(0, 0, -1, null),
/* NxS[ 373] */ new Table(24, 61, 19, new short[] {22, 23, 24, 19, 19, 25, 
          26, 27, 28, 19, 29, 30, 31, 19, 19, 29, 6, 29, 6, 32, 6, 19, 
          6, 33, 19, 34, 29, 35, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 
          45, 19, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 
          15, 16, 17, 18, 19, 20, 21}),
/* NxS[ 374] */ new Table(34, 26, -1, new short[] {49, 49, 49, -1, -1, 49, 
          -1, 49, -1, 375, -1, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 
          -1, -1, -1, 375}),
/* NxS[ 375] */ new Table(34, 17, -1, new short[] {49, 49, 49, -1, -1, 49, 
          -1, 49, -1, -1, -1, -1, -1, -1, -1, -1, 49}),
/* NxS[ 376] */ new Table(49, 1, -1, new short[] {68}),
/* NxS[ 377] */ new Table(1, 50, -1, new short[] {376, 376, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 376, -1, 376, 376, -1, -1, -1, -1, 376, -1, -1, 
          -1, -1, -1, 376, -1, -1, -1, -1, -1, -1, -1, -1, -1, 378, -1, -1, 
          379, -1, 378, -1, -1, -1, -1, -1, -1, -1, 376, 378}),
/* NxS[ 378] */ new Table(36, 15, -1, new short[] {379, -1, -1, 379, -1, 379, 
          -1, -1, -1, -1, -1, -1, -1, 68, 379}),
/* NxS[ 379] */ new Table(36, 15, -1, new short[] {376, -1, -1, 376, -1, 376, 
          -1, -1, -1, -1, -1, -1, -1, 68, 376}),
/* NxS[ 380] */ new Table(47, 1, -1, new short[] {69}),
/* NxS[ 381] */ new Table(5, 48, -1, new short[] {387, 381, -1, -1, -1, -1, 
          387, 387, -1, 381, -1, 387, 388, -1, -1, -1, -1, -1, -1, 381, 387, 387, 
          -1, 381, 381, -1, -1, -1, -1, 387, 381, 387, -1, -1, 387, 387, 387, 387, 
          -1, 387, 381, 388, -1, -1, -1, 387, -1, 381}),
/* NxS[ 382] */ new Table(34, 26, -1, new short[] {90, 90, 90, -1, -1, 90, 
          -1, 90, -1, 386, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, 
          -1, -1, -1, 386}),
/* NxS[ 383] */ new Table(5, 48, -1, new short[] {87, 381, -1, -1, -1, -1, 
          87, 87, -1, 381, -1, 87, 88, -1, -1, -1, -1, -1, -1, 381, 87, 87, 
          -1, 381, 381, -1, -1, -1, -1, 87, 383, 87, -1, -1, 87, 87, 87, 87, 
          -1, 87, 381, 88, -1, -1, -1, 87, -1, 381}),
/* NxS[ 384] */ new Table(30, 19, -1, new short[] {382, -1, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 382}),
/* NxS[ 385] */ new Table(5, 46, -1, new short[] {89, -1, -1, -1, -1, -1, 
          89, 89, -1, -1, -1, 89, 89, -1, -1, -1, -1, -1, -1, -1, 89, 89, 
          -1, -1, -1, -1, -1, -1, -1, 89, 385, 89, -1, -1, 89, 89, 89, 89, 
          -1, 89, -1, 89, -1, -1, -1, 89}),
/* NxS[ 386] */ new Table(34, 17, -1, new short[] {90, 90, 90, -1, -1, 90, 
          -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, 90}),
/* NxS[ 387] */ new Table(5, 46, -1, new short[] {387, -1, -1, -1, -1, -1, 
          387, 387, -1, -1, -1, 387, 387, -1, -1, -1, -1, -1, -1, -1, 387, 387, 
          -1, -1, -1, 382, -1, -1, -1, 387, -1, 387, -1, -1, 387, 387, 387, 387, 
          -1, 387, -1, 387, 384, 382, -1, 387}),
/* NxS[ 388] */ new Table(5, 48, -1, new short[] {387, 381, -1, -1, -1, -1, 
          387, 387, -1, 381, -1, 387, 388, -1, -1, -1, -1, -1, -1, 381, 387, 387, 
          -1, 381, 381, 382, -1, -1, -1, 387, 381, 387, -1, -1, 387, 387, 387, 387, 
          -1, 387, 381, 388, 384, 382, -1, 387, -1, 381}),
/* NxS[ 389] */ new Table(5, 46, -1, new short[] {390, -1, -1, -1, -1, -1, 
          390, 390, -1, -1, -1, 390, 390, -1, -1, -1, -1, -1, -1, -1, 390, 390, 
          -1, -1, -1, -1, -1, -1, -1, 390, -1, 390, -1, -1, 390, 390, 390, 390, 
          -1, 390, -1, 390, -1, -1, -1, 390}),
/* NxS[ 390] */ new Table(5, 46, -1, new short[] {390, -1, -1, -1, -1, -1, 
          390, 390, -1, -1, -1, 390, 390, -1, -1, -1, -1, -1, -1, -1, 390, 390, 
          -1, -1, -1, 382, -1, -1, -1, 390, -1, 390, -1, -1, 390, 390, 390, 390, 
          -1, 390, -1, 390, -1, 382, -1, 390}),
/* NxS[ 391] */ new Table(3, 1, 391, new short[] {392}),
/* NxS[ 392] */ new Table(3, 7, 391, new short[] {392, 391, 391, 391, 391, 391, 
          346}),
/* NxS[ 393] */ new Table(5, 46, -1, new short[] {394, -1, -1, -1, -1, -1, 
          394, 394, -1, -1, -1, 394, 394, -1, -1, -1, -1, -1, -1, -1, 394, 394, 
          -1, -1, -1, -1, -1, -1, -1, 394, -1, 394, -1, -1, 394, 394, 394, 394, 
          -1, 394, -1, 394, -1, -1, -1, 394}),
/* NxS[ 394] */ new Table(5, 46, -1, new short[] {395, -1, -1, -1, -1, -1, 
          395, 395, -1, -1, -1, 395, 395, -1, -1, -1, -1, -1, -1, -1, 395, 395, 
          -1, -1, -1, -1, -1, -1, -1, 395, -1, 395, -1, -1, 395, 395, 395, 395, 
          -1, 395, -1, 395, -1, -1, -1, 395}),
/* NxS[ 395] */ new Table(5, 46, -1, new short[] {396, -1, -1, -1, -1, -1, 
          396, 396, -1, -1, -1, 396, 396, -1, -1, -1, -1, -1, -1, -1, 396, 396, 
          -1, -1, -1, -1, -1, -1, -1, 396, -1, 396, -1, -1, 396, 396, 396, 396, 
          -1, 396, -1, 396, -1, -1, -1, 396}),
/* NxS[ 396] */ new Table(5, 46, -1, new short[] {366, -1, -1, -1, -1, -1, 
          366, 366, -1, -1, -1, 366, 366, -1, -1, -1, -1, -1, -1, -1, 366, 366, 
          -1, -1, -1, -1, -1, -1, -1, 366, -1, 366, -1, -1, 366, 366, 366, 366, 
          -1, 366, -1, 366, -1, -1, -1, 366}),
/* NxS[ 397] */ new Table(1, 2, 397, new short[] {398, 367}),
/* NxS[ 398] */ new Table(1, 50, -1, new short[] {397, 397, -1, -1, -1, -1, 
          -1, -1, -1, -1, -1, 397, -1, 397, 397, -1, -1, -1, -1, 397, -1, -1, 
          -1, -1, -1, 397, -1, -1, -1, -1, -1, -1, -1, -1, -1, 397, -1, -1, 
          397, -1, 397, -1, -1, -1, -1, -1, -1, -1, 397, 397}),
/* NxS[ 399] */ new Table(34, 33, 397, new short[] {370, 370, 370, 397, 397, 370, 
          397, 370, 397, 400, 397, 397, 397, 397, 397, 397, 370, 397, 397, 397, 397, 397, 
          397, 397, 397, 400, 397, 397, 397, 397, 397, 398, 367}),
/* NxS[ 400] */ new Table(34, 33, 397, new short[] {370, 370, 370, 397, 397, 370, 
          397, 370, 397, 397, 397, 397, 397, 397, 397, 397, 370, 397, 397, 397, 397, 397, 
          397, 397, 397, 397, 397, 397, 397, 397, 397, 398, 367}),
/* NxS[ 401] */ new Table(5, 46, -1, new short[] {402, -1, -1, -1, -1, -1, 
          402, 402, -1, -1, -1, 402, 402, -1, -1, -1, -1, -1, -1, -1, 402, 402, 
          -1, -1, -1, -1, -1, -1, -1, 402, -1, 402, -1, -1, 402, 402, 402, 402, 
          -1, 402, -1, 402, -1, -1, -1, 402}),
/* NxS[ 402] */ new Table(5, 46, -1, new short[] {403, -1, -1, -1, -1, -1, 
          403, 403, -1, -1, -1, 403, 403, -1, -1, -1, -1, -1, -1, -1, 403, 403, 
          -1, -1, -1, -1, -1, -1, -1, 403, -1, 403, -1, -1, 403, 403, 403, 403, 
          -1, 403, -1, 403, -1, -1, -1, 403}),
/* NxS[ 403] */ new Table(5, 46, -1, new short[] {404, -1, -1, -1, -1, -1, 
          404, 404, -1, -1, -1, 404, 404, -1, -1, -1, -1, -1, -1, -1, 404, 404, 
          -1, -1, -1, -1, -1, -1, -1, 404, -1, 404, -1, -1, 404, 404, 404, 404, 
          -1, 404, -1, 404, -1, -1, -1, 404}),
/* NxS[ 404] */ new Table(5, 46, -1, new short[] {372, -1, -1, -1, -1, -1, 
          372, 372, -1, -1, -1, 372, 372, -1, -1, -1, -1, -1, -1, -1, 372, 372, 
          -1, -1, -1, -1, -1, -1, -1, 372, -1, 372, -1, -1, 372, 372, 372, 372, 
          -1, 372, -1, 372, -1, -1, -1, 372}),
    };

int NextState() {
    if (code == ScanBuff.EndOfFile)
        return eofNum;
    else
        unchecked {
            int rslt;
            int idx = MapC(code) - NxS[state].min;
            if (idx < 0) idx += 64;
            if ((uint)idx >= (uint)NxS[state].rng) rslt = NxS[state].dflt;
            else rslt = NxS[state].nxt[idx];
            return rslt;
        }
}

#endregion


#if BACKUP
        // ==============================================================
        // == Nested struct used for backup in automata that do backup ==
        // ==============================================================

        struct Context // class used for automaton backup.
        {
            public int bPos;
            public int rPos; // scanner.readPos saved value
            public int cCol;
            public int lNum; // Need this in case of backup over EOL.
            public int state;
            public int cChr;
        }
        
        private Context ctx = new Context();
#endif // BACKUP

        // ==============================================================
        // ==== Nested struct to support input switching in scanners ====
        // ==============================================================

		struct BufferContext {
            internal ScanBuff buffSv;
			internal int chrSv;
			internal int cColSv;
			internal int lNumSv;
		}

        // ==============================================================
        // ===== Private methods to save and restore buffer contexts ====
        // ==============================================================

        /// <summary>
        /// This method creates a buffer context record from
        /// the current buffer object, together with some
        /// scanner state values. 
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        BufferContext MkBuffCtx()
		{
			BufferContext rslt;
			rslt.buffSv = this.buffer;
			rslt.chrSv = this.code;
			rslt.cColSv = this.cCol;
			rslt.lNumSv = this.lNum;
			return rslt;
		}

        /// <summary>
        /// This method restores the buffer value and allied
        /// scanner state from the given context record value.
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void RestoreBuffCtx(BufferContext value)
		{
			this.buffer = value.buffSv;
			this.code = value.chrSv;
			this.cCol = value.cColSv;
			this.lNum = value.lNumSv;
        } 
        // =================== End Nested classes =======================

#if !NOFILES
     public Scanner(Stream file) {
            SetSource(file, 0); // unicode option
        }

        public Scanner(Stream file, string codepage) {
            SetSource(file, CodePageHandling.GetCodePage(codepage));
        }   
#endif // !NOFILES

     public Scanner() { }

        private int readPos;

        void GetCode()
        {
            if (code == '\n')  // This needs to be fixed for other conventions
                               // i.e. [\r\n\205\u2028\u2029]
            { 
                cCol = -1;
                lNum++;
            }
            readPos = buffer.Pos;

            // Now read new codepoint.
            code = buffer.Read();
            if (code > ScanBuff.EndOfFile)
            {
#if (!BYTEMODE)
                if (code >= 0xD800 && code <= 0xDBFF)
                {
                    int next = buffer.Read();
                    if (next < 0xDC00 || next > 0xDFFF)
                        code = ScanBuff.UnicodeReplacementChar;
                    else
                        code = (0x10000 + ((code & 0x3FF) << 10) + (next & 0x3FF));
                }
#endif
                cCol++;
            }
        }

        void MarkToken()
        {
#if (!PERSIST)
            buffer.Mark();
#endif
            tokPos = readPos;
            tokLin = lNum;
            tokCol = cCol;
        }
        
        void MarkEnd()
        {
            tokTxt = null;
            tokEPos = readPos;
            tokELin = lNum;
            tokECol = cCol;
        }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int Peek()
        {
            int rslt, codeSv = code, cColSv = cCol, lNumSv = lNum, bPosSv = buffer.Pos;
            GetCode(); rslt = code;
            lNum = lNumSv; cCol = cColSv; code = codeSv; buffer.Pos = bPosSv;
            return rslt;
        }

        // ==============================================================
        // =====    Initialization of string-based input buffers     ====
        // ==============================================================

        /// <summary>
        /// Create and initialize a StringBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the input string</param>
        /// <param name="offset">starting offset in the string</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(string source, int offset)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.buffer.Pos = offset;
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }

        // ================ LineBuffer Initialization ===================
        /// <summary>
        /// Create and initialize a LineBuff buffer object for this scanner
        /// </summary>
        /// <param name="source">the list of input strings</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(IList<string> source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            this.lNum = 0;
            GetCode();
        }

#if !NOFILES        
        // =============== StreamBuffer Initialization ==================

        /// <summary>
        /// Create and initialize a StreamBuff buffer object for this scanner.
        /// StreamBuff is buffer for 8-bit byte files.
        /// </summary>
        /// <param name="source">the input byte stream</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source)
        {
            this.buffer = ScanBuff.GetBuffer(source);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
        
#if !BYTEMODE
        // ================ TextBuffer Initialization ===================

        /// <summary>
        /// Create and initialize a TextBuff buffer object for this scanner.
        /// TextBuff is a buffer for encoded unicode files.
        /// </summary>
        /// <param name="source">the input text file</param>
        /// <param name="fallbackCodePage">Code page to use if file has
        /// no BOM. For 0, use machine default; for -1, 8-bit binary</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        public void SetSource(Stream source, int fallbackCodePage)
        {
            this.buffer = ScanBuff.GetBuffer(source, fallbackCodePage);
            this.lNum = 0;
            this.code = '\n'; // to initialize yyline, yycol and lineStart
            GetCode();
        }
#endif // !BYTEMODE
#endif // !NOFILES
        
        // ==============================================================

#if BABEL
        //
        //  Get the next token for Visual Studio
        //
        //  "state" is the inout mode variable that maintains scanner
        //  state between calls, using the EolState property. In principle,
        //  if the calls of EolState are costly set could be called once
        //  only per line, at the start; and get called only at the end
        //  of the line. This needs more infrastructure ...
        //
        public int GetNext(ref int state, out int start, out int end)
        {
                Tokens next;
            int s, e;
            s = state;        // state at start
            EolState = state;
                next = (Tokens)Scan();
            state = EolState;
            e = state;       // state at end;
            start = tokPos;
            end = tokEPos - 1; // end is the index of last char.
            return (int)next;
        }        
#endif // BABEL

        // ======== AbstractScanner<> Implementation =========

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yylex")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yylex")]
        public override int yylex()
        {
            // parserMax is set by reflecting on the Tokens
            // enumeration.  If maxParseToken is defined
            // that is used, otherwise int.MaxValue is used.
            int next;
            do { next = Scan(); } while (next >= parserMax);
            return next;
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yypos { get { return tokPos; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yyline { get { return tokLin; } }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        int yycol { get { return tokCol; } }

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yytext")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yytext")]
        public string yytext
        {
            get 
            {
                if (tokTxt == null) 
                    tokTxt = buffer.GetString(tokPos, tokEPos);
                return tokTxt;
            }
        }

        /// <summary>
        /// Discards all but the first "n" codepoints in the recognized pattern.
        /// Resets the buffer position so that only n codepoints have been consumed;
        /// yytext is also re-evaluated. 
        /// </summary>
        /// <param name="n">The number of codepoints to consume</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void yyless(int n)
        {
            buffer.Pos = tokPos;
            // Must read at least one char, so set before start.
            cCol = tokCol - 1; 
            GetCode();
            // Now ensure that line counting is correct.
            lNum = tokLin;
            // And count the rest of the text.
            for (int i = 0; i < n; i++) GetCode();
            MarkEnd();
        }
       
        //
        //  It would be nice to count backward in the text
        //  but it does not seem possible to re-establish
        //  the correct column counts except by going forward.
        //
        /// <summary>
        /// Removes the last "n" code points from the pattern.
        /// </summary>
        /// <param name="n">The number to remove</param>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        void _yytrunc(int n) { yyless(yyleng - n); }
        
        //
        // This is painful, but we no longer count
        // codepoints.  For the overwhelming majority 
        // of cases the single line code is fast, for
        // the others, well, at least it is all in the
        // buffer so no files are touched. Note that we
        // can't use (tokEPos - tokPos) because of the
        // possibility of surrogate pairs in the token.
        //
        /// <summary>
        /// The length of the pattern in codepoints (not the same as 
        /// string-length if the pattern contains any surrogate pairs).
        /// </summary>
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        [SuppressMessage("Microsoft.Naming", "CA1709:IdentifiersShouldBeCasedCorrectly", MessageId = "yyleng")]
        [SuppressMessage("Microsoft.Naming", "CA1704:IdentifiersShouldBeSpelledCorrectly", MessageId = "yyleng")]
        public int yyleng
        {
            get {
                if (tokELin == tokLin)
                    return tokECol - tokCol;
                else
#if BYTEMODE
                    return tokEPos - tokPos;
#else
                {
                    int ch;
                    int count = 0;
                    int save = buffer.Pos;
                    buffer.Pos = tokPos;
                    do {
                        ch = buffer.Read();
                        if (!char.IsHighSurrogate((char)ch)) count++;
                    } while (buffer.Pos < tokEPos && ch != ScanBuff.EndOfFile);
                    buffer.Pos = save;
                    return count;
                }
#endif // BYTEMODE
            }
        }
        
        // ============ methods available in actions ==============

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int YY_START {
            get { return currentScOrd; }
            set { currentScOrd = value; 
                  currentStart = startState[value]; 
            } 
        }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void BEGIN(int next) {
            currentScOrd = next;
            currentStart = startState[next];
        }

        // ============== The main tokenizer code =================

        int Scan() {
// User-specified prolog to scan()
/* 3.3 Unicode Escapes -  Joshua Hudson &  Vivian Lee */
// End, user-specified prolog
                for (; ; ) {
                    int next;              // next state to enter
#if LEFTANCHORS
                    for (;;) {
                        // Discard characters that do not start any pattern.
                        // Must check the left anchor condition after *every* GetCode!
                        state = ((cCol == 0) ? anchorState[currentScOrd] : currentStart);
                        if ((next = NextState()) != goStart) break; // LOOP EXIT HERE...
                        GetCode();
                    }
                    
#else // !LEFTANCHORS
                    state = currentStart;
                    while ((next = NextState()) == goStart) {
                        // At this point, the current character has no
                        // transition from the current state.  We discard 
                        // the "no-match" char.   In traditional LEX such 
                        // characters are echoed to the console.
                        GetCode();
                    }
#endif // LEFTANCHORS                    
                    // At last, a valid transition ...    
                    MarkToken();
                    state = next;
                    GetCode();                    
#if BACKUP
                    bool contextSaved = false;
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                        if (state <= maxAccept && next > maxAccept) { // need to prepare backup data
                            // Store data for the *latest* accept state that was found.
                            SaveStateAndPos( ref ctx );
                            contextSaved = true;
                        }
                        state = next;
                        GetCode();
                    }
                    if (state > maxAccept && contextSaved)
                        RestoreStateAndPos( ref ctx );
#else  // BACKUP
                    while ((next = NextState()) > eofNum) { // Exit for goStart AND for eofNum
                         state = next;
                         GetCode();
                    }
#endif // BACKUP
                    if (state <= maxAccept) {
                        MarkEnd();
#region ActionSwitch
#pragma warning disable 162, 1522
    switch (state)
    {
        case eofNum:
            if (yywrap())
                return (int)Tokens.EOF;
            break;
        case 1:
        case 34:
throw new Exception(
												String.Format(
													"unexpected character '{0}'", yytext));
            break;
        case 2:
/* IGNORE */
            break;
        case 3:
/* IGNORE */
            break;
        case 4:
        case 10:
        case 32:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
return yytext[0];
            break;
        case 5:
        case 349:
return (int)Tokens.UNICODE_MARKER;
            break;
        case 6:
        case 12:
        case 13:
        case 17:
        case 18:
        case 23:
        case 24:
        case 29:
        case 31:
return (int)Tokens.HEXDIGIT;
            break;
        case 7:
        case 9:
        case 11:
/* skip whitespace */
            break;
        case 8:
/* skip whitespace */
            break;
        case 14:
        case 15:
        case 16:
        case 19:
        case 20:
        case 21:
        case 22:
        case 25:
        case 26:
        case 27:
        case 28:
        case 115:
        case 116:
        case 120:
        case 121:
        case 122:
        case 124:
        case 125:
        case 126:
        case 128:
        case 129:
        case 130:
        case 131:
        case 133:
        case 134:
        case 135:
        case 136:
        case 137:
        case 138:
        case 139:
        case 140:
        case 142:
        case 143:
        case 144:
        case 145:
        case 146:
        case 148:
        case 149:
        case 150:
        case 151:
        case 153:
        case 154:
        case 155:
        case 157:
        case 158:
        case 160:
        case 161:
        case 162:
        case 163:
        case 164:
        case 165:
        case 167:
        case 169:
        case 170:
        case 173:
        case 174:
        case 176:
        case 178:
        case 179:
        case 180:
        case 182:
        case 183:
        case 184:
        case 185:
        case 187:
        case 189:
        case 190:
        case 191:
        case 192:
        case 193:
        case 194:
        case 195:
        case 196:
        case 197:
        case 199:
        case 201:
        case 203:
        case 204:
        case 205:
        case 206:
        case 207:
        case 209:
        case 210:
        case 211:
        case 212:
        case 213:
        case 214:
        case 216:
        case 217:
        case 218:
        case 220:
        case 221:
        case 222:
        case 224:
        case 226:
        case 227:
        case 229:
        case 230:
        case 231:
        case 232:
        case 233:
        case 234:
        case 235:
        case 237:
        case 239:
        case 241:
        case 242:
        case 243:
        case 244:
        case 245:
        case 247:
        case 248:
        case 250:
        case 251:
        case 252:
        case 253:
        case 254:
        case 255:
        case 258:
        case 259:
        case 260:
        case 263:
        case 264:
        case 265:
        case 266:
        case 268:
        case 269:
        case 270:
        case 271:
        case 273:
        case 276:
        case 278:
        case 279:
        case 280:
        case 281:
        case 282:
        case 284:
        case 285:
        case 286:
        case 287:
        case 288:
        case 289:
        case 290:
        case 291:
        case 293:
        case 294:
        case 296:
        case 297:
        case 298:
        case 299:
        case 300:
        case 301:
        case 302:
        case 303:
        case 304:
        case 306:
        case 307:
        case 308:
        case 309:
        case 310:
        case 311:
        case 313:
        case 314:
        case 316:
        case 317:
        case 319:
        case 320:
        case 321:
        case 322:
        case 324:
        case 325:
        case 326:
        case 327:
        case 329:
        case 330:
        case 332:
        case 333:
        case 334:
        case 335:
        case 336:
        case 338:
        case 339:
        case 340:
        case 341:
        case 342:
        case 350:
        case 352:
        case 353:
        case 356:
        case 357:
yylval.name = yytext; return (int)Tokens.IDENT;
            break;
        case 30:
        case 73:
        case 112:
        case 119:
yylval.name = yytext; return (int)Tokens.DecimalIntegerLiteral;
            break;
        case 33:
        case 35:
return yytext[0];
            break;
        case 46:
        case 48:
        case 49:
        case 67:
        case 72:
        case 74:
        case 75:
        case 76:
        case 78:
        case 86:
        case 93:
        case 95:
        case 100:
        case 103:
        case 108:
        case 111:
        case 113:
        case 114:
        case 117:
        case 118:
        case 351:
        case 354:
        case 355:
        case 358:
        case 359:
        case 364:
        case 368:
        case 369:
        case 370:
yylval.name = yytext; return (int)Tokens.DecimalFloatingPointLiteral;
            break;
        case 47:
return (int)Tokens.BITWISE_XOR_ASSIGNMENT;
            break;
        case 50:
return (int)Tokens.MODULUS_ASSIGNMENT;
            break;
        case 51:
return (int)Tokens.BITWISE_AND_ASSIGNMENT;
            break;
        case 52:
return (int)Tokens.LOGICAL_AND;
            break;
        case 53:
return (int)Tokens.SUBTRACTION_ASSIGNMENT;
            break;
        case 54:
return (int)Tokens.ARROW;
            break;
        case 55:
return (int)Tokens.DECREMENT;
            break;
        case 56:
return (int)Tokens.NOT_EQUAL;
            break;
        case 57:
return (int)Tokens.LESS_THAN_OR_EQUAL;
            break;
        case 58:
return (int)Tokens.LEFT_SHIFT;
            break;
        case 59:
return (int)Tokens.LEFT_SHIFT_ASSIGNMENT;
            break;
        case 60:
return (int)Tokens.GREATER_OR_EQUAL;
            break;
        case 61:
return (int)Tokens.SIGNED_RIGHT_SHIFT;
            break;
        case 62:
return (int)Tokens.UNSIGNED_RIGHT_SHIFT_ASSIGNMENT;
            break;
        case 63:
return (int)Tokens.UNSIGNED_RIGHT_SHIFT;
            break;
        case 64:
return (int)Tokens.SIGNED_RIGHT_SHIFT_ASSIGNMENT;
            break;
        case 65:
return (int)Tokens.EQUAL;
            break;
        case 66:
return (int)Tokens.DOUBLE_COLON;
            break;
        case 68:
yylval.name = yytext; return (int)Tokens.CharacterLiteral;
            break;
        case 69:
return (int)Tokens.ELLIPSIS;
            break;
        case 70:
return (int)Tokens.INCREMENT;
            break;
        case 71:
return (int)Tokens.ADDITION_ASSIGNMENT;
            break;
        case 77:
        case 104:
yylval.name = yytext; return (int)Tokens.OctalIntegerLiteral;
            break;
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 87:
        case 88:
        case 89:
        case 92:
        case 94:
        case 96:
        case 97:
        case 98:
        case 99:
        case 101:
        case 102:
        case 105:
        case 106:
        case 107:
yylval.name = yytext; return (int)Tokens.HexIntegerLiteral;
            break;
        case 90:
        case 91:
yylval.name = yytext; return (int)Tokens.HexFloatingPointLiteral;
            break;
        case 109:
        case 110:
yylval.name = yytext; return (int)Tokens.BinaryIntegerLiteral;
            break;
        case 123:
return (int)Tokens.WHILE;
            break;
        case 127:
return (int)Tokens.VOID;
            break;
        case 132:
return (int)Tokens.VOLATILE;
            break;
        case 141:
return (int)Tokens.PRIVATE;
            break;
        case 147:
return (int)Tokens.PROTECTED;
            break;
        case 152:
return (int)Tokens.PACKAGE;
            break;
        case 156:
return (int)Tokens.PUBLIC;
            break;
        case 159:
return (int)Tokens.GOTO;
            break;
        case 166:
return (int)Tokens.FINAL;
            break;
        case 168:
return (int)Tokens.FINALLY;
            break;
        case 171:
return (int)Tokens.FLOAT;
            break;
        case 172:
return (int)Tokens.FOR;
            break;
        case 175:
yylval.name = yytext; return (int)Tokens.BooleanLiteral;
            break;
        case 177:
return (int)Tokens.DO;
            break;
        case 181:
return (int)Tokens.DOUBLE;
            break;
        case 186:
return (int)Tokens.DEFAULT;
            break;
        case 188:
return (int)Tokens.IF;
            break;
        case 198:
return (int)Tokens.IMPLEMENTS;
            break;
        case 200:
return (int)Tokens.IMPORT;
            break;
        case 202:
return (int)Tokens.INT;
            break;
        case 208:
return (int)Tokens.INTERFACE;
            break;
        case 215:
return (int)Tokens.INSTANCE_OF;
            break;
        case 219:
return (int)Tokens.NEW;
            break;
        case 223:
return (int)Tokens.NATIVE;
            break;
        case 225:
return (int)Tokens.NullLiteral;
            break;
        case 228:
return (int)Tokens.LONG;
            break;
        case 236:
return (int)Tokens.EXTENDS;
            break;
        case 238:
return (int)Tokens.ENUM;
            break;
        case 240:
return (int)Tokens.ELSE;
            break;
        case 246:
return (int)Tokens.CHAR;
            break;
        case 249:
return (int)Tokens.CLASS;
            break;
        case 256:
return (int)Tokens.CONTINUE;
            break;
        case 257:
return (int)Tokens.CONST;
            break;
        case 261:
return (int)Tokens.CATCH;
            break;
        case 262:
return (int)Tokens.CASE;
            break;
        case 267:
return (int)Tokens.RETURN;
            break;
        case 272:
return (int)Tokens.THIS;
            break;
        case 274:
return (int)Tokens.THROW;
            break;
        case 275:
return (int)Tokens.THROWS;
            break;
        case 277:
return (int)Tokens.TRY;
            break;
        case 283:
return (int)Tokens.TRANSIENT;
            break;
        case 292:
return (int)Tokens.SWITCH;
            break;
        case 295:
return (int)Tokens.SHORT;
            break;
        case 305:
return (int)Tokens.SYNCHRONIZED;
            break;
        case 312:
return (int)Tokens.STRICTFP;
            break;
        case 315:
return (int)Tokens.STATIC;
            break;
        case 318:
return (int)Tokens.SUPER;
            break;
        case 323:
return (int)Tokens.BYTE;
            break;
        case 328:
return (int)Tokens.BOOLEAN;
            break;
        case 331:
return (int)Tokens.BREAK;
            break;
        case 337:
return (int)Tokens.ASSERT;
            break;
        case 343:
return (int)Tokens.ABSTRACT;
            break;
        case 344:
/* skip the line comment  */
            break;
        case 345:
return (int)Tokens.DIVISION_ASSIGNMENT;
            break;
        case 346:
/* skip multiline comments */
            break;
        case 347:
return (int)Tokens.LOGICAL_OR;
            break;
        case 348:
return (int)Tokens.BITWISE_OR_ASSIGNMENT;
            break;
        case 360:
        case 361:
        case 362:
        case 363:
return (int)Tokens.UNICODE_RAW_INPUT;
            break;
        case 365:
return (int)Tokens.MULTIPLICATION_ASSIGNMENT;
            break;
        case 366:
return (int)Tokens.UNICODE_INPUT_CHAR;
            break;
        case 367:
yylval.name = yytext; return (int)Tokens.StringLiteral;
            break;
        case 371:
yylval.name = yytext; return (int)Tokens.EscapeSequence;
            break;
        case 372:
return (int)Tokens.UNICODE_ESCAPE;
            break;
        default:
            break;
    }
#pragma warning restore 162, 1522
#endregion
                    }
                }
        }

#if BACKUP
        void SaveStateAndPos(ref Context ctx) {
            ctx.bPos  = buffer.Pos;
            ctx.rPos  = readPos;
            ctx.cCol  = cCol;
            ctx.lNum  = lNum;
            ctx.state = state;
            ctx.cChr  = code;
        }

        void RestoreStateAndPos(ref Context ctx) {
            buffer.Pos = ctx.bPos;
            readPos = ctx.rPos;
            cCol  = ctx.cCol;
            lNum  = ctx.lNum;
            state = ctx.state;
            code  = ctx.cChr;
        }
#endif  // BACKUP

        // ============= End of the tokenizer code ================

#if STACK        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void yy_clear_stack() { scStack.Clear(); }
        
        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal int yy_top_state() { return scStack.Peek(); }
        
        internal void yy_push_state(int state)
        {
            scStack.Push(currentScOrd);
            BEGIN(state);
        }
        
        internal void yy_pop_state()
        {
            // Protect against input errors that pop too far ...
            if (scStack.Count > 0) {
				int newSc = scStack.Pop();
				BEGIN(newSc);
            } // Otherwise leave stack unchanged.
        }
 #endif // STACK

        [SuppressMessage("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal void ECHO() { Console.Out.Write(yytext); }
        
    } // end class $Scanner

// ==============================================================
// <auto-generated>
// This code automatically produced from an embedded resource.
// Do not edit this file, or it will become incompatible with 
// the specification from which it was generated.
// </auto-generated>
// ==============================================================

// Code copied from GPLEX embedded resource
    [Serializable]
    public class BufferException : Exception
    {
        public BufferException() { }
        public BufferException(string message) : base(message) { }
        public BufferException(string message, Exception innerException)
            : base(message, innerException) { }
        protected BufferException(SerializationInfo info, StreamingContext context)
            : base(info, context) { }
    }

    public abstract class ScanBuff
    {
        private string fileNm;

        public const int EndOfFile = -1;
        public const int UnicodeReplacementChar = 0xFFFD;

        public bool IsFile { get { return (fileNm != null); } }
        public string FileName { get { return fileNm; } set { fileNm = value; } }

        public abstract int Pos { get; set; }
        public abstract int Read();
        public virtual void Mark() { }

        public abstract string GetString(int begin, int limit);

        public static ScanBuff GetBuffer(string source)
        {
            return new StringBuffer(source);
        }

        public static ScanBuff GetBuffer(IList<string> source)
        {
            return new LineBuffer(source);
        }

#if (!NOFILES)
        public static ScanBuff GetBuffer(Stream source)
        {
            return new BuildBuffer(source);
        }

#if (!BYTEMODE)
        public static ScanBuff GetBuffer(Stream source, int fallbackCodePage)
        {
            return new BuildBuffer(source, fallbackCodePage);
        }
#endif // !BYTEMODE
#endif // !NOFILES
    }

    #region Buffer classes

    // ==============================================================
    // =====  Definitions for various ScanBuff derived classes   ====
    // ==============================================================
    // ===============         String input          ================
    // ==============================================================

    /// <summary>
    /// This class reads characters from a single string as
    /// required, for example, by Visual Studio language services
    /// </summary>
    sealed class StringBuffer : ScanBuff
    {
        string str;        // input buffer
        int bPos;          // current position in buffer
        int sLen;

        public StringBuffer(string source)
        {
            this.str = source;
            this.sLen = source.Length;
            this.FileName = null;
        }

        public override int Read()
        {
            if (bPos < sLen) return str[bPos++];
            else if (bPos == sLen) { bPos++; return '\n'; }   // one strike, see new line
            else { bPos++; return EndOfFile; }                // two strikes and you're out!
        }

        public override string GetString(int begin, int limit)
        {
            //  "limit" can be greater than sLen with the BABEL
            //  option set.  Read returns a "virtual" EOL if
            //  an attempt is made to read past the end of the
            //  string buffer.  Without the guard any attempt 
            //  to fetch yytext for a token that includes the 
            //  EOL will throw an index exception.
            if (limit > sLen) limit = sLen;
            if (limit <= begin) return "";
            else return str.Substring(begin, limit - begin);
        }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }

        public override string ToString() { return "StringBuffer"; }
    }

    // ==============================================================
    //  The LineBuff class contributed by Nigel Horspool, 
    //  nigelh@cs.uvic.cs
    // ==============================================================

    sealed class LineBuffer : ScanBuff
    {
        IList<string> line;    // list of source lines from a file
        int numLines;          // number of strings in line list
        string curLine;        // current line in that list
        int cLine;             // index of current line in the list
        int curLen;            // length of current line
        int curLineStart;      // position of line start in whole file
        int curLineEnd;        // position of line end in whole file
        int maxPos;            // max position ever visited in whole file
        int cPos;              // ordinal number of code in source

        // Constructed from a list of strings, one per source line.
        // The lines have had trailing '\n' characters removed.
        public LineBuffer(IList<string> lineList)
        {
            line = lineList;
            numLines = line.Count;
            cPos = curLineStart = 0;
            curLine = (numLines > 0 ? line[0] : "");
            maxPos = curLineEnd = curLen = curLine.Length;
            cLine = 1;
            FileName = null;
        }

        public override int Read()
        {
            if (cPos < curLineEnd)
                return curLine[cPos++ - curLineStart];
            if (cPos++ == curLineEnd)
                return '\n';
            if (cLine >= numLines)
                return EndOfFile;
            curLine = line[cLine];
            curLen = curLine.Length;
            curLineStart = curLineEnd + 1;
            curLineEnd = curLineStart + curLen;
            if (curLineEnd > maxPos)
                maxPos = curLineEnd;
            cLine++;
            return curLen > 0 ? curLine[0] : '\n';
        }

        // To speed up searches for the line containing a position
        private int cachedPosition;
        private int cachedIxdex;
        private int cachedLineStart;

        // Given a position pos within the entire source, the results are
        //   ix     -- the index of the containing line
        //   lstart -- the position of the first character on that line
        private void findIndex(int pos, out int ix, out int lstart)
        {
            if (pos >= cachedPosition)
            {
                ix = cachedIxdex; lstart = cachedLineStart;
            }
            else
            {
                ix = lstart = 0;
            }
            while (ix < numLines)
            {
                int len = line[ix].Length + 1;
                if (pos < lstart + len) break;
                lstart += len;
                ix++;
            }
            cachedPosition = pos;
            cachedIxdex = ix;
            cachedLineStart = lstart;
        }

        public override string GetString(int begin, int limit)
        {
            if (begin >= maxPos || limit <= begin) return "";
            int endIx, begIx, endLineStart, begLineStart;
            findIndex(begin, out begIx, out begLineStart);
            int begCol = begin - begLineStart;
            findIndex(limit, out endIx, out endLineStart);
            int endCol = limit - endLineStart;
            string s = line[begIx];
            if (begIx == endIx)
            {
                // the usual case, substring all on one line
                return (endCol <= s.Length) ?
                    s.Substring(begCol, endCol - begCol)
                    : s.Substring(begCol) + "\n";
            }
            // the string spans multiple lines, yuk!
            StringBuilder sb = new StringBuilder();
            if (begCol < s.Length)
                sb.Append(s.Substring(begCol));
            for (; ; )
            {
                sb.Append("\n");
                s = line[++begIx];
                if (begIx >= endIx) break;
                sb.Append(s);
            }
            if (endCol <= s.Length)
            {
                sb.Append(s.Substring(0, endCol));
            }
            else
            {
                sb.Append(s);
                sb.Append("\n");
            }
            return sb.ToString();
        }

        public override int Pos
        {
            get { return cPos; }
            set
            {
                cPos = value;
                findIndex(cPos, out cLine, out curLineStart);
                // cLine should be the *next* line after curLine.
                curLine = (cLine < numLines ? line[cLine++] : "");
                curLineEnd = curLineStart + curLine.Length;
            }
        }

        public override string ToString() { return "LineBuffer"; }
    }

#if (!NOFILES)
    // ==============================================================
    // =====     class BuildBuff : for unicode text files    ========
    // ==============================================================

    class BuildBuffer : ScanBuff
    {
        // Double buffer for char stream.
        class BufferElement
        {
            StringBuilder bldr = new StringBuilder();
            StringBuilder next = new StringBuilder();
            int minIx;
            int maxIx;
            int brkIx;
            bool appendToNext;

            internal BufferElement() { }

            internal int MaxIndex { get { return maxIx; } }
            // internal int MinIndex { get { return minIx; } }

            internal char this[int index]
            {
                get
                {
                    if (index < minIx || index >= maxIx)
                        throw new BufferException("Index was outside data buffer");
                    else if (index < brkIx)
                        return bldr[index - minIx];
                    else
                        return next[index - brkIx];
                }
            }

            internal void Append(char[] block, int count)
            {
                maxIx += count;
                if (appendToNext)
                    this.next.Append(block, 0, count);
                else
                {
                    this.bldr.Append(block, 0, count);
                    brkIx = maxIx;
                    appendToNext = true;
                }
            }

            internal string GetString(int start, int limit)
            {
                if (limit <= start)
                    return "";
                if (start >= minIx && limit <= maxIx)
                    if (limit < brkIx) // String entirely in bldr builder
                        return bldr.ToString(start - minIx, limit - start);
                    else if (start >= brkIx) // String entirely in next builder
                        return next.ToString(start - brkIx, limit - start);
                    else // Must do a string-concatenation
                        return
                            bldr.ToString(start - minIx, brkIx - start) +
                            next.ToString(0, limit - brkIx);
                else
                    throw new BufferException("String was outside data buffer");
            }

            internal void Mark(int limit)
            {
                if (limit > brkIx + 16) // Rotate blocks
                {
                    StringBuilder temp = bldr;
                    bldr = next;
                    next = temp;
                    next.Length = 0;
                    minIx = brkIx;
                    brkIx = maxIx;
                }
            }
        }

        BufferElement data = new BufferElement();

        int bPos;            // Postion index in the StringBuilder
        BlockReader NextBlk; // Delegate that serves char-arrays;

        private string EncodingName
        {
            get
            {
                StreamReader rdr = NextBlk.Target as StreamReader;
                return (rdr == null ? "raw-bytes" : rdr.CurrentEncoding.BodyName);
            }
        }

        public BuildBuffer(Stream stream)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Raw(stream);
        }

#if (!BYTEMODE)
        public BuildBuffer(Stream stream, int fallbackCodePage)
        {
            FileStream fStrm = (stream as FileStream);
            if (fStrm != null) FileName = fStrm.Name;
            NextBlk = BlockReaderFactory.Get(stream, fallbackCodePage);
        }
#endif

        /// <summary>
        /// Marks a conservative lower bound for the buffer,
        /// allowing space to be reclaimed.  If an application 
        /// needs to call GetString at arbitrary past locations 
        /// in the input stream, Mark() is not called.
        /// </summary>
        public override void Mark() { data.Mark(bPos - 2); }

        public override int Pos
        {
            get { return bPos; }
            set { bPos = value; }
        }


        /// <summary>
        /// Read returns the ordinal number of the next char, or 
        /// EOF (-1) for an end of stream.  Note that the next
        /// code point may require *two* calls of Read().
        /// </summary>
        /// <returns></returns>
        public override int Read()
        {
            //
            //  Characters at positions 
            //  [data.offset, data.offset + data.bldr.Length)
            //  are available in data.bldr.
            //
            if (bPos < data.MaxIndex)
            {
                // ch0 cannot be EOF
                return (int)data[bPos++];
            }
            else // Read from underlying stream
            {
                // Experimental code, blocks of page size
                char[] chrs = new char[4096];
                int count = NextBlk(chrs, 0, 4096);
                if (count == 0)
                    return EndOfFile;
                else
                {
                    data.Append(chrs, count);
                    return (int)data[bPos++];
                }
            }
        }

        public override string GetString(int begin, int limit)
        {
            return data.GetString(begin, limit);
        }

        public override string ToString()
        {
            return "StringBuilder buffer, encoding: " + this.EncodingName;
        }
    }

    // =============== End ScanBuff-derived classes ==================

    public delegate int BlockReader(char[] block, int index, int number);

    // A delegate factory, serving up a delegate that
    // reads a block of characters from the underlying
    // encoded stream, via a StreamReader object.
    //
    public static class BlockReaderFactory
    {
        public static BlockReader Raw(Stream stream)
        {
            return delegate(char[] block, int index, int number)
            {
                byte[] b = new byte[number];
                int count = stream.Read(b, 0, number);
                int i = 0;
                int j = index;
                for (; i < count; i++, j++)
                    block[j] = (char)b[i];
                return count;
            };
        }

#if (!BYTEMODE)
        public static BlockReader Get(Stream stream, int fallbackCodePage)
        {
            Encoding encoding;
            int preamble = Preamble(stream);

            if (preamble != 0)  // There is a valid BOM here!
                encoding = Encoding.GetEncoding(preamble);
            else if (fallbackCodePage == -1) // Fallback is "raw" bytes
                return Raw(stream);
            else if (fallbackCodePage != -2) // Anything but "guess"
                encoding = Encoding.GetEncoding(fallbackCodePage);
            else // This is the "guess" option
            {
                int guess = new Guesser(stream).GuessCodePage();
                stream.Seek(0, SeekOrigin.Begin);
                if (guess == -1) // ==> this is a 7-bit file
                    encoding = Encoding.ASCII;
                else if (guess == 65001)
                    encoding = Encoding.UTF8;
                else             // ==> use the machine default
                    encoding = Encoding.Default;
            }
            StreamReader reader = new StreamReader(stream, encoding);
            return reader.Read;
        }

        static int Preamble(Stream stream)
        {
            int b0 = stream.ReadByte();
            int b1 = stream.ReadByte();

            if (b0 == 0xfe && b1 == 0xff)
                return 1201; // UTF16BE
            if (b0 == 0xff && b1 == 0xfe)
                return 1200; // UTF16LE

            int b2 = stream.ReadByte();
            if (b0 == 0xef && b1 == 0xbb && b2 == 0xbf)
                return 65001; // UTF8
            //
            // There is no unicode preamble, so we
            // return denoter for the machine default.
            //
            stream.Seek(0, SeekOrigin.Begin);
            return 0;
        }
#endif // !BYTEMODE
    }
#endif // !NOFILES
    #endregion Buffer classes

    // ==============================================================
    // ============      class CodePageHandling         =============
    // ==============================================================
#if (!NOFILES)
    public static class CodePageHandling
    {
        public static int GetCodePage(string option)
        {
            string command = option.ToUpperInvariant();
            if (command.StartsWith("CodePage:", StringComparison.OrdinalIgnoreCase))
                command = command.Substring(9);
            try
            {
                if (command.Equals("RAW"))
                    return -1;
                else if (command.Equals("GUESS"))
                    return -2;
                else if (command.Equals("DEFAULT"))
                    return 0;
                else if (char.IsDigit(command[0]))
                    return int.Parse(command, CultureInfo.InvariantCulture);
                else
                {
                    Encoding enc = Encoding.GetEncoding(command);
                    return enc.CodePage;
                }
            }
            catch (FormatException)
            {
                Console.Error.WriteLine(
                    "Invalid format \"{0}\", using machine default", option);
            }
            catch (ArgumentException)
            {
                Console.Error.WriteLine(
                    "Unknown code page \"{0}\", using machine default", option);
            }
            return 0;
        }
    }
#region guesser
#if (!BYTEMODE)
    // ==============================================================
    // ============          Encoding Guesser           =============
    // ==============================================================

    /// <summary>
    /// This class provides a simple finite state automaton that
    /// scans the file looking for (1) valid UTF-8 byte patterns,
    /// (2) bytes >= 0x80 which are not part of a UTF-8 sequence.
    /// The method then guesses whether it is UTF-8 or maybe some 
    /// local machine default encoding.  This works well for the
    /// various Latin encodings.
    /// </summary>
    internal class Guesser
    {
        ScanBuff buffer;

        public int GuessCodePage() { return Scan(); }

        const int maxAccept = 10;
        const int initial = 0;
        const int eofNum = 0;
        const int goStart = -1;
        const int INITIAL = 0;
        const int EndToken = 0;

        #region user code
        /* 
         *  Reads the bytes of a file to determine if it is 
         *  UTF-8 or a single-byte code page file.
         */
        public long utfX;
        public long uppr;
        #endregion user code

        int state;
        int currentStart = startState[0];
        int code;

        #region ScannerTables
        static int[] startState = new int[] { 11, 0 };

        #region CharacterMap
        static sbyte[] map = new sbyte[256] {
/*     '\0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x10' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x20' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '0' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '@' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'P' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      '`' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*      'p' */ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
/*   '\x80' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\x90' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xA0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xB0' */ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 
/*   '\xC0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xD0' */ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 
/*   '\xE0' */ 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 
/*   '\xF0' */ 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5 };
        #endregion

        static sbyte[][] nextState = new sbyte[][] {
            new sbyte[] {0, 0, 0, 0, 0, 0},
            new sbyte[] {-1, -1, 10, -1, -1, -1},
            new sbyte[] {-1, -1, -1, -1, -1, -1},
            new sbyte[] {-1, -1, 8, -1, -1, -1},
            new sbyte[] {-1, -1, 5, -1, -1, -1},
            new sbyte[] {-1, -1, 6, -1, -1, -1},
            new sbyte[] {-1, -1, 7, -1, -1, -1},
            null,
            new sbyte[] {-1, -1, 9, -1, -1, -1},
            null,
            null,
            new sbyte[] {-1, 1, 2, 3, 4, 2}
        };


        [SuppressMessage("Microsoft.Performance", "CA1810:InitializeReferenceTypeStaticFieldsInline")]
        // Reason for suppression: cannot have self-reference in array initializer.
        static Guesser()
        {
            nextState[7] = nextState[2];
            nextState[9] = nextState[2];
            nextState[10] = nextState[2];
        }

        int NextState()
        {
            if (code == ScanBuff.EndOfFile)
                return eofNum;
            else
                return nextState[state][map[code]];
        }
        #endregion

        public Guesser(System.IO.Stream file) { SetSource(file); }

        public void SetSource(System.IO.Stream source)
        {
            this.buffer = new BuildBuffer(source);
            code = buffer.Read();
        }

        int Scan()
        {
            for (; ; )
            {
                int next;
                state = currentStart;
                while ((next = NextState()) == goStart)
                    code = buffer.Read();

                state = next;
                code = buffer.Read();

                while ((next = NextState()) > eofNum)
                {
                    state = next;
                    code = buffer.Read();
                }
                if (state <= maxAccept)
                {
                    #region ActionSwitch
#pragma warning disable 162
                    switch (state)
                    {
                        case eofNum:
                            switch (currentStart)
                            {
                                case 11:
                                    if (utfX == 0 && uppr == 0) return -1; /* raw ascii */
                                    else if (uppr * 10 > utfX) return 0;   /* default code page */
                                    else return 65001;                     /* UTF-8 encoding */
                                    break;
                            }
                            return EndToken;
                        case 1: // Recognized '{Upper128}',	Shortest string "\xC0"
                        case 2: // Recognized '{Upper128}',	Shortest string "\x80"
                        case 3: // Recognized '{Upper128}',	Shortest string "\xE0"
                        case 4: // Recognized '{Upper128}',	Shortest string "\xF0"
                            uppr++;
                            break;
                        case 5: // Recognized '{Utf8pfx4}{Utf8cont}',	Shortest string "\xF0\x80"
                            uppr += 2;
                            break;
                        case 6: // Recognized '{Utf8pfx4}{Utf8cont}{2}',	Shortest string "\xF0\x80\x80"
                            uppr += 3;
                            break;
                        case 7: // Recognized '{Utf8pfx4}{Utf8cont}{3}',	Shortest string "\xF0\x80\x80\x80"
                            utfX += 3;
                            break;
                        case 8: // Recognized '{Utf8pfx3}{Utf8cont}',	Shortest string "\xE0\x80"
                            uppr += 2;
                            break;
                        case 9: // Recognized '{Utf8pfx3}{Utf8cont}{2}',	Shortest string "\xE0\x80\x80"
                            utfX += 2;
                            break;
                        case 10: // Recognized '{Utf8pfx2}{Utf8cont}',	Shortest string "\xC0\x80"
                            utfX++;
                            break;
                        default:
                            break;
                    }
#pragma warning restore 162
                    #endregion
                }
            }
        }
    } // end class Guesser
    
#endif // !BYTEMODE
#endregion
#endif // !NOFILES

// End of code copied from embedded resource

} // end namespace
